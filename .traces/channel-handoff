c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 2 ((1 tagged-value-address deref) <- arg) -- nil
c{0: 3 ((2 type) <- arg) -- nil
c{0: 4 ((3 type) <- get (1 tagged-value-address deref) (0 offset)) -- nil
c{0: 5 ((4 boolean) <- eq (3 type) (2 type)) -- nil
c{0: 6 (break-if (4 boolean)) -- ((open 6))
c{0: 7 (reply (0 literal) (nil literal)) -- ((open 6))
c{0: 8 ((5 location) <- get (1 tagged-value-address deref) (1 offset)) -- ((close 8) (open 6))
c{0: 9 (reply (5 location) (4 boolean)) -- ((close 8) (open 6))
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 tagged-value-address))
c{1: 2 arg ((1 tagged-value-address deref))
c{1: 3 arg ((2 type))
c{1: 4 get ((3 type))
c{1: 5 eq ((4 boolean))
c{1: 6 begin nil
c{1: 6 break-if nil
c{1: 7 reply nil
c{1: 8 get ((5 location))
c{1: 9 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (1 tagged-value-address)
maybe-add: (1 tagged-value-address)
cn0: ((1 tagged-value-address deref) <- arg) nil nil
cn0: checking (1 tagged-value-address deref)
maybe-add: (1 tagged-value-address deref)
cn0: ((2 type) <- arg) nil nil
cn0: checking (2 type)
maybe-add: (2 type)
cn0: ((3 type) <- get (1 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (3 type)
maybe-add: (3 type)
cn0: ((4 boolean) <- eq (3 type) (2 type)) nil nil
maybe-add: (3 type)
maybe-add: (2 type)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-if (4 boolean) (1 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (1 offset)
cn0: (reply (0 literal) (nil literal)) nil nil
maybe-add: (0 literal)
maybe-add: (nil literal)
cn0: ((5 location) <- get (1 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: (reply (5 location) (4 boolean)) nil nil
maybe-add: (5 location)
maybe-add: (4 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 type) <- arg) -- nil
c{0: 2 ((2 integer) <- sizeof (1 type)) -- nil
c{0: 3 ((3 boolean) <- eq (2 integer) (1 literal)) -- nil
c{0: 4 (assert (3 boolean)) -- nil
c{0: 5 ((4 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 6 ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) -- nil
c{0: 7 ((5 location deref) <- copy (1 type)) -- nil
c{0: 8 ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) -- nil
c{0: 9 ((6 location deref) <- arg) -- nil
c{0: 10 (reply (4 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 type))
c{1: 2 sizeof ((2 integer))
c{1: 3 eq ((3 boolean))
c{1: 4 assert nil
c{1: 5 new ((4 tagged-value-address))
c{1: 6 get-address ((5 location))
c{1: 7 copy ((5 location deref))
c{1: 8 get-address ((6 location))
c{1: 9 arg ((6 location deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 type) <- arg) nil nil
cn0: checking (1 type)
maybe-add: (1 type)
cn0: ((2 integer) <- sizeof (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn0: ((3 boolean) <- eq (2 integer) (1 literal)) nil nil
maybe-add: (2 integer)
maybe-add: (1 literal)
cn0: checking (3 boolean)
maybe-add: (3 boolean)
cn0: (assert (3 boolean)) nil nil
maybe-add: (3 boolean)
cn0: ((4 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (4 tagged-value-address)
maybe-add: (4 tagged-value-address)
cn0: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: ((5 location deref) <- copy (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (5 location deref)
maybe-add: (5 location deref)
cn0: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (6 location)
maybe-add: (6 location)
cn0: ((6 location deref) <- arg) nil nil
cn0: checking (6 location deref)
maybe-add: (6 location deref)
cn0: (reply (4 tagged-value-address)) nil nil
maybe-add: (4 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 list-address) <- get (1 list-address deref) (1 offset)) -- nil
c{0: 3 (reply (2 list-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get ((2 list-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- get (1 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: (reply (2 list-address)) nil nil
maybe-add: (2 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) -- nil
c{0: 3 (reply (2 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get-address ((2 tagged-value-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 tagged-value-address)
maybe-add: (2 tagged-value-address)
cn0: (reply (2 tagged-value-address)) nil nil
maybe-add: (2 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- new (list literal)) -- nil
c{0: 2 ((2 list-address) <- copy (1 list-address)) -- nil
c{0: 3 ((3 integer) (4 boolean) <- arg) -- ((open 3))
c{0: 4 (break-unless (4 boolean)) -- ((open 3))
c{0: 5 ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) -- ((open 3))
c{0: 6 ((5 list-address-address deref) <- new (list literal)) -- ((open 3))
c{0: 7 ((2 list-address) <- list-next (2 list-address)) -- ((open 3))
c{0: 8 ((6 tagged-value-address) <- list-value-address (2 list-address)) -- ((open 3))
c{0: 9 ((6 tagged-value-address deref) <- save-type (3 integer)) -- ((open 3))
c{0: 10 (loop) -- ((open 3))
c{0: 11 ((1 list-address) <- list-next (1 list-address)) -- ((close 11) (open 3))
c{0: 12 (reply (1 list-address)) -- ((close 11) (open 3))
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 list-address))
c{1: 2 copy ((2 list-address))
c{1: 3 begin nil
c{1: 3 arg ((3 integer) (4 boolean))
c{1: 4 break-unless nil
c{1: 5 get-address ((5 list-address-address))
c{1: 6 new ((5 list-address-address deref))
c{1: 7 list-next ((2 list-address))
c{1: 8 list-value-address ((6 tagged-value-address))
c{1: 9 save-type ((6 tagged-value-address deref))
c{1: 10 loop nil
c{1: 11 list-next ((1 list-address))
c{1: 12 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- copy (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((3 integer) (4 boolean) <- arg) nil nil
cn0: checking (3 integer)
maybe-add: (3 integer)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (6 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (6 offset)
cn0: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 list-address-address)
maybe-add: (5 list-address-address)
cn0: ((5 list-address-address deref) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (5 list-address-address deref)
maybe-add: (5 list-address-address deref)
cn0: ((2 list-address) <- list-next (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((6 tagged-value-address) <- list-value-address (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (6 tagged-value-address)
maybe-add: (6 tagged-value-address)
cn0: ((6 tagged-value-address deref) <- save-type (3 integer)) nil nil
maybe-add: (3 integer)
cn0: checking (6 tagged-value-address deref)
maybe-add: (6 tagged-value-address deref)
cn0: (jump (-8 offset)) nil nil
maybe-add: (-8 offset)
cn0: ((1 list-address) <- list-next (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: (reply (1 list-address)) nil nil
maybe-add: (1 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- new (channel literal)) -- nil
c{0: 2 ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 3 ((2 integer-address deref) <- copy (0 literal)) -- nil
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 5 ((3 integer-address deref) <- copy (0 literal)) -- nil
c{0: 6 ((4 integer) <- arg) -- nil
c{0: 7 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 8 ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) -- nil
c{0: 9 ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) -- nil
c{0: 10 (reply (1 channel-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 channel-address))
c{1: 2 get-address ((2 integer-address))
c{1: 3 copy ((2 integer-address deref))
c{1: 4 get-address ((3 integer-address))
c{1: 5 copy ((3 integer-address deref))
c{1: 6 arg ((4 integer))
c{1: 7 add ((4 integer))
c{1: 8 get-address ((5 tagged-value-array-address-address))
c{1: 9 new ((5 tagged-value-array-address-address deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- new (channel literal)) nil nil
maybe-add: (channel literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 integer-address)
maybe-add: (2 integer-address)
cn0: ((2 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (2 integer-address deref)
maybe-add: (2 integer-address deref)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: ((3 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (3 integer-address deref)
maybe-add: (3 integer-address deref)
cn0: ((4 integer) <- arg) nil nil
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address-address)
maybe-add: (5 tagged-value-array-address-address)
cn0: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) nil nil
maybe-add: (tagged-value-array literal)
maybe-add: (4 integer)
cn0: checking (5 tagged-value-array-address-address deref)
maybe-add: (5 tagged-value-array-address-address deref)
cn0: (reply (1 channel-address)) nil nil
maybe-add: (1 channel-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) -- nil
c{0: 3 ((5 integer) <- len (4 tagged-value-array-address deref)) -- nil
c{0: 4 (reply (5 integer)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 tagged-value-array-address))
c{1: 3 len ((5 integer))
c{1: 4 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) nil nil
cn0: field-access 2
cn0: checking (4 tagged-value-array-address)
maybe-add: (4 tagged-value-array-address)
cn0: ((5 integer) <- len (4 tagged-value-array-address deref)) nil nil
maybe-add: (4 tagged-value-array-address deref)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: (reply (5 integer)) nil nil
maybe-add: (5 integer)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 tagged-value) <- arg) -- nil
c{0: 3 ((4 boolean) <- full? (1 channel-address deref)) -- ((open 3))
c{0: 4 (break-unless (4 boolean)) -- ((open 3))
c{0: 5 ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- ((open 3))
c{0: 6 (sleep (5 integer-address deref)) -- ((open 3))
c{0: 7 ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- ((close 7) (open 3))
c{0: 8 ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- ((close 7) (open 3))
c{0: 9 ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) -- ((close 7) (open 3))
c{0: 10 ((8 tagged-value-address deref) <- copy (2 tagged-value)) -- ((close 7) (open 3))
c{0: 11 ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) -- ((close 7) (open 3))
c{0: 12 ((9 integer) <- len (6 tagged-value-array-address deref)) -- ((open 12) (close 7) (open 3))
c{0: 13 ((10 boolean) <- lt (7 integer-address deref) (9 integer)) -- ((open 12) (close 7) (open 3))
c{0: 14 (break-if (10 boolean)) -- ((open 12) (close 7) (open 3))
c{0: 15 ((7 integer-address deref) <- copy (0 literal)) -- ((open 12) (close 7) (open 3))
c{0: 16 (reply (1 channel-address deref)) -- ((close 16) (open 12) (close 7) (open 3))
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 arg ((2 tagged-value))
c{1: 3 begin nil
c{1: 3 full? ((4 boolean))
c{1: 4 break-unless nil
c{1: 5 get-address ((5 integer-address))
c{1: 6 sleep nil
c{1: 7 get ((6 tagged-value-array-address))
c{1: 8 get-address ((7 integer-address))
c{1: 9 index-address ((8 tagged-value-address))
c{1: 10 copy ((8 tagged-value-address deref))
c{1: 11 add ((7 integer-address deref))
c{1: 12 begin nil
c{1: 12 len ((9 integer))
c{1: 13 lt ((10 boolean))
c{1: 14 break-if nil
c{1: 15 copy ((7 integer-address deref))
c{1: 16 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 tagged-value) <- arg) nil nil
cn0: checking (2 tagged-value)
maybe-add: (2 tagged-value)
cn0: ((4 boolean) <- full? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (2 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (2 offset)
cn0: ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 integer-address)
maybe-add: (5 integer-address)
cn0: (sleep (5 integer-address deref)) nil nil
maybe-add: (5 integer-address deref)
cn0: ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (6 tagged-value-array-address)
maybe-add: (6 tagged-value-array-address)
cn0: ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (7 integer-address)
maybe-add: (7 integer-address)
cn0: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
maybe-add: (7 integer-address deref)
cn0: checking (8 tagged-value-address)
maybe-add: (8 tagged-value-address)
cn0: ((8 tagged-value-address deref) <- copy (2 tagged-value)) nil nil
maybe-add: (2 tagged-value)
cn0: checking (8 tagged-value-address deref)
maybe-add: (8 tagged-value-address deref)
cn0: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (1 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: ((9 integer) <- len (6 tagged-value-array-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
cn0: checking (9 integer)
maybe-add: (9 integer)
cn0: ((10 boolean) <- lt (7 integer-address deref) (9 integer)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (9 integer)
cn0: checking (10 boolean)
maybe-add: (10 boolean)
cn0: (jump-if (10 boolean) (1 offset)) nil nil
maybe-add: (10 boolean)
maybe-add: (1 offset)
cn0: ((7 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: (reply (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 boolean) <- empty? (1 channel-address deref)) -- ((open 2))
c{0: 3 (break-unless (2 boolean)) -- ((open 2))
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- ((open 2))
c{0: 5 (sleep (3 integer-address deref)) -- ((open 2))
c{0: 6 ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- ((close 6) (open 2))
c{0: 7 ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- ((close 6) (open 2))
c{0: 8 ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) -- ((close 6) (open 2))
c{0: 9 ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) -- ((close 6) (open 2))
c{0: 10 ((8 integer) <- len (5 tagged-value-array-address deref)) -- ((open 10) (close 6) (open 2))
c{0: 11 ((9 boolean) <- lt (4 integer-address deref) (8 integer)) -- ((open 10) (close 6) (open 2))
c{0: 12 (break-if (9 boolean)) -- ((open 10) (close 6) (open 2))
c{0: 13 ((4 integer-address deref) <- copy (0 literal)) -- ((open 10) (close 6) (open 2))
c{0: 14 (reply (6 tagged-value) (1 channel-address deref)) -- ((close 14) (open 10) (close 6) (open 2))
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 begin nil
c{1: 2 empty? ((2 boolean))
c{1: 3 break-unless nil
c{1: 4 get-address ((3 integer-address))
c{1: 5 sleep nil
c{1: 6 get-address ((4 integer-address))
c{1: 7 get ((5 tagged-value-array-address))
c{1: 8 index ((6 tagged-value))
c{1: 9 add ((4 integer-address deref))
c{1: 10 begin nil
c{1: 10 len ((8 integer))
c{1: 11 lt ((9 boolean))
c{1: 12 break-if nil
c{1: 13 copy ((4 integer-address deref))
c{1: 14 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 boolean) <- empty? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (2 boolean)
maybe-add: (2 boolean)
cn0: (jump-unless (2 boolean) (2 offset)) nil nil
maybe-add: (2 boolean)
maybe-add: (2 offset)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: (sleep (3 integer-address deref)) nil nil
maybe-add: (3 integer-address deref)
cn0: ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (4 integer-address)
maybe-add: (4 integer-address)
cn0: ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address)
maybe-add: (5 tagged-value-array-address)
cn0: ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
maybe-add: (4 integer-address deref)
cn0: checking (6 tagged-value)
maybe-add: (6 tagged-value)
cn0: ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (1 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: ((8 integer) <- len (5 tagged-value-array-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
cn0: checking (8 integer)
maybe-add: (8 integer)
cn0: ((9 boolean) <- lt (4 integer-address deref) (8 integer)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (8 integer)
cn0: checking (9 boolean)
maybe-add: (9 boolean)
cn0: (jump-if (9 boolean) (1 offset)) nil nil
maybe-add: (9 boolean)
maybe-add: (1 offset)
cn0: ((4 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: (reply (6 tagged-value) (1 channel-address deref)) nil nil
maybe-add: (6 tagged-value)
maybe-add: (1 channel-address deref)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (0 offset)) -- nil
c{0: 3 ((5 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 4 ((6 boolean) <- eq (4 integer) (5 integer)) -- nil
c{0: 5 (reply (6 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 get ((5 integer))
c{1: 4 eq ((6 boolean))
c{1: 5 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- eq (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (reply (6 boolean)) nil nil
maybe-add: (6 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 3 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 4 ((5 integer) <- capacity (1 channel)) -- ((open 4))
c{0: 5 ((6 boolean) <- lt (4 integer) (5 integer)) -- ((open 4))
c{0: 6 (break-if (6 boolean)) -- ((open 4))
c{0: 7 ((4 integer) <- copy (0 literal)) -- ((open 4))
c{0: 8 ((7 integer) <- get (1 channel) (0 offset)) -- ((close 8) (open 4))
c{0: 9 ((8 boolean) <- eq (7 integer) (4 integer)) -- ((close 8) (open 4))
c{0: 10 (reply (8 boolean)) -- ((close 8) (open 4))
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 add ((4 integer))
c{1: 4 begin nil
c{1: 4 capacity ((5 integer))
c{1: 5 lt ((6 boolean))
c{1: 6 break-if nil
c{1: 7 copy ((4 integer))
c{1: 8 get ((7 integer))
c{1: 9 eq ((8 boolean))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- capacity (1 channel)) nil nil
maybe-add: (1 channel)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- lt (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (jump-if (6 boolean) (1 offset)) nil nil
maybe-add: (6 boolean)
maybe-add: (1 offset)
cn0: ((4 integer) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((7 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (7 integer)
maybe-add: (7 integer)
cn0: ((8 boolean) <- eq (7 integer) (4 integer)) nil nil
maybe-add: (7 integer)
maybe-add: (4 integer)
cn0: checking (8 boolean)
maybe-add: (8 boolean)
cn0: (reply (8 boolean)) nil nil
maybe-add: (8 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) -- nil
c{0: 3 ((5 integer) <- len (4 tagged-value-array-address deref)) -- nil
c{0: 4 (reply (5 integer)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 tagged-value-array-address))
c{1: 3 len ((5 integer))
c{1: 4 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 tagged-value-array-address) <- get (1 channel) (2 offset)) nil nil
cn0: field-access 2
cn0: checking (4 tagged-value-array-address)
maybe-add: (4 tagged-value-array-address)
cn0: ((5 integer) <- len (4 tagged-value-array-address deref)) nil nil
maybe-add: (4 tagged-value-array-address deref)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: (reply (5 integer)) nil nil
maybe-add: (5 integer)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (0 offset)) -- nil
c{0: 3 ((5 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 4 ((6 boolean) <- eq (4 integer) (5 integer)) -- nil
c{0: 5 (reply (6 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 get ((5 integer))
c{1: 4 eq ((6 boolean))
c{1: 5 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- eq (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (reply (6 boolean)) nil nil
maybe-add: (6 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((chan channel-address) <- new-channel (3 literal)) -- nil
c{0: 2 (fork (f2 fn) (chan channel-address)) -- nil
c{0: 3 ((1 tagged-value global) <- read (chan channel-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new-channel ((chan channel-address))
c{1: 2 fork nil
c{1: 3 read ((1 tagged-value global))
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((chan channel-address) <- new-channel (3 literal)) nil nil
maybe-add: (3 literal)
cn0: checking (chan channel-address)
maybe-add: (chan channel-address)
cn0: location for arg (chan channel-address): 1
sizeof: channel-address
cn0: (fork (f2 fn) (chan channel-address)) ((chan 1)) nil
maybe-add: (f2 fn)
maybe-add: (chan channel-address)
cn0: ((1 tagged-value global) <- read (chan channel-address)) ((chan 1)) nil
maybe-add: (chan channel-address)
cn0: checking (1 tagged-value global)
maybe-add: (1 tagged-value global)
cn1: update names ((chan 1)) nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((n integer-address) <- new (integer literal)) -- nil
c{0: 2 ((n integer-address deref) <- copy (24 literal)) -- nil
c{0: 3 ((ochan channel-address) <- arg) -- nil
c{0: 4 ((x tagged-value-address) <- new-tagged-value (integer-address literal) (n integer-address)) -- nil
c{0: 5 ((ochan channel-address deref) <- write (ochan channel-address) (x tagged-value-address deref)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((n integer-address))
c{1: 2 copy ((n integer-address deref))
c{1: 3 arg ((ochan channel-address))
c{1: 4 new-tagged-value ((x tagged-value-address))
c{1: 5 write ((ochan channel-address deref))
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((n integer-address) <- new (integer literal)) nil nil
maybe-add: (integer literal)
cn0: checking (n integer-address)
maybe-add: (n integer-address)
cn0: location for arg (n integer-address): 1
sizeof: integer-address
cn0: ((n integer-address deref) <- copy (24 literal)) ((n 1)) nil
maybe-add: (24 literal)
cn0: checking (n integer-address deref)
maybe-add: (n integer-address deref)
cn0: ((ochan channel-address) <- arg) ((n 1)) nil
cn0: checking (ochan channel-address)
maybe-add: (ochan channel-address)
cn0: location for arg (ochan channel-address): 2
sizeof: channel-address
cn0: ((x tagged-value-address) <- new-tagged-value (integer-address literal) (n integer-address)) ((n 1) (ochan 2)) nil
maybe-add: (integer-address literal)
maybe-add: (n integer-address)
cn0: checking (x tagged-value-address)
maybe-add: (x tagged-value-address)
cn0: location for arg (x tagged-value-address): 3
sizeof: tagged-value-address
cn0: ((ochan channel-address deref) <- write (ochan channel-address) (x tagged-value-address deref)) ((n 1) (ochan 2) (x 3)) nil
maybe-add: (ochan channel-address)
maybe-add: (x tagged-value-address deref)
cn0: checking (ochan channel-address deref)
maybe-add: (ochan channel-address deref)
cn1: update names ((n 1) (ochan 2) (x 3)) nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel) <- arg) -- nil
c{0: 2 ((4 integer) <- get (1 channel) (1 offset)) -- nil
c{0: 3 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 4 ((5 integer) <- capacity (1 channel)) -- nil
c{0: 5 ((6 boolean) <- lt (4 integer) (5 integer)) -- nil
c{0: 6 (jump-if (6 boolean) (1 offset)) -- nil
c{0: 7 ((4 integer) <- copy (0 literal)) -- nil
c{0: 8 ((7 integer) <- get (1 channel) (0 offset)) -- nil
c{0: 9 ((8 boolean) <- eq (7 integer) (4 integer)) -- nil
c{0: 10 (reply (8 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel))
c{1: 2 get ((4 integer))
c{1: 3 add ((4 integer))
c{1: 4 capacity ((5 integer))
c{1: 5 lt ((6 boolean))
c{1: 6 jump-if nil
c{1: 7 copy ((4 integer))
c{1: 8 get ((7 integer))
c{1: 9 eq ((8 boolean))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel) <- arg) nil nil
cn0: checking (1 channel)
maybe-add: (1 channel)
cn0: ((4 integer) <- get (1 channel) (1 offset)) nil nil
cn0: field-access 1
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 integer) <- capacity (1 channel)) nil nil
maybe-add: (1 channel)
cn0: checking (5 integer)
maybe-add: (5 integer)
cn0: ((6 boolean) <- lt (4 integer) (5 integer)) nil nil
maybe-add: (4 integer)
maybe-add: (5 integer)
cn0: checking (6 boolean)
maybe-add: (6 boolean)
cn0: (jump-if (6 boolean) (1 offset)) nil nil
maybe-add: (6 boolean)
maybe-add: (1 offset)
cn0: ((4 integer) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((7 integer) <- get (1 channel) (0 offset)) nil nil
cn0: field-access 0
cn0: checking (7 integer)
maybe-add: (7 integer)
cn0: ((8 boolean) <- eq (7 integer) (4 integer)) nil nil
maybe-add: (7 integer)
maybe-add: (4 integer)
cn0: checking (8 boolean)
maybe-add: (8 boolean)
cn0: (reply (8 boolean)) nil nil
maybe-add: (8 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 list-address) <- get (1 list-address deref) (1 offset)) -- nil
c{0: 3 (reply (2 list-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get ((2 list-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- get (1 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: (reply (2 list-address)) nil nil
maybe-add: (2 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- arg) -- nil
c{0: 2 ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) -- nil
c{0: 3 (reply (2 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 list-address))
c{1: 2 get-address ((2 tagged-value-address))
c{1: 3 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- arg) nil nil
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 tagged-value-address) <- get-address (1 list-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 tagged-value-address)
maybe-add: (2 tagged-value-address)
cn0: (reply (2 tagged-value-address)) nil nil
maybe-add: (2 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 2 ((1 tagged-value-address deref) <- arg) -- nil
c{0: 3 ((2 type) <- arg) -- nil
c{0: 4 ((3 type) <- get (1 tagged-value-address deref) (0 offset)) -- nil
c{0: 5 ((4 boolean) <- eq (3 type) (2 type)) -- nil
c{0: 6 (jump-if (4 boolean) (1 offset)) -- nil
c{0: 7 (reply (0 literal) (nil literal)) -- nil
c{0: 8 ((5 location) <- get (1 tagged-value-address deref) (1 offset)) -- nil
c{0: 9 (reply (5 location) (4 boolean)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 tagged-value-address))
c{1: 2 arg ((1 tagged-value-address deref))
c{1: 3 arg ((2 type))
c{1: 4 get ((3 type))
c{1: 5 eq ((4 boolean))
c{1: 6 jump-if nil
c{1: 7 reply nil
c{1: 8 get ((5 location))
c{1: 9 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (1 tagged-value-address)
maybe-add: (1 tagged-value-address)
cn0: ((1 tagged-value-address deref) <- arg) nil nil
cn0: checking (1 tagged-value-address deref)
maybe-add: (1 tagged-value-address deref)
cn0: ((2 type) <- arg) nil nil
cn0: checking (2 type)
maybe-add: (2 type)
cn0: ((3 type) <- get (1 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (3 type)
maybe-add: (3 type)
cn0: ((4 boolean) <- eq (3 type) (2 type)) nil nil
maybe-add: (3 type)
maybe-add: (2 type)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-if (4 boolean) (1 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (1 offset)
cn0: (reply (0 literal) (nil literal)) nil nil
maybe-add: (0 literal)
maybe-add: (nil literal)
cn0: ((5 location) <- get (1 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: (reply (5 location) (4 boolean)) nil nil
maybe-add: (5 location)
maybe-add: (4 boolean)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- new (channel literal)) -- nil
c{0: 2 ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 3 ((2 integer-address deref) <- copy (0 literal)) -- nil
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 5 ((3 integer-address deref) <- copy (0 literal)) -- nil
c{0: 6 ((4 integer) <- arg) -- nil
c{0: 7 ((4 integer) <- add (4 integer) (1 literal)) -- nil
c{0: 8 ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) -- nil
c{0: 9 ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) -- nil
c{0: 10 (reply (1 channel-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 channel-address))
c{1: 2 get-address ((2 integer-address))
c{1: 3 copy ((2 integer-address deref))
c{1: 4 get-address ((3 integer-address))
c{1: 5 copy ((3 integer-address deref))
c{1: 6 arg ((4 integer))
c{1: 7 add ((4 integer))
c{1: 8 get-address ((5 tagged-value-array-address-address))
c{1: 9 new ((5 tagged-value-array-address-address deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- new (channel literal)) nil nil
maybe-add: (channel literal)
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (2 integer-address)
maybe-add: (2 integer-address)
cn0: ((2 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (2 integer-address deref)
maybe-add: (2 integer-address deref)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: ((3 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (3 integer-address deref)
maybe-add: (3 integer-address deref)
cn0: ((4 integer) <- arg) nil nil
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((4 integer) <- add (4 integer) (1 literal)) nil nil
maybe-add: (4 integer)
maybe-add: (1 literal)
cn0: checking (4 integer)
maybe-add: (4 integer)
cn0: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address-address)
maybe-add: (5 tagged-value-array-address-address)
cn0: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer)) nil nil
maybe-add: (tagged-value-array literal)
maybe-add: (4 integer)
cn0: checking (5 tagged-value-array-address-address deref)
maybe-add: (5 tagged-value-array-address-address deref)
cn0: (reply (1 channel-address)) nil nil
maybe-add: (1 channel-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 list-address) <- new (list literal)) -- nil
c{0: 2 ((2 list-address) <- copy (1 list-address)) -- nil
c{0: 3 ((3 integer) (4 boolean) <- arg) -- nil
c{0: 4 (jump-unless (4 boolean) (6 offset)) -- nil
c{0: 5 ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) -- nil
c{0: 6 ((5 list-address-address deref) <- new (list literal)) -- nil
c{0: 7 ((2 list-address) <- list-next (2 list-address)) -- nil
c{0: 8 ((6 tagged-value-address) <- list-value-address (2 list-address)) -- nil
c{0: 9 ((6 tagged-value-address deref) <- save-type (3 integer)) -- nil
c{0: 10 (jump (-8 offset)) -- nil
c{0: 11 ((1 list-address) <- list-next (1 list-address)) -- nil
c{0: 12 (reply (1 list-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 new ((1 list-address))
c{1: 2 copy ((2 list-address))
c{1: 3 arg ((3 integer) (4 boolean))
c{1: 4 jump-unless nil
c{1: 5 get-address ((5 list-address-address))
c{1: 6 new ((5 list-address-address deref))
c{1: 7 list-next ((2 list-address))
c{1: 8 list-value-address ((6 tagged-value-address))
c{1: 9 save-type ((6 tagged-value-address deref))
c{1: 10 jump nil
c{1: 11 list-next ((1 list-address))
c{1: 12 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 list-address) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: ((2 list-address) <- copy (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((3 integer) (4 boolean) <- arg) nil nil
cn0: checking (3 integer)
maybe-add: (3 integer)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (6 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (6 offset)
cn0: ((5 list-address-address) <- get-address (2 list-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (5 list-address-address)
maybe-add: (5 list-address-address)
cn0: ((5 list-address-address deref) <- new (list literal)) nil nil
maybe-add: (list literal)
cn0: checking (5 list-address-address deref)
maybe-add: (5 list-address-address deref)
cn0: ((2 list-address) <- list-next (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (2 list-address)
maybe-add: (2 list-address)
cn0: ((6 tagged-value-address) <- list-value-address (2 list-address)) nil nil
maybe-add: (2 list-address)
cn0: checking (6 tagged-value-address)
maybe-add: (6 tagged-value-address)
cn0: ((6 tagged-value-address deref) <- save-type (3 integer)) nil nil
maybe-add: (3 integer)
cn0: checking (6 tagged-value-address deref)
maybe-add: (6 tagged-value-address deref)
cn0: (jump (-8 offset)) nil nil
maybe-add: (-8 offset)
cn0: ((1 list-address) <- list-next (1 list-address)) nil nil
maybe-add: (1 list-address)
cn0: checking (1 list-address)
maybe-add: (1 list-address)
cn0: (reply (1 list-address)) nil nil
maybe-add: (1 list-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 type) <- arg) -- nil
c{0: 2 ((2 integer) <- sizeof (1 type)) -- nil
c{0: 3 ((3 boolean) <- eq (2 integer) (1 literal)) -- nil
c{0: 4 (assert (3 boolean)) -- nil
c{0: 5 ((4 tagged-value-address) <- new (tagged-value literal)) -- nil
c{0: 6 ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) -- nil
c{0: 7 ((5 location deref) <- copy (1 type)) -- nil
c{0: 8 ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) -- nil
c{0: 9 ((6 location deref) <- arg) -- nil
c{0: 10 (reply (4 tagged-value-address)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 type))
c{1: 2 sizeof ((2 integer))
c{1: 3 eq ((3 boolean))
c{1: 4 assert nil
c{1: 5 new ((4 tagged-value-address))
c{1: 6 get-address ((5 location))
c{1: 7 copy ((5 location deref))
c{1: 8 get-address ((6 location))
c{1: 9 arg ((6 location deref))
c{1: 10 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 type) <- arg) nil nil
cn0: checking (1 type)
maybe-add: (1 type)
cn0: ((2 integer) <- sizeof (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (2 integer)
maybe-add: (2 integer)
cn0: ((3 boolean) <- eq (2 integer) (1 literal)) nil nil
maybe-add: (2 integer)
maybe-add: (1 literal)
cn0: checking (3 boolean)
maybe-add: (3 boolean)
cn0: (assert (3 boolean)) nil nil
maybe-add: (3 boolean)
cn0: ((4 tagged-value-address) <- new (tagged-value literal)) nil nil
maybe-add: (tagged-value literal)
cn0: checking (4 tagged-value-address)
maybe-add: (4 tagged-value-address)
cn0: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 location)
maybe-add: (5 location)
cn0: ((5 location deref) <- copy (1 type)) nil nil
maybe-add: (1 type)
cn0: checking (5 location deref)
maybe-add: (5 location deref)
cn0: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (6 location)
maybe-add: (6 location)
cn0: ((6 location deref) <- arg) nil nil
cn0: checking (6 location deref)
maybe-add: (6 location deref)
cn0: (reply (4 tagged-value-address)) nil nil
maybe-add: (4 tagged-value-address)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 boolean) <- empty? (1 channel-address deref)) -- nil
c{0: 3 (jump-unless (2 boolean) (2 offset)) -- nil
c{0: 4 ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 5 (sleep (3 integer-address deref)) -- nil
c{0: 6 ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 7 ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- nil
c{0: 8 ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) -- nil
c{0: 9 ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) -- nil
c{0: 10 ((8 integer) <- len (5 tagged-value-array-address deref)) -- nil
c{0: 11 ((9 boolean) <- lt (4 integer-address deref) (8 integer)) -- nil
c{0: 12 (jump-if (9 boolean) (1 offset)) -- nil
c{0: 13 ((4 integer-address deref) <- copy (0 literal)) -- nil
c{0: 14 (reply (6 tagged-value) (1 channel-address deref)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 empty? ((2 boolean))
c{1: 3 jump-unless nil
c{1: 4 get-address ((3 integer-address))
c{1: 5 sleep nil
c{1: 6 get-address ((4 integer-address))
c{1: 7 get ((5 tagged-value-array-address))
c{1: 8 index ((6 tagged-value))
c{1: 9 add ((4 integer-address deref))
c{1: 10 len ((8 integer))
c{1: 11 lt ((9 boolean))
c{1: 12 jump-if nil
c{1: 13 copy ((4 integer-address deref))
c{1: 14 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 boolean) <- empty? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (2 boolean)
maybe-add: (2 boolean)
cn0: (jump-unless (2 boolean) (2 offset)) nil nil
maybe-add: (2 boolean)
maybe-add: (2 offset)
cn0: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (3 integer-address)
maybe-add: (3 integer-address)
cn0: (sleep (3 integer-address deref)) nil nil
maybe-add: (3 integer-address deref)
cn0: ((4 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (4 integer-address)
maybe-add: (4 integer-address)
cn0: ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (5 tagged-value-array-address)
maybe-add: (5 tagged-value-array-address)
cn0: ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
maybe-add: (4 integer-address deref)
cn0: checking (6 tagged-value)
maybe-add: (6 tagged-value)
cn0: ((4 integer-address deref) <- add (4 integer-address deref) (1 literal)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (1 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: ((8 integer) <- len (5 tagged-value-array-address deref)) nil nil
maybe-add: (5 tagged-value-array-address deref)
cn0: checking (8 integer)
maybe-add: (8 integer)
cn0: ((9 boolean) <- lt (4 integer-address deref) (8 integer)) nil nil
maybe-add: (4 integer-address deref)
maybe-add: (8 integer)
cn0: checking (9 boolean)
maybe-add: (9 boolean)
cn0: (jump-if (9 boolean) (1 offset)) nil nil
maybe-add: (9 boolean)
maybe-add: (1 offset)
cn0: ((4 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (4 integer-address deref)
maybe-add: (4 integer-address deref)
cn0: (reply (6 tagged-value) (1 channel-address deref)) nil nil
maybe-add: (6 tagged-value)
maybe-add: (1 channel-address deref)
cn1: update names nil nil
c{0: 0 ((default-scope scope-address) <- new (scope literal) (30 literal)) -- nil
c{0: 1 ((1 channel-address) <- arg) -- nil
c{0: 2 ((2 tagged-value) <- arg) -- nil
c{0: 3 ((4 boolean) <- full? (1 channel-address deref)) -- nil
c{0: 4 (jump-unless (4 boolean) (2 offset)) -- nil
c{0: 5 ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) -- nil
c{0: 6 (sleep (5 integer-address deref)) -- nil
c{0: 7 ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) -- nil
c{0: 8 ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) -- nil
c{0: 9 ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) -- nil
c{0: 10 ((8 tagged-value-address deref) <- copy (2 tagged-value)) -- nil
c{0: 11 ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) -- nil
c{0: 12 ((9 integer) <- len (6 tagged-value-array-address deref)) -- nil
c{0: 13 ((10 boolean) <- lt (7 integer-address deref) (9 integer)) -- nil
c{0: 14 (jump-if (10 boolean) (1 offset)) -- nil
c{0: 15 ((7 integer-address deref) <- copy (0 literal)) -- nil
c{0: 16 (reply (1 channel-address deref)) -- nil
c{1: 0 new ((default-scope scope-address))
c{1: 1 arg ((1 channel-address))
c{1: 2 arg ((2 tagged-value))
c{1: 3 full? ((4 boolean))
c{1: 4 jump-unless nil
c{1: 5 get-address ((5 integer-address))
c{1: 6 sleep nil
c{1: 7 get ((6 tagged-value-array-address))
c{1: 8 get-address ((7 integer-address))
c{1: 9 index-address ((8 tagged-value-address))
c{1: 10 copy ((8 tagged-value-address deref))
c{1: 11 add ((7 integer-address deref))
c{1: 12 len ((9 integer))
c{1: 13 lt ((10 boolean))
c{1: 14 jump-if nil
c{1: 15 copy ((7 integer-address deref))
c{1: 16 reply nil
cn0: ((default-scope scope-address) <- new (scope literal) (30 literal)) nil nil
maybe-add: (scope literal)
maybe-add: (30 literal)
cn0: checking (default-scope scope-address)
maybe-add: (default-scope scope-address)
cn0: ((1 channel-address) <- arg) nil nil
cn0: checking (1 channel-address)
maybe-add: (1 channel-address)
cn0: ((2 tagged-value) <- arg) nil nil
cn0: checking (2 tagged-value)
maybe-add: (2 tagged-value)
cn0: ((4 boolean) <- full? (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn0: checking (4 boolean)
maybe-add: (4 boolean)
cn0: (jump-unless (4 boolean) (2 offset)) nil nil
maybe-add: (4 boolean)
maybe-add: (2 offset)
cn0: ((5 integer-address) <- get-address (1 channel-address deref) (0 offset)) nil nil
cn0: field-access 0
cn0: field-access deref
cn0: checking (5 integer-address)
maybe-add: (5 integer-address)
cn0: (sleep (5 integer-address deref)) nil nil
maybe-add: (5 integer-address deref)
cn0: ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset)) nil nil
cn0: field-access 2
cn0: field-access deref
cn0: checking (6 tagged-value-array-address)
maybe-add: (6 tagged-value-array-address)
cn0: ((7 integer-address) <- get-address (1 channel-address deref) (1 offset)) nil nil
cn0: field-access 1
cn0: field-access deref
cn0: checking (7 integer-address)
maybe-add: (7 integer-address)
cn0: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
maybe-add: (7 integer-address deref)
cn0: checking (8 tagged-value-address)
maybe-add: (8 tagged-value-address)
cn0: ((8 tagged-value-address deref) <- copy (2 tagged-value)) nil nil
maybe-add: (2 tagged-value)
cn0: checking (8 tagged-value-address deref)
maybe-add: (8 tagged-value-address deref)
cn0: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (1 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: ((9 integer) <- len (6 tagged-value-array-address deref)) nil nil
maybe-add: (6 tagged-value-array-address deref)
cn0: checking (9 integer)
maybe-add: (9 integer)
cn0: ((10 boolean) <- lt (7 integer-address deref) (9 integer)) nil nil
maybe-add: (7 integer-address deref)
maybe-add: (9 integer)
cn0: checking (10 boolean)
maybe-add: (10 boolean)
cn0: (jump-if (10 boolean) (1 offset)) nil nil
maybe-add: (10 boolean)
maybe-add: (1 offset)
cn0: ((7 integer-address deref) <- copy (0 literal)) nil nil
maybe-add: (0 literal)
cn0: checking (7 integer-address deref)
maybe-add: (7 integer-address deref)
cn0: (reply (1 channel-address deref)) nil nil
maybe-add: (1 channel-address deref)
cn1: update names nil nil
schedule: f1
run: -- nil
run: 1 f1 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 2 f1 1: ((1 channel-address) <- new-channel (3 literal))
run: -- ((1000 30))
run: 3 new-channel 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1031 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1031 30))
run: 4 new-channel 1: ((1 channel-address) <- new (channel literal))
sizeof: channel
sizeof: integer
sizeof: integer
sizeof: tagged-value-array-address
run: 1062 => (1 channel-address)
setm: (1 channel-address) <= 1062
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1031
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1032 to 1062
run: -- ((1000 30) (1031 30) (1032 1062))
run: 5 new-channel 2: ((2 integer-address) <- get-address (1 channel-address deref) (0 offset))
record-info: (1 channel-address deref) (0 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1031
addr: deref 1032 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (0 offset) => 1062
run: 1062 => (2 integer-address)
setm: (2 integer-address) <= 1062
sz: (2 integer-address)
addr: (2 integer-address)
addr: initial result: 2
addr: incrementing by 1031
setm: size of (2 integer-address) is 1
setm: (2 integer-address): setting 1033 to 1062
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1062))
run: 6 new-channel 3: ((2 integer-address deref) <- copy (0 literal))
run: 0 => (2 integer-address deref)
setm: (2 integer-address deref) <= 0
sz: (2 integer-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
addr: incrementing by 1031
sz: (1062 integer)
addr: (2 integer-address deref)
addr: initial result: 2
addr: incrementing by 1031
addr: deref 1033 => 1062
setm: size of (2 integer-address deref) is 1
setm: (2 integer-address deref): setting 1062 to 0
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1062) (1062 0))
run: 7 new-channel 4: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset))
record-info: (1 channel-address deref) (1 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1031
addr: deref 1032 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (1 offset) => 1063
run: 1063 => (3 integer-address)
setm: (3 integer-address) <= 1063
sz: (3 integer-address)
addr: (3 integer-address)
addr: initial result: 3
addr: incrementing by 1031
setm: size of (3 integer-address) is 1
setm: (3 integer-address): setting 1034 to 1063
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1062 0))
run: 8 new-channel 5: ((3 integer-address deref) <- copy (0 literal))
run: 0 => (3 integer-address deref)
setm: (3 integer-address deref) <= 0
sz: (3 integer-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
addr: incrementing by 1031
sz: (1063 integer)
addr: (3 integer-address deref)
addr: initial result: 3
addr: incrementing by 1031
addr: deref 1034 => 1063
setm: size of (3 integer-address deref) is 1
setm: (3 integer-address deref): setting 1063 to 0
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1062 0) (1063 0))
run: 9 new-channel 6: ((4 integer) <- arg)
arg: nil 0 (3)
run: 3 => (4 integer)
setm: (4 integer) <= 3
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1031
setm: size of (4 integer) is 1
setm: (4 integer): setting 1035 to 3
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 3) (1062 0) (1063 0))
run: 10 new-channel 7: ((4 integer) <- add (4 integer) (1 literal))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1031
add: 3 1
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1031
run: 4 => (4 integer)
setm: (4 integer) <= 4
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1031
setm: size of (4 integer) is 1
setm: (4 integer): setting 1035 to 4
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1062 0) (1063 0))
run: 11 new-channel 8: ((5 tagged-value-array-address-address) <- get-address (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1031
addr: deref 1032 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (2 offset) => 1064
run: 1064 => (5 tagged-value-array-address-address)
setm: (5 tagged-value-array-address-address) <= 1064
sz: (5 tagged-value-array-address-address)
addr: (5 tagged-value-array-address-address)
addr: initial result: 5
addr: incrementing by 1031
setm: size of (5 tagged-value-array-address-address) is 1
setm: (5 tagged-value-array-address-address): setting 1036 to 1064
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0))
run: 12 new-channel 9: ((5 tagged-value-array-address-address deref) <- new (tagged-value-array literal) (4 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1031
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1065 => (5 tagged-value-array-address-address deref)
setm: (5 tagged-value-array-address-address deref) <= 1065
sz: (5 tagged-value-array-address-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1031
sz: (1064 tagged-value-array-address)
addr: (5 tagged-value-array-address-address deref)
addr: initial result: 5
addr: incrementing by 1031
addr: deref 1036 => 1064
setm: size of (5 tagged-value-array-address-address deref) is 1
setm: (5 tagged-value-array-address-address deref): setting 1064 to 1065
run: -- ((1000 30) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4))
run: 13 new-channel 10: (reply (1 channel-address))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1031
reply: ((1 channel-address)) ((1 channel-address))
reply: 1062 => (1 channel-address)
setm: (1 channel-address) <= 1062
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1001 to 1062
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4))
run: 14 f1 2: (fork (f2 fn) (1 channel-address))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4))
run: 15 f1 3: ((1 tagged-value global) <- read (1 channel-address))
m: (1 channel-address)
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1000
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4))
run: 16 read 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1074 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30))
run: 17 read 1: ((1 channel-address) <- arg)
arg: nil 0 (1062)
run: 1062 => (1 channel-address)
setm: (1 channel-address) <= 1062
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1074
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1075 to 1062
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062))
run: 18 read 2: ((2 boolean) <- empty? (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1074
sz: (1062 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1074
addr: deref 1075 => 1062
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062))
run: 19 empty? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1105 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1105 30))
run: 20 empty? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 0 1065 . nil)))
run: #(tagged record (0 0 1065 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (0 0 1065 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1105
setm: size of (1 channel) is 3
setm: (1 channel): setting 1106 to 0
setm: (1 channel): setting 1107 to 0
setm: (1 channel): setting 1108 to 1065
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1105 30) (1106 0) (1107 0) (1108 1065))
run: 21 empty? 2: ((4 integer) <- get (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1105
record-info: initial base 1106 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (0 offset) => 1106 integer
m: (1106 integer global)
sz: (1106 integer global)
addr: (1106 integer global)
addr: initial result: 1106
run: 0 => (4 integer)
setm: (4 integer) <= 0
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1105
setm: size of (4 integer) is 1
setm: (4 integer): setting 1109 to 0
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0))
run: 22 empty? 3: ((5 integer) <- get (1 channel) (1 offset))
record-info: (1 channel) (1 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1105
record-info: initial base 1106 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (1 offset) => 1107 integer
m: (1107 integer global)
sz: (1107 integer global)
addr: (1107 integer global)
addr: initial result: 1107
run: 0 => (5 integer)
setm: (5 integer) <= 0
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1105
setm: size of (5 integer) is 1
setm: (5 integer): setting 1110 to 0
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0))
run: 23 empty? 4: ((6 boolean) <- eq (4 integer) (5 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1105
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1105
run: t => (6 boolean)
setm: (6 boolean) <= t
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1105
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 1111 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t))
run: 24 empty? 5: (reply (6 boolean))
m: (6 boolean)
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1105
reply: ((6 boolean)) ((2 boolean))
reply: t => (2 boolean)
setm: (2 boolean) <= t
sz: (2 boolean)
addr: (2 boolean)
addr: initial result: 2
addr: incrementing by 1074
setm: size of (2 boolean) is 1
setm: (2 boolean): setting 1076 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t))
run: 25 read 3: (jump-unless (2 boolean) (2 offset))
m: (2 boolean)
sz: (2 boolean)
addr: (2 boolean)
addr: initial result: 2
addr: incrementing by 1074
jump: checking that t is not t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t))
run: 26 read 4: ((3 integer-address) <- get-address (1 channel-address deref) (1 offset))
record-info: (1 channel-address deref) (1 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1074
addr: deref 1075 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (1 offset) => 1063
run: 1063 => (3 integer-address)
setm: (3 integer-address) <= 1063
sz: (3 integer-address)
addr: (3 integer-address)
addr: initial result: 3
addr: incrementing by 1074
setm: size of (3 integer-address) is 1
setm: (3 integer-address): setting 1077 to 1063
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t))
run: 27 read 5: (sleep (3 integer-address deref))
addr: (3 integer-address deref)
addr: initial result: 3
addr: incrementing by 1074
addr: deref 1077 => 1063
m: (3 integer-address deref)
sz: (3 integer-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
addr: incrementing by 1074
sz: (1063 integer)
addr: (3 integer-address deref)
addr: initial result: 3
addr: incrementing by 1074
addr: deref 1077 => 1063
schedule: pushing read to sleep queue
schedule: f2
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t))
run: 28 f2 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1136 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30))
run: 29 f2 1: ((1 integer-address) <- new (integer literal))
sizeof: integer
run: 1167 => (1 integer-address)
setm: (1 integer-address) <= 1167
sz: (1 integer-address)
addr: (1 integer-address)
addr: initial result: 1
addr: incrementing by 1136
setm: size of (1 integer-address) is 1
setm: (1 integer-address): setting 1137 to 1167
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167))
run: 30 f2 2: ((1 integer-address deref) <- copy (24 literal))
run: 24 => (1 integer-address deref)
setm: (1 integer-address deref) <= 24
sz: (1 integer-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1136
sz: (1167 integer)
addr: (1 integer-address deref)
addr: initial result: 1
addr: incrementing by 1136
addr: deref 1137 => 1167
setm: size of (1 integer-address deref) is 1
setm: (1 integer-address deref): setting 1167 to 24
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1167 24))
run: 31 f2 3: ((2 channel-address) <- arg)
arg: nil 0 (1062)
run: 1062 => (2 channel-address)
setm: (2 channel-address) <= 1062
sz: (2 channel-address)
addr: (2 channel-address)
addr: initial result: 2
addr: incrementing by 1136
setm: size of (2 channel-address) is 1
setm: (2 channel-address): setting 1138 to 1062
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24))
run: 32 f2 4: ((3 tagged-value-address) <- new-tagged-value (integer-address literal) (1 integer-address))
m: (1 integer-address)
sz: (1 integer-address)
addr: (1 integer-address)
addr: initial result: 1
addr: incrementing by 1136
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24))
run: 33 new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1168 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24) (1168 30))
run: 34 new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer-address 1167)
run: integer-address => (1 type)
setm: (1 type) <= integer-address
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1168
setm: size of (1 type) is 1
setm: (1 type): setting 1169 to integer-address
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24) (1168 30) (1169 integer-address))
run: 35 new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1168
sizeof: integer-address
run: 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1168
setm: size of (2 integer) is 1
setm: (2 integer): setting 1170 to 1
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24) (1168 30) (1169 integer-address) (1170 1))
run: 36 new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1168
run: t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1168
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1171 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t))
run: 37 new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1168
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t))
run: 38 new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1199 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1199
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1168
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1172 to 1199
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199))
run: 39 new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1168
addr: deref 1172 => 1199
record-info: initial base 1199 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1199
run: 1199 => (5 location)
setm: (5 location) <= 1199
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1168
setm: size of (5 location) is 1
setm: (5 location): setting 1173 to 1199
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199))
run: 40 new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1168
run: integer-address => (5 location deref)
setm: (5 location deref) <= integer-address
sz: (5 location deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1168
sz: (1199 location)
addr: (5 location deref)
addr: initial result: 5
addr: incrementing by 1168
addr: deref 1173 => 1199
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1199 to integer-address
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1199 integer-address))
run: 41 new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1168
addr: deref 1172 => 1199
record-info: initial base 1199 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (1 offset) => 1200
run: 1200 => (6 location)
setm: (6 location) <= 1200
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1168
setm: size of (6 location) is 1
setm: (6 location): setting 1174 to 1200
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address))
run: 42 new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer-address 1167)
run: 1167 => (6 location deref)
setm: (6 location deref) <= 1167
sz: (6 location deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1168
sz: (1200 location)
addr: (6 location deref)
addr: initial result: 6
addr: incrementing by 1168
addr: deref 1174 => 1200
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1200 to 1167
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167))
run: 43 new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1168
reply: ((4 tagged-value-address)) ((3 tagged-value-address))
reply: 1199 => (3 tagged-value-address)
setm: (3 tagged-value-address) <= 1199
sz: (3 tagged-value-address)
addr: (3 tagged-value-address)
addr: initial result: 3
addr: incrementing by 1136
setm: size of (3 tagged-value-address) is 1
setm: (3 tagged-value-address): setting 1139 to 1199
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167))
run: 44 f2 5: ((2 channel-address deref) <- write (2 channel-address) (3 tagged-value-address deref))
m: (2 channel-address)
sz: (2 channel-address)
addr: (2 channel-address)
addr: initial result: 2
addr: incrementing by 1136
m: (3 tagged-value-address deref)
sz: (3 tagged-value-address deref)
m: (3 location)
sz: (3 location)
addr: (3 location)
addr: initial result: 3
addr: incrementing by 1136
sz: (1199 tagged-value)
addr: (3 tagged-value-address deref)
addr: initial result: 3
addr: incrementing by 1136
addr: deref 1139 => 1199
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167))
run: 45 write 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1201 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30))
run: 46 write 1: ((1 channel-address) <- arg)
arg: nil 0 (1062 #(tagged record (integer-address 1167 . nil)))
run: 1062 => (1 channel-address)
setm: (1 channel-address) <= 1062
sz: (1 channel-address)
addr: (1 channel-address)
addr: initial result: 1
addr: incrementing by 1201
setm: size of (1 channel-address) is 1
setm: (1 channel-address): setting 1202 to 1062
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062))
run: 47 write 2: ((2 tagged-value) <- arg)
arg: nil 1 (1062 #(tagged record (integer-address 1167 . nil)))
run: #(tagged record (integer-address 1167 . nil)) => (2 tagged-value)
setm: (2 tagged-value) <= #(tagged record (integer-address 1167 . nil))
sz: (2 tagged-value)
addr: (2 tagged-value)
addr: initial result: 2
addr: incrementing by 1201
setm: size of (2 tagged-value) is 2
setm: (2 tagged-value): setting 1203 to integer-address
setm: (2 tagged-value): setting 1204 to 1167
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167))
run: 48 write 3: ((4 boolean) <- full? (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1201
sz: (1062 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1201
addr: deref 1202 => 1062
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167))
run: 49 full? 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1232 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30))
run: 50 full? 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 0 1065 . nil)))
run: #(tagged record (0 0 1065 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (0 0 1065 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1232
setm: size of (1 channel) is 3
setm: (1 channel): setting 1233 to 0
setm: (1 channel): setting 1234 to 0
setm: (1 channel): setting 1235 to 1065
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065))
run: 51 full? 2: ((4 integer) <- get (1 channel) (1 offset))
record-info: (1 channel) (1 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1232
record-info: initial base 1233 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (1 offset) => 1234 integer
m: (1234 integer global)
sz: (1234 integer global)
addr: (1234 integer global)
addr: initial result: 1234
run: 0 => (4 integer)
setm: (4 integer) <= 0
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1232
setm: size of (4 integer) is 1
setm: (4 integer): setting 1236 to 0
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 0))
run: 52 full? 3: ((4 integer) <- add (4 integer) (1 literal))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1232
add: 0 1
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1232
run: 1 => (4 integer)
setm: (4 integer) <= 1
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1232
setm: size of (4 integer) is 1
setm: (4 integer): setting 1236 to 1
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1))
run: 53 full? 4: ((5 integer) <- capacity (1 channel))
m: (1 channel)
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1232
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1))
run: 54 capacity 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1263 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1263 30))
run: 55 capacity 1: ((1 channel) <- arg)
arg: nil 0 (#(tagged record (0 0 1065 . nil)))
run: #(tagged record (0 0 1065 . nil)) => (1 channel)
setm: (1 channel) <= #(tagged record (0 0 1065 . nil))
sz: (1 channel)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1263
setm: size of (1 channel) is 3
setm: (1 channel): setting 1264 to 0
setm: (1 channel): setting 1265 to 0
setm: (1 channel): setting 1266 to 1065
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1263 30) (1264 0) (1265 0) (1266 1065))
run: 56 capacity 2: ((4 tagged-value-array-address) <- get (1 channel) (2 offset))
record-info: (1 channel) (2 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1263
record-info: initial base 1264 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (2 offset) => 1266 tagged-value-array-address
m: (1266 tagged-value-array-address global)
sz: (1266 tagged-value-array-address global)
addr: (1266 tagged-value-array-address global)
addr: initial result: 1266
run: 1065 => (4 tagged-value-array-address)
setm: (4 tagged-value-array-address) <= 1065
sz: (4 tagged-value-array-address)
addr: (4 tagged-value-array-address)
addr: initial result: 4
addr: incrementing by 1263
setm: size of (4 tagged-value-array-address) is 1
setm: (4 tagged-value-array-address): setting 1267 to 1065
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065))
run: 57 capacity 3: ((5 integer) <- len (4 tagged-value-array-address deref))
array-len: (4 tagged-value-array-address deref)
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1263
sz: (1065 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1263
addr: deref 1267 => 1065
run: 4 => (5 integer)
setm: (5 integer) <= 4
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1263
setm: size of (5 integer) is 1
setm: (5 integer): setting 1268 to 4
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 58 capacity 4: (reply (5 integer))
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1263
reply: ((5 integer)) ((5 integer))
reply: 4 => (5 integer)
setm: (5 integer) <= 4
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1232
setm: size of (5 integer) is 1
setm: (5 integer): setting 1237 to 4
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 59 full? 5: ((6 boolean) <- lt (4 integer) (5 integer))
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1232
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1232
run: t => (6 boolean)
setm: (6 boolean) <= t
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1232
setm: size of (6 boolean) is 1
setm: (6 boolean): setting 1238 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 60 full? 6: (jump-if (6 boolean) (1 offset))
m: (6 boolean)
sz: (6 boolean)
addr: (6 boolean)
addr: initial result: 6
addr: incrementing by 1232
jump: checking that t is t
jump: jumping to 8
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 61 full? 8: ((7 integer) <- get (1 channel) (0 offset))
record-info: (1 channel) (0 offset)
addr: (1 channel)
addr: initial result: 1
addr: incrementing by 1232
record-info: initial base 1233 type ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel) (0 offset) => 1233 integer
m: (1233 integer global)
sz: (1233 integer global)
addr: (1233 integer global)
addr: initial result: 1233
run: 0 => (7 integer)
setm: (7 integer) <= 0
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1232
setm: size of (7 integer) is 1
setm: (7 integer): setting 1239 to 0
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 62 full? 9: ((8 boolean) <- eq (7 integer) (4 integer))
m: (7 integer)
sz: (7 integer)
addr: (7 integer)
addr: initial result: 7
addr: incrementing by 1232
m: (4 integer)
sz: (4 integer)
addr: (4 integer)
addr: initial result: 4
addr: incrementing by 1232
run: nil => (8 boolean)
setm: (8 boolean) <= nil
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1232
setm: size of (8 boolean) is 1
setm: (8 boolean): setting 1240 to nil
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 63 full? 10: (reply (8 boolean))
m: (8 boolean)
sz: (8 boolean)
addr: (8 boolean)
addr: initial result: 8
addr: incrementing by 1232
reply: ((8 boolean)) ((4 boolean))
reply: nil => (4 boolean)
setm: (4 boolean) <= nil
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1201
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1205 to nil
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 64 write 4: (jump-unless (4 boolean) (2 offset))
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1201
jump: checking that nil is not t
jump: jumping to 7
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 65 write 7: ((6 tagged-value-array-address) <- get (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1201
addr: deref 1202 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel-address deref) (2 offset) => 1064 tagged-value-array-address
m: (1064 tagged-value-array-address global)
sz: (1064 tagged-value-array-address global)
addr: (1064 tagged-value-array-address global)
addr: initial result: 1064
run: 1065 => (6 tagged-value-array-address)
setm: (6 tagged-value-array-address) <= 1065
sz: (6 tagged-value-array-address)
addr: (6 tagged-value-array-address)
addr: initial result: 6
addr: incrementing by 1201
setm: size of (6 tagged-value-array-address) is 1
setm: (6 tagged-value-array-address): setting 1207 to 1065
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 66 write 8: ((7 integer-address) <- get-address (1 channel-address deref) (1 offset))
record-info: (1 channel-address deref) (1 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1201
addr: deref 1202 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (1 offset) => 1063
run: 1063 => (7 integer-address)
setm: (7 integer-address) <= 1063
sz: (7 integer-address)
addr: (7 integer-address)
addr: initial result: 7
addr: incrementing by 1201
setm: size of (7 integer-address) is 1
setm: (7 integer-address): setting 1208 to 1063
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 67 write 9: ((8 tagged-value-address) <- index-address (6 tagged-value-array-address deref) (7 integer-address deref))
array-info: (6 tagged-value-array-address deref) (7 integer-address deref)
addr: (6 tagged-value-array-address deref)
addr: initial result: 6
addr: incrementing by 1201
addr: deref 1207 => 1065
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1201
sz: (1063 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1201
addr: deref 1208 => 1063
array-info: initial base 1065 type ((address t) (elem tagged-value-array) (size 1))
array-info: (6 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sz: (6 integer-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1201
sz: (1065 integer)
addr: (6 integer-address deref)
addr: initial result: 6
addr: incrementing by 1201
addr: deref 1207 => 1065
array-info: array-len of (6 tagged-value-array-address deref) is 4
index-address: (6 tagged-value-array-address deref) (7 integer-address deref) => 1066
run: 1066 => (8 tagged-value-address)
setm: (8 tagged-value-address) <= 1066
sz: (8 tagged-value-address)
addr: (8 tagged-value-address)
addr: initial result: 8
addr: incrementing by 1201
setm: size of (8 tagged-value-address) is 1
setm: (8 tagged-value-address): setting 1209 to 1066
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 68 write 10: ((8 tagged-value-address deref) <- copy (2 tagged-value))
m: (2 tagged-value)
sz: (2 tagged-value)
addr: (2 tagged-value)
addr: initial result: 2
addr: incrementing by 1201
run: #(tagged record (integer-address 1167 . nil)) => (8 tagged-value-address deref)
setm: (8 tagged-value-address deref) <= #(tagged record (integer-address 1167 . nil))
sz: (8 tagged-value-address deref)
m: (8 location)
sz: (8 location)
addr: (8 location)
addr: initial result: 8
addr: incrementing by 1201
sz: (1066 tagged-value)
addr: (8 tagged-value-address deref)
addr: initial result: 8
addr: incrementing by 1201
addr: deref 1209 => 1066
setm: size of (8 tagged-value-address deref) is 2
setm: (8 tagged-value-address deref): setting 1066 to integer-address
setm: (8 tagged-value-address deref): setting 1067 to 1167
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 0) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 69 write 11: ((7 integer-address deref) <- add (7 integer-address deref) (1 literal))
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1201
sz: (1063 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1201
addr: deref 1208 => 1063
add: 0 1
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1201
sz: (1063 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1201
addr: deref 1208 => 1063
run: 1 => (7 integer-address deref)
setm: (7 integer-address deref) <= 1
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1201
sz: (1063 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1201
addr: deref 1208 => 1063
setm: size of (7 integer-address deref) is 1
setm: (7 integer-address deref): setting 1063 to 1
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 70 write 12: ((9 integer) <- len (6 tagged-value-array-address deref))
array-len: (6 tagged-value-array-address deref)
m: (6 integer-address deref)
sz: (6 integer-address deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1201
sz: (1065 integer)
addr: (6 integer-address deref)
addr: initial result: 6
addr: incrementing by 1201
addr: deref 1207 => 1065
run: 4 => (9 integer)
setm: (9 integer) <= 4
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1201
setm: size of (9 integer) is 1
setm: (9 integer): setting 1210 to 4
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 71 write 13: ((10 boolean) <- lt (7 integer-address deref) (9 integer))
m: (7 integer-address deref)
sz: (7 integer-address deref)
m: (7 location)
sz: (7 location)
addr: (7 location)
addr: initial result: 7
addr: incrementing by 1201
sz: (1063 integer)
addr: (7 integer-address deref)
addr: initial result: 7
addr: incrementing by 1201
addr: deref 1208 => 1063
m: (9 integer)
sz: (9 integer)
addr: (9 integer)
addr: initial result: 9
addr: incrementing by 1201
run: t => (10 boolean)
setm: (10 boolean) <= t
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1201
setm: size of (10 boolean) is 1
setm: (10 boolean): setting 1211 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1211 t) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 72 write 14: (jump-if (10 boolean) (1 offset))
m: (10 boolean)
sz: (10 boolean)
addr: (10 boolean)
addr: initial result: 10
addr: incrementing by 1201
jump: checking that t is t
jump: jumping to 16
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1211 t) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 73 write 16: (reply (1 channel-address deref))
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1201
sz: (1062 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1201
addr: deref 1202 => 1062
reply: ((1 channel-address deref)) ((2 channel-address deref))
reply: #(tagged record (0 1 1065 . nil)) => (2 channel-address deref)
setm: (2 channel-address deref) <= #(tagged record (0 1 1065 . nil))
sz: (2 channel-address deref)
m: (2 location)
sz: (2 location)
addr: (2 location)
addr: initial result: 2
addr: incrementing by 1136
sz: (1062 channel)
addr: (2 channel-address deref)
addr: initial result: 2
addr: incrementing by 1136
addr: deref 1138 => 1062
setm: size of (2 channel-address deref) is 3
setm: (2 channel-address deref): setting 1062 to 0
setm: (2 channel-address deref): setting 1063 to 1
setm: (2 channel-address deref): setting 1064 to 1065
schedule: done with routine
schedule: waking up read
schedule: read
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1211 t) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 74 read 6: ((4 integer-address) <- get-address (1 channel-address deref) (0 offset))
record-info: (1 channel-address deref) (0 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1074
addr: deref 1075 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get-address: (1 channel-address deref) (0 offset) => 1062
run: 1062 => (4 integer-address)
setm: (4 integer-address) <= 1062
sz: (4 integer-address)
addr: (4 integer-address)
addr: initial result: 4
addr: incrementing by 1074
setm: size of (4 integer-address) is 1
setm: (4 integer-address): setting 1078 to 1062
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1078 1062) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1211 t) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 75 read 7: ((5 tagged-value-array-address) <- get (1 channel-address deref) (2 offset))
record-info: (1 channel-address deref) (2 offset)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1074
addr: deref 1075 => 1062
record-info: initial base 1062 type ((address t) (elem channel) (size 1))
record-info: (1 channel-address deref) requests deref => ((elems (integer integer tagged-value-array-address)) (fields (first-full first-free circular-buffer)) (record t) (size 3))
get: (1 channel-address deref) (2 offset) => 1064 tagged-value-array-address
m: (1064 tagged-value-array-address global)
sz: (1064 tagged-value-array-address global)
addr: (1064 tagged-value-array-address global)
addr: initial result: 1064
run: 1065 => (5 tagged-value-array-address)
setm: (5 tagged-value-array-address) <= 1065
sz: (5 tagged-value-array-address)
addr: (5 tagged-value-array-address)
addr: initial result: 5
addr: incrementing by 1074
setm: size of (5 tagged-value-array-address) is 1
setm: (5 tagged-value-array-address): setting 1079 to 1065
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1078 1062) (1079 1065) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1211 t) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 76 read 8: ((6 tagged-value) <- index (5 tagged-value-array-address deref) (4 integer-address deref))
array-info: (5 tagged-value-array-address deref) (4 integer-address deref)
addr: (5 tagged-value-array-address deref)
addr: initial result: 5
addr: incrementing by 1074
addr: deref 1079 => 1065
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1074
sz: (1062 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1074
addr: deref 1078 => 1062
array-info: initial base 1065 type ((address t) (elem tagged-value-array) (size 1))
array-info: (5 tagged-value-array-address deref) requests deref => ((array t) (elem tagged-value))
array-len: (5 tagged-value-array-address deref)
m: (5 integer-address deref)
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1074
sz: (1065 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1074
addr: deref 1079 => 1065
array-info: array-len of (5 tagged-value-array-address deref) is 4
index: (5 tagged-value-array-address deref) (4 integer-address deref) => 1066 tagged-value
m: (1066 tagged-value global)
sz: (1066 tagged-value global)
addr: (1066 tagged-value global)
addr: initial result: 1066
run: #(tagged record (integer-address 1167 . nil)) => (6 tagged-value)
setm: (6 tagged-value) <= #(tagged record (integer-address 1167 . nil))
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1074
setm: size of (6 tagged-value) is 2
setm: (6 tagged-value): setting 1080 to integer-address
setm: (6 tagged-value): setting 1081 to 1167
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 0) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1078 1062) (1079 1065) (1080 integer-address) (1081 1167) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1211 t) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 77 read 9: ((4 integer-address deref) <- add (4 integer-address deref) (1 literal))
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1074
sz: (1062 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1074
addr: deref 1078 => 1062
add: 0 1
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1074
sz: (1062 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1074
addr: deref 1078 => 1062
run: 1 => (4 integer-address deref)
setm: (4 integer-address deref) <= 1
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1074
sz: (1062 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1074
addr: deref 1078 => 1062
setm: size of (4 integer-address deref) is 1
setm: (4 integer-address deref): setting 1062 to 1
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 1) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1078 1062) (1079 1065) (1080 integer-address) (1081 1167) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1211 t) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 78 read 10: ((8 integer) <- len (5 tagged-value-array-address deref))
array-len: (5 tagged-value-array-address deref)
m: (5 integer-address deref)
sz: (5 integer-address deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1074
sz: (1065 integer)
addr: (5 integer-address deref)
addr: initial result: 5
addr: incrementing by 1074
addr: deref 1079 => 1065
run: 4 => (8 integer)
setm: (8 integer) <= 4
sz: (8 integer)
addr: (8 integer)
addr: initial result: 8
addr: incrementing by 1074
setm: size of (8 integer) is 1
setm: (8 integer): setting 1082 to 4
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 1) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1078 1062) (1079 1065) (1080 integer-address) (1081 1167) (1082 4) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1211 t) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 79 read 11: ((9 boolean) <- lt (4 integer-address deref) (8 integer))
m: (4 integer-address deref)
sz: (4 integer-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1074
sz: (1062 integer)
addr: (4 integer-address deref)
addr: initial result: 4
addr: incrementing by 1074
addr: deref 1078 => 1062
m: (8 integer)
sz: (8 integer)
addr: (8 integer)
addr: initial result: 8
addr: incrementing by 1074
run: t => (9 boolean)
setm: (9 boolean) <= t
sz: (9 boolean)
addr: (9 boolean)
addr: initial result: 9
addr: incrementing by 1074
setm: size of (9 boolean) is 1
setm: (9 boolean): setting 1083 to t
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 1) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1078 1062) (1079 1065) (1080 integer-address) (1081 1167) (1082 4) (1083 t) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1211 t) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 80 read 12: (jump-if (9 boolean) (1 offset))
m: (9 boolean)
sz: (9 boolean)
addr: (9 boolean)
addr: initial result: 9
addr: incrementing by 1074
jump: checking that t is t
jump: jumping to 14
run: -- ((1000 30) (1001 1062) (1031 30) (1032 1062) (1033 1062) (1034 1063) (1035 4) (1036 1064) (1062 1) (1063 1) (1064 1065) (1065 4) (1066 integer-address) (1067 1167) (1074 30) (1075 1062) (1076 t) (1077 1063) (1078 1062) (1079 1065) (1080 integer-address) (1081 1167) (1082 4) (1083 t) (1105 30) (1106 0) (1107 0) (1108 1065) (1109 0) (1110 0) (1111 t) (1136 30) (1137 1167) (1138 1062) (1139 1199) (1167 24) (1168 30) (1169 integer-address) (1170 1) (1171 t) (1172 1199) (1173 1199) (1174 1200) (1199 integer-address) (1200 1167) (1201 30) (1202 1062) (1203 integer-address) (1204 1167) (1207 1065) (1208 1063) (1209 1066) (1210 4) (1211 t) (1232 30) (1233 0) (1234 0) (1235 1065) (1236 1) (1237 4) (1238 t) (1239 0) (1263 30) (1264 0) (1265 0) (1266 1065) (1267 1065) (1268 4))
run: 81 read 14: (reply (6 tagged-value) (1 channel-address deref))
m: (6 tagged-value)
sz: (6 tagged-value)
addr: (6 tagged-value)
addr: initial result: 6
addr: incrementing by 1074
m: (1 channel-address deref)
sz: (1 channel-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1074
sz: (1062 channel)
addr: (1 channel-address deref)
addr: initial result: 1
addr: incrementing by 1074
addr: deref 1075 => 1062
reply: ((6 tagged-value) (1 channel-address deref)) ((1 tagged-value global))
reply: #(tagged record (integer-address 1167 . nil)) => (1 tagged-value global)
setm: (1 tagged-value global) <= #(tagged record (integer-address 1167 . nil))
sz: (1 tagged-value global)
addr: (1 tagged-value global)
addr: initial result: 1
setm: size of (1 tagged-value global) is 2
setm: (1 tagged-value global): setting 1 to integer-address
setm: (1 tagged-value global): setting 2 to 1167
schedule: done with routine
