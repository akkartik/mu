9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"point": "type"}
9993 parse:   product: {"p": <"address" : <"point" : <>>>}
9992 load: after rewriting: p:address:point <- new point:type
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"p": <>}
9992 load: after rewriting: foo p
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: p:address:point
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: get-address
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"p": <>, "lookup": <>}
9993 parse:   ingredient: {"x": "offset"}
9993 parse:   product: {"x": <"address" : <"number" : <>>>}
9992 load: after rewriting: x:address:number <- get-address *p, x:offset
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"x": <>, "lookup": <>}
9992 load: after rewriting: *x <- copy 34
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- deduce types for recipe main
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: p => <address : <point : <>>>
9992 transform: p <= <address : <point : <>>>
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: p => <address : <point : <>>>
9992 transform: p <= <address : <point : <>>>
9992 transform: x => <address : <number : <>>>
9992 transform: x <= <address : <number : <>>>
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: checking variant 7: -1
9992 transform: checking variant 8: -1
9992 transform: checking variant 9: -1
9992 transform: checking variant 10: -1
9992 transform: checking variant 11: -1
9992 transform: checking variant 12: -1
9992 transform: checking variant 13: -1
9992 transform: checking variant 14: -1
9992 transform: checking variant 15: -1
9992 transform: checking variant 16: -1
9992 transform: checking variant 17: -1
9992 transform: checking variant 18: -1
9992 transform: checking variant 19: -1
9992 transform: checking variant 20: -1
9992 transform: checking variant 21: -1
9992 transform: checking variant 22: -1
9992 transform: checking variant 23: -1
9992 transform: checking variant 24: -1
9992 transform: checking variant 25: -1
9992 transform: checking variant 26: -1
9992 transform: checking variant 27: -1
9992 transform: checking variant 28: -1
9992 transform: checking variant 29: -1
9992 transform: checking variant 30: -1
9992 transform: checking variant 31: -1
9992 transform: checking variant 32: 100
9991 transform: --- resolve ambiguous calls for recipe foo
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9993 name: assign p 1
9991 transform: --- transform names for recipe foo
9993 name: assign p 1
9993 name: element x of type point is at offset 0
9993 name: assign x 2
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "point" is 2
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
   1 warn: foo: cannot modify ingredient p after instruction 'x:address:number <- get-address *p, x:offset' because it's not also a product of foo

9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1000
 102 run: p:address:point <- new point:type
9999 mem: new alloc: 1003
9999 mem: storing 1003 in location 1002
 102 run: foo p
9999 mem: location 1002 is 1003
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1005
 103 run: p:address:point <- next-ingredient 
9999 mem: storing 1003 in location 1007
 103 run: x:address:number <- get-address *p, x:offset
9999 mem: location 1007 is 1003
9999 mem: location 1003 is 0
9999 mem: location 1004 is 0
9999 mem: location 1007 is 1003
9998 run: address to copy is 1003
9999 mem: storing 1003 in location 1008
 103 run: *x <- copy 34
9999 mem: location 1008 is 1003
9999 mem: storing 34 in location 1003
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
