9991 parse: --- defining main
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"point": "type"}
9993 parse:   product: {"p": <"address" : <"shared" : <"point" : <>>>>}
9992 load: after rewriting: p:address:shared:point <- new point:type
9993 parse: instruction: foo
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"p": <>}
9992 load: after rewriting: foo p
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: p:address:shared:point
9991 parse: --- defining foo
9993 parse: instruction: local-scope
9993 parse:   number of ingredients: 0
9992 load: after rewriting: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 parse: instruction: load-ingredients
9993 parse:   number of ingredients: 0
9992 load: after rewriting:  
9993 parse: instruction: get-address
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"p": <>, "lookup": <>}
9993 parse:   ingredient: {"x": "offset"}
9993 parse:   product: {"x": <"address" : <"number" : <>>>}
9992 load: after rewriting: x:address:number <- get-address *p, x:offset
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"x": <>, "lookup": <>}
9992 load: after rewriting: *x <- copy 34
9999 parse: recipe foo has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe main
9991 transform: --- fill in reply ingredients from header for recipe foo
9991 transform: --- deduce types for recipe main
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: p => <address : <shared : <point : <>>>>
9992 transform: p <= <address : <shared : <point : <>>>>
9991 transform: --- deduce types for recipe foo
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: p => <address : <shared : <point : <>>>>
9992 transform: p <= <address : <shared : <point : <>>>>
9992 transform: x => <address : <number : <>>>
9992 transform: x <= <address : <number : <>>>
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe foo
9991 transform: --- transform names for recipe main
9993 name: assign p 1
9991 transform: --- transform names for recipe foo
9993 name: assign p 1
9993 name: element x of type point is at offset 0
9993 name: assign x 2
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction foo
9993 transform: strict match: ingredient 0
9992 transform: score for base: 1000
9992 transform: score for variant 0: -1
9992 transform: score for variant 1: -1
9992 transform: score for variant 2: -1
9992 transform: score for variant 3: -1
9992 transform: score for variant 4: -1
9992 transform: score for variant 5: -1
9992 transform: score for variant 6: -1
9992 transform: score for variant 7: -1
9992 transform: score for variant 8: -1
9992 transform: score for variant 9: -1
9992 transform: score for variant 10: -1
9992 transform: score for variant 11: -1
9992 transform: score for variant 12: -1
9992 transform: score for variant 13: -1
9992 transform: score for variant 14: -1
9992 transform: score for variant 15: -1
9992 transform: score for variant 16: -1
9992 transform: score for variant 17: -1
9992 transform: score for variant 18: -1
9992 transform: score for variant 19: -1
9992 transform: score for variant 20: -1
9992 transform: score for variant 21: -1
9992 transform: score for variant 22: -1
9992 transform: score for variant 23: -1
9992 transform: score for variant 24: -1
9992 transform: score for variant 25: -1
9992 transform: score for variant 26: -1
9992 transform: score for variant 27: -1
9992 transform: score for variant 28: -1
9992 transform: score for variant 29: -1
9992 transform: score for variant 30: -1
9992 transform: score for variant 31: -1
9992 transform: score for variant 32: -1
9992 transform: score for variant 33: -1
9992 transform: score for variant 34: -1
9992 transform: score for variant 35: -1
9992 transform: score for variant 36: -1
9992 transform: score for variant 37: -1
9992 transform: score for variant 38: -1
9992 transform: score for variant 39: -1
9992 transform: score for variant 40: -1
9992 transform: score for variant 41: -1
9992 transform: score for variant 42: -1
9992 transform: score for variant 43: -1
9992 transform: score for variant 44: -1
9992 transform: score for variant 45: -1
9992 transform: score for variant 46: -1
9992 transform: score for variant 47: -1
9992 transform: score for variant 48: -1
9992 transform: score for variant 49: -1
9992 transform: score for variant 50: -1
9992 transform: score for variant 51: -1
9992 transform: score for variant 52: -1
9992 transform: score for variant 53: -1
9993 transform: strict match: ingredient 0
9992 transform: score for variant 54: 1000
9991 transform: --- resolve ambiguous calls for recipe foo
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe foo
9991 transform: --- transform braces for recipe main
9992 transform: local-scope ...
9992 transform: new ...
9992 transform: foo ...
9992 transform:  ...
9991 transform: --- transform braces for recipe foo
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform:  ...
   1 warn: foo: cannot modify ingredient p after instruction 'x:address:number <- get-address *p, x:offset' because it's not also a product of foo

9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe foo
9991 transform: --- type-check 'call' instructions inside recipe main
9991 transform: --- type-check 'call' instructions inside recipe foo
9991 transform: --- type-check calls inside recipe main
9991 transform: --- type-check calls inside recipe foo
9991 transform: --- convert 'new' to 'allocate' for recipe main
9992 new: size of "location" is 1
9992 new: size of "point" is 2
9991 transform: --- convert 'new' to 'allocate' for recipe foo
9992 new: size of "location" is 1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1000
9999 mem: storing 2 in location 1001
 102 run: p:address:shared:point <- new point:type
9999 mem: allocating size 3
9999 mem: new alloc: 1004
9999 mem: storing 1004 in location 1003
9999 mem: incrementing refcount of 1004: 0 -> 1
 102 run: foo p
9999 mem: location 1003 is 1004
9999 trace: incrementing callstack depth to 2
 103 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1007
9999 mem: storing 3 in location 1008
 103 run: p:address:shared:point <- next-ingredient-without-typechecking 
9999 mem: storing 1004 in location 1010
9999 mem: incrementing refcount of 1004: 1 -> 2
 103 run: x:address:number <- get-address *p, x:offset
9999 mem: location 1010 is 1004
9999 mem: skipping refcount at 1004
9999 mem: location 1005 is 0
9999 mem: location 1006 is 0
9999 mem: location 1010 is 1004
9999 mem: skipping refcount at 1004
9998 run: address to copy is 1005
9999 mem: storing 1005 in location 1011
 103 run: *x <- copy 34
9999 mem: location 1011 is 1005
9999 mem: storing 34 in location 1005
 103 run: reply 
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 2
 102 run: reply 
9999 abandon: saving in free-list of size 4
9999 trace: reply: decrementing callstack depth from 1
