 100 run: assume-console [
    press 65522  # delete
  ]
parse: instruction: press
parse:   ingredient: {name: "65522", properties: ["65522": "literal"]}
 100 run: run [
    editor-event-loop screen:address, console:address, 2:address:editor-data
  ]
parse: instruction: editor-event-loop
parse:   ingredient: {name: "screen", properties: ["screen": "address"]}
parse:   ingredient: {name: "console", properties: ["console": "address"]}
parse:   ingredient: {name: "2", properties: ["2": "address":"editor-data"]}
after-brace: recipe run1002
after-brace: editor-event-loop ...
 100 run: editor-event-loop screen:address, console:address, 2:address:editor-data
9999 mem: location 900 is 1009
9999 mem: location 901 is 1356
9999 mem: location 2 is 1000
 101 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 101 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1243
 101 run: console:address <- next-ingredient 
9999 mem: storing 1356 in location 1244
 101 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1245
schedule: editor-event-loop/run1002/scenario-editor-handles-delete-key
 101 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1244 is 1356
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 102 run: x:address:console <- next-ingredient 
9999 mem: storing 1356 in location 1278
 102 run: break-unless x, 
9999 mem: location 1278 is 1356
9999 run: jump-unless fell through
 102 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1278 is 1356
9999 mem: location 1356 is 0
9999 mem: location 1357 is 1351
9999 mem: location 1278 is 1356
9999 run: address to copy is 1356
9999 mem: storing 1356 in location 1279
 102 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1278 is 1356
9999 mem: location 1356 is 0
9999 mem: location 1357 is 1351
9999 mem: location 1278 is 1356
9999 run: address to copy is 1357
9999 run: its type is address
9999 mem: location 1357 is 1351
9999 mem: storing 1351 in location 1280
 102 run: max:number <- length *buf
9999 mem: location 1280 is 1351
9999 mem: storing 1 in location 1281
 102 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1279 is 1356
9999 mem: location 1356 is 0
9999 mem: location 1281 is 1
9999 mem: storing 0 in location 1282
 102 run: break-unless done?, 
9999 mem: location 1282 is 0
9999 run: jumping to instruction 12
 102 run: result:event <- index *buf, *idx
9999 mem: location 1280 is 1351
9999 mem: location 1279 is 1356
9999 mem: location 1356 is 0
9999 run: address to copy is 1352
9999 run: its type is event
9999 mem: location 1352 is 1
9999 mem: location 1353 is 65522
9999 mem: location 1354 is 0
9999 mem: location 1355 is 0
9999 mem: storing 1 in location 1284
9999 mem: storing 65522 in location 1285
9999 mem: storing 0 in location 1286
9999 mem: storing 0 in location 1287
 102 run: *idx <- add *idx, 1
9999 mem: location 1279 is 1356
9999 mem: location 1356 is 0
9999 mem: location 1279 is 1356
9999 mem: storing 1 in location 1356
 102 run: reply result, x/same-as-ingredient:0, 1/found, 0/quit
9999 mem: location 1284 is 1
9999 mem: location 1285 is 65522
9999 mem: location 1286 is 0
9999 mem: location 1287 is 0
9999 mem: location 1278 is 1356
9999 run: result 0 is [1, 65522, 0, 0]
9999 run: result 1 is 1356
9999 run: result 2 is 1
9999 run: result 3 is 0
9999 mem: storing 1 in location 1246
9999 mem: storing 65522 in location 1247
9999 mem: storing 0 in location 1248
9999 mem: storing 0 in location 1249
9999 mem: storing 1356 in location 1244
9999 mem: storing 1 in location 1250
9999 mem: storing 0 in location 1251
 101 run: loop-unless found?, 
9999 mem: location 1250 is 1
9999 run: jump-unless fell through
 101 run: break-if quit?, 
9999 mem: location 1251 is 0
9999 run: jump-if fell through
 101 run: trace 10, [app], [next-event]
  10 app: next-event
 101 run: t:address:touch-event <- maybe-convert e, touch:variant
9999 mem: location 1246 is 1
9999 mem: location 1247 is 65522
9999 mem: location 1248 is 0
9999 mem: location 1249 is 0
9999 mem: storing 0 in location 1252
 101 run: break-unless t, 
9999 mem: location 1252 is 0
9999 run: jumping to instruction 15
 101 run: break-if t, 
9999 mem: location 1252 is 0
9999 run: jump-if fell through
 101 run: screen, editor, go-render?:boolean <- handle-keyboard-event screen, editor, e
9999 mem: location 1243 is 1009
9999 mem: location 1245 is 1000
9999 mem: location 1246 is 1
9999 mem: location 1247 is 65522
9999 mem: location 1248 is 0
9999 mem: location 1249 is 0
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 61
 102 run: screen:address <- next-ingredient 
9999 mem: storing 1009 in location 1291
 102 run: editor:address:editor-data <- next-ingredient 
9999 mem: storing 1000 in location 1292
 102 run: e:event <- next-ingredient 
9999 mem: storing 1 in location 1293
9999 mem: storing 65522 in location 1294
9999 mem: storing 0 in location 1295
9999 mem: storing 0 in location 1296
 102 run: jump-if editor, 1:offset
9999 mem: location 1292 is 1000
9999 run: jumping to instruction 6
 102 run: screen-width:number <- screen-width screen
9999 mem: location 1291 is 1009
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1358
 103 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1360
 103 run: break-unless sc, 
9999 mem: location 1360 is 1009
9999 run: jump-unless fell through
 103 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1360 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1360 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1361
 103 run: reply width
9999 mem: location 1361 is 10
9999 run: result 0 is 10
9999 mem: storing 10 in location 1297
 102 run: screen-height:number <- screen-height screen
9999 mem: location 1291 is 1009
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 103 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1360
 103 run: break-unless sc, 
9999 mem: location 1360 is 1009
9999 run: jump-unless fell through
 103 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1360 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1360 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1361
 103 run: reply height
9999 mem: location 1361 is 5
9999 run: result 0 is 5
9999 mem: storing 5 in location 1298
 102 run: left:number <- get *editor, left:offset
9999 mem: location 1292 is 1000
9999 mem: location 1000 is 1150
9999 mem: location 1001 is 1150
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1150
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1292 is 1000
9999 run: address to copy is 1004
9999 run: its type is number
9999 mem: location 1004 is 0
9999 mem: storing 0 in location 1299
 102 run: right:number <- get *editor, right:offset
9999 mem: location 1292 is 1000
9999 mem: location 1000 is 1150
9999 mem: location 1001 is 1150
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1150
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1292 is 1000
9999 run: address to copy is 1005
9999 run: its type is number
9999 mem: location 1005 is 9
9999 mem: storing 9 in location 1300
 102 run: before-cursor:address:address:duplex-list <- get-address *editor, before-cursor:offset
9999 mem: location 1292 is 1000
9999 mem: location 1000 is 1150
9999 mem: location 1001 is 1150
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1150
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1292 is 1000
9999 run: address to copy is 1003
9999 mem: storing 1003 in location 1301
 102 run: cursor-row:address:number <- get-address *editor, cursor-row:offset
9999 mem: location 1292 is 1000
9999 mem: location 1000 is 1150
9999 mem: location 1001 is 1150
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1150
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1292 is 1000
9999 run: address to copy is 1006
9999 mem: storing 1006 in location 1302
 102 run: cursor-column:address:number <- get-address *editor, cursor-column:offset
9999 mem: location 1292 is 1000
9999 mem: location 1000 is 1150
9999 mem: location 1001 is 1150
9999 mem: location 1002 is 0
9999 mem: location 1003 is 1150
9999 mem: location 1004 is 0
9999 mem: location 1005 is 9
9999 mem: location 1006 is 1
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1292 is 1000
9999 run: address to copy is 1007
9999 mem: storing 1007 in location 1303
 102 run: save-row:number <- copy *cursor-row
9999 mem: location 1302 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1302 is 1006
9999 mem: location 1302 is 1006
9999 mem: storing 1 in location 1304
 102 run: save-column:number <- copy *cursor-column
9999 mem: location 1303 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1303 is 1007
9999 mem: location 1303 is 1007
9999 mem: storing 0 in location 1305
 102 run: c:address:character <- maybe-convert e, text:variant
9999 mem: location 1293 is 1
9999 mem: location 1294 is 65522
9999 mem: location 1295 is 0
9999 mem: location 1296 is 0
9999 mem: storing 0 in location 1306
 102 run: break-unless c, 
9999 mem: location 1306 is 0
9999 run: jumping to instruction 75
 102 run: k:address:number <- maybe-convert e:event, keycode:variant
9999 mem: location 1293 is 1
9999 mem: location 1294 is 65522
9999 mem: location 1295 is 0
9999 mem: location 1296 is 0
9999 mem: storing 1294 in location 1318
 102 run: assert k, [event was of unknown type; neither keyboard nor mouse]
9999 mem: location 1318 is 1294
 102 run: page-up?:boolean <- equal *k, 65519/page-up
9999 mem: location 1318 is 1294
9999 mem: location 1294 is 65522
9999 mem: storing 0 in location 1319
 102 run: break-unless page-up?, 
9999 mem: location 1319 is 0
9999 run: jumping to instruction 84
 102 run: page-down?:boolean <- equal *k, 65518/page-down
9999 mem: location 1318 is 1294
9999 mem: location 1294 is 65522
9999 mem: storing 0 in location 1320
 102 run: break-unless page-down?, 
9999 mem: location 1320 is 0
9999 run: jumping to instruction 90
 102 run: end?:boolean <- equal *k, 65520/end
9999 mem: location 1318 is 1294
9999 mem: location 1294 is 65522
9999 mem: storing 0 in location 1321
 102 run: break-unless end?, 
9999 mem: location 1321 is 0
9999 run: jumping to instruction 96
 102 run: home?:boolean <- equal *k, 65521/home
9999 mem: location 1318 is 1294
9999 mem: location 1294 is 65522
9999 mem: storing 0 in location 1322
 102 run: break-unless home?, 
9999 mem: location 1322 is 0
9999 run: jumping to instruction 102
 102 run: move-to-next-line?:boolean <- equal *k, 65516/down-arrow
9999 mem: location 1318 is 1294
9999 mem: location 1294 is 65522
9999 mem: storing 0 in location 1323
 102 run: break-unless move-to-next-line?, 
9999 mem: location 1323 is 0
9999 run: jumping to instruction 124
 102 run: move-to-previous-line?:boolean <- equal *k, 65517/up-arrow
9999 mem: location 1318 is 1294
9999 mem: location 1294 is 65522
9999 mem: storing 0 in location 1328
 102 run: break-unless move-to-previous-line?, 
9999 mem: location 1328 is 0
9999 run: jumping to instruction 142
 102 run: move-to-previous-character?:boolean <- equal *k, 65515/left-arrow
9999 mem: location 1318 is 1294
9999 mem: location 1294 is 65522
9999 mem: storing 0 in location 1330
 102 run: break-unless move-to-previous-character?, 
9999 mem: location 1330 is 0
9999 run: jumping to instruction 152
 102 run: move-to-next-character?:boolean <- equal *k, 65514/right-arrow
9999 mem: location 1318 is 1294
9999 mem: location 1294 is 65522
9999 mem: storing 0 in location 1332
 102 run: break-unless move-to-next-character?, 
9999 mem: location 1332 is 0
9999 run: jumping to instruction 205
 102 run: delete?:boolean <- equal *k, 65522/delete
9999 mem: location 1318 is 1294
9999 mem: location 1294 is 65522
9999 mem: storing 1 in location 1341
 102 run: break-unless delete?, 
9999 mem: location 1341 is 1
9999 run: jump-unless fell through
 102 run: curr:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1301 is 1003
9999 mem: location 1003 is 1150
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 103 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1150 in location 1360
 103 run: jump-if in, 1:offset
9999 mem: location 1360 is 1150
9999 run: jumping to instruction 4
 103 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1360 is 1150
9999 mem: location 1150 is 167
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 0
9999 mem: location 1360 is 1150
9999 run: address to copy is 1151
9999 run: its type is address
9999 mem: location 1151 is 1169
9999 mem: storing 1169 in location 1361
 103 run: reply result
9999 mem: location 1361 is 1169
9999 run: result 0 is 1169
9999 mem: storing 1169 in location 1342
 102 run: jump-if curr, 1:offset
9999 mem: location 1342 is 1169
9999 run: jumping to instruction 212
 102 run: currc:character <- get *curr, value:offset
9999 mem: location 1342 is 1169
9999 mem: location 1169 is 98
9999 mem: location 1170 is 1172
9999 mem: location 1171 is 1150
9999 mem: location 1342 is 1169
9999 run: address to copy is 1169
9999 run: its type is number
9999 mem: location 1169 is 98
9999 mem: storing 98 in location 1343
 102 run: remove-duplex curr
9999 mem: location 1342 is 1169
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 5
 103 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1169 in location 1237
 103 run: jump-if in, 1:offset
9999 mem: location 1237 is 1169
9999 run: jumping to instruction 4
 103 run: next-node:address:duplex-list <- get *in, next:offset
9999 mem: location 1237 is 1169
9999 mem: location 1169 is 98
9999 mem: location 1170 is 1172
9999 mem: location 1171 is 1150
9999 mem: location 1237 is 1169
9999 run: address to copy is 1170
9999 run: its type is address
9999 mem: location 1170 is 1172
9999 mem: storing 1172 in location 1238
 103 run: prev-node:address:duplex-list <- get *in, prev:offset
9999 mem: location 1237 is 1169
9999 mem: location 1169 is 98
9999 mem: location 1170 is 1172
9999 mem: location 1171 is 1150
9999 mem: location 1237 is 1169
9999 run: address to copy is 1171
9999 run: its type is address
9999 mem: location 1171 is 1150
9999 mem: storing 1150 in location 1239
 103 run: x:address:address:duplex-list <- get-address *in, next:offset
9999 mem: location 1237 is 1169
9999 mem: location 1169 is 98
9999 mem: location 1170 is 1172
9999 mem: location 1171 is 1150
9999 mem: location 1237 is 1169
9999 run: address to copy is 1170
9999 mem: storing 1170 in location 1240
 103 run: *x <- copy 0
9999 mem: location 1240 is 1170
9999 mem: location 1240 is 1170
9999 mem: storing 0 in location 1170
 103 run: x <- get-address *in, prev:offset
9999 mem: location 1237 is 1169
9999 mem: location 1169 is 98
9999 mem: location 1170 is 0
9999 mem: location 1171 is 1150
9999 mem: location 1237 is 1169
9999 run: address to copy is 1171
9999 mem: storing 1171 in location 1240
 103 run: *x <- copy 0
9999 mem: location 1240 is 1171
9999 mem: location 1240 is 1171
9999 mem: storing 0 in location 1171
 103 run: break-unless next-node, 
9999 mem: location 1238 is 1172
9999 run: jump-unless fell through
 103 run: x <- get-address *next-node, prev:offset
9999 mem: location 1238 is 1172
9999 mem: location 1172 is 99
9999 mem: location 1173 is 0
9999 mem: location 1174 is 1169
9999 mem: location 1238 is 1172
9999 run: address to copy is 1174
9999 mem: storing 1174 in location 1240
 103 run: *x <- copy prev-node
9999 mem: location 1239 is 1150
9999 mem: location 1240 is 1174
9999 mem: location 1240 is 1174
9999 mem: storing 1150 in location 1174
 103 run: break-unless prev-node, 
9999 mem: location 1239 is 1150
9999 run: jump-unless fell through
 103 run: x <- get-address *prev-node, next:offset
9999 mem: location 1239 is 1150
9999 mem: location 1150 is 167
9999 mem: location 1151 is 1169
9999 mem: location 1152 is 0
9999 mem: location 1239 is 1150
9999 run: address to copy is 1151
9999 mem: storing 1151 in location 1240
 103 run: *x <- copy next-node
9999 mem: location 1238 is 1172
9999 mem: location 1240 is 1151
9999 mem: location 1240 is 1151
9999 mem: storing 1172 in location 1151
 103 run: reply prev-node
9999 mem: location 1239 is 1150
 102 run: deleted-newline?:boolean <- equal currc, 10/newline
9999 mem: location 1343 is 98
9999 mem: storing 0 in location 1344
 102 run: jump-unless deleted-newline?, 1:offset
9999 mem: location 1344 is 0
9999 run: jumping to instruction 217
 102 run: curr:address:duplex-list <- next-duplex *before-cursor
9999 mem: location 1301 is 1003
9999 mem: location 1003 is 1150
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 103 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1150 in location 1360
 103 run: jump-if in, 1:offset
9999 mem: location 1360 is 1150
9999 run: jumping to instruction 4
 103 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1360 is 1150
9999 mem: location 1150 is 167
9999 mem: location 1151 is 1172
9999 mem: location 1152 is 0
9999 mem: location 1360 is 1150
9999 run: address to copy is 1151
9999 run: its type is address
9999 mem: location 1151 is 1172
9999 mem: storing 1172 in location 1361
 103 run: reply result
9999 mem: location 1361 is 1172
9999 run: result 0 is 1172
9999 mem: storing 1172 in location 1342
 102 run: screen <- move-cursor screen, *cursor-row, *cursor-column
9999 mem: location 1291 is 1009
9999 mem: location 1302 is 1006
9999 mem: location 1006 is 1
9999 mem: location 1303 is 1007
9999 mem: location 1007 is 0
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 6
 103 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1204
 103 run: new-row:number <- next-ingredient 
9999 mem: storing 1 in location 1205
 103 run: new-column:number <- next-ingredient 
9999 mem: storing 0 in location 1206
 103 run: break-unless sc, 
9999 mem: location 1204 is 1009
9999 run: jump-unless fell through
 103 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1204 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1204 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1207
 103 run: *row <- copy new-row
9999 mem: location 1205 is 1
9999 mem: location 1207 is 1011
9999 mem: location 1207 is 1011
9999 mem: storing 1 in location 1011
 103 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1204 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 3
9999 mem: location 1013 is 1014
9999 mem: location 1204 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1208
 103 run: *column <- copy new-column
9999 mem: location 1206 is 0
9999 mem: location 1208 is 1012
9999 mem: location 1208 is 1012
9999 mem: storing 0 in location 1012
 103 run: reply sc/same-as-ingredient:0
9999 mem: location 1204 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1291
 102 run: curr-column:number <- copy *cursor-column
9999 mem: location 1303 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1303 is 1007
9999 mem: location 1303 is 1007
9999 mem: storing 0 in location 1345
 102 run: at-right?:boolean <- greater-or-equal curr-column, screen-width
9999 mem: location 1345 is 0
9999 mem: location 1297 is 10
9999 mem: storing 0 in location 1346
 102 run: jump-unless at-right?, 1:offset
9999 mem: location 1346 is 0
9999 run: jumping to instruction 224
 102 run: break-unless curr, 
9999 mem: location 1342 is 1172
9999 run: jump-unless fell through
 102 run: currc:character <- get *curr, value:offset
9999 mem: location 1342 is 1172
9999 mem: location 1172 is 99
9999 mem: location 1173 is 0
9999 mem: location 1174 is 1150
9999 mem: location 1342 is 1172
9999 run: address to copy is 1172
9999 run: its type is number
9999 mem: location 1172 is 99
9999 mem: storing 99 in location 1343
 102 run: at-newline?:boolean <- equal currc, 10/newline
9999 mem: location 1343 is 99
9999 mem: storing 0 in location 1347
 102 run: break-if at-newline?, 
9999 mem: location 1347 is 0
9999 run: jump-if fell through
 102 run: screen <- print-character screen, currc
9999 mem: location 1291 is 1009
9999 mem: location 1343 is 99
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 103 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1211
 103 run: c:character <- next-ingredient 
9999 mem: storing 99 in location 1212
 103 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1213
9999 mem: storing 0 in location 1214
 103 run: break-if color-found?, 
9999 mem: location 1214 is 0
9999 run: jump-if fell through
 103 run: color <- copy 7/white
9999 mem: storing 7 in location 1213
 103 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1215
9999 mem: storing 0 in location 1216
 103 run: break-if bg-color-found?, 
9999 mem: location 1216 is 0
9999 run: jump-if fell through
 103 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1215
 103 run: trace 90, [print-character], c
9999 mem: location 1212 is 99
  90 print-character: 99 
 103 run: break-unless sc, 
9999 mem: location 1211 is 1009
9999 run: jump-unless fell through
 103 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1211 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1211 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1217
 103 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1211 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1211 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1218
 103 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1211 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1211 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1219
 103 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1219 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1220
 103 run: jump-if legal?, 1:offset
9999 mem: location 1220 is 1
9999 run: jumping to instruction 22
 103 run: legal? <- lesser-than *row, height
9999 mem: location 1219 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1218 is 5
9999 mem: storing 1 in location 1220
 103 run: jump-if legal?, 1:offset
9999 mem: location 1220 is 1
9999 run: jumping to instruction 25
 103 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1211 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1211 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1221
 103 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1221 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 1 in location 1220
 103 run: jump-if legal?, 1:offset
9999 mem: location 1220 is 1
9999 run: jumping to instruction 29
 103 run: legal? <- lesser-than *column, width
9999 mem: location 1221 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1217 is 10
9999 mem: storing 1 in location 1220
 103 run: jump-if legal?, 1:offset
9999 mem: location 1220 is 1
9999 run: jumping to instruction 32
 103 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1212 is 99
9999 mem: storing 0 in location 1222
 103 run: break-unless newline?, 
9999 mem: location 1222 is 0
9999 run: jumping to instruction 43
 103 run: index:number <- multiply *row, width
9999 mem: location 1219 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1217 is 10
9999 mem: storing 10 in location 1225
 103 run: index <- add index, *column
9999 mem: location 1225 is 10
9999 mem: location 1221 is 1012
9999 mem: location 1012 is 0
9999 mem: storing 10 in location 1225
 103 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1211 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 0
9999 mem: location 1013 is 1014
9999 mem: location 1211 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1226
 103 run: len:number <- length *buf
9999 mem: location 1226 is 1014
9999 mem: storing 50 in location 1227
 103 run: backspace?:boolean <- equal c, 8
9999 mem: location 1212 is 99
9999 mem: storing 0 in location 1228
 103 run: break-unless backspace?, 
9999 mem: location 1228 is 0
9999 run: jumping to instruction 63
 103 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1226 is 1014
9999 mem: location 1225 is 10
9999 mem: storing 1035 in location 1230
 103 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1230 is 1035
9999 mem: location 1035 is 98
9999 mem: location 1036 is 7
9999 mem: location 1230 is 1035
9999 run: address to copy is 1035
9999 mem: storing 1035 in location 1231
 103 run: *cursor-contents <- copy c
9999 mem: location 1212 is 99
9999 mem: location 1231 is 1035
9999 mem: location 1231 is 1035
9999 mem: storing 99 in location 1035
 103 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1230 is 1035
9999 mem: location 1035 is 99
9999 mem: location 1036 is 7
9999 mem: location 1230 is 1035
9999 run: address to copy is 1036
9999 mem: storing 1036 in location 1232
 103 run: *cursor-color <- copy color
9999 mem: location 1213 is 7
9999 mem: location 1232 is 1036
9999 mem: location 1232 is 1036
9999 mem: storing 7 in location 1036
 103 run: right:number <- subtract width, 1
9999 mem: location 1217 is 10
9999 mem: storing 9 in location 1233
 103 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1221 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1233 is 9
9999 mem: storing 0 in location 1234
 103 run: break-if at-right?, 
9999 mem: location 1234 is 0
9999 run: jump-if fell through
 103 run: *column <- add *column, 1
9999 mem: location 1221 is 1012
9999 mem: location 1012 is 0
9999 mem: location 1221 is 1012
9999 mem: storing 1 in location 1012
 103 run: reply sc/same-as-ingredient:0
9999 mem: location 1211 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1291
 102 run: curr-column <- add curr-column, 1
9999 mem: location 1345 is 0
9999 mem: storing 1 in location 1345
 102 run: curr <- next-duplex curr
9999 mem: location 1342 is 1172
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 3
 103 run: in:address:duplex-list <- next-ingredient 
9999 mem: storing 1172 in location 1360
 103 run: jump-if in, 1:offset
9999 mem: location 1360 is 1172
9999 run: jumping to instruction 4
 103 run: result:address:duplex-list <- get *in, next:offset
9999 mem: location 1360 is 1172
9999 mem: location 1172 is 99
9999 mem: location 1173 is 0
9999 mem: location 1174 is 1150
9999 mem: location 1360 is 1172
9999 run: address to copy is 1173
9999 run: its type is address
9999 mem: location 1173 is 0
9999 mem: storing 0 in location 1361
 103 run: reply result
9999 mem: location 1361 is 0
9999 run: result 0 is 0
9999 mem: storing 0 in location 1342
 102 run: loop 
9999 run: jumping to instruction 221
 102 run: at-right?:boolean <- greater-or-equal curr-column, screen-width
9999 mem: location 1345 is 1
9999 mem: location 1297 is 10
9999 mem: storing 0 in location 1346
 102 run: jump-unless at-right?, 1:offset
9999 mem: location 1346 is 0
9999 run: jumping to instruction 224
 102 run: break-unless curr, 
9999 mem: location 1342 is 0
9999 run: jumping to instruction 232
 102 run: screen <- print-character screen, 32/space
9999 mem: location 1291 is 1009
 103 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 25
 103 run: sc:address:screen <- next-ingredient 
9999 mem: storing 1009 in location 1211
 103 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1212
 103 run: color:number, color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1213
9999 mem: storing 0 in location 1214
 103 run: break-if color-found?, 
9999 mem: location 1214 is 0
9999 run: jump-if fell through
 103 run: color <- copy 7/white
9999 mem: storing 7 in location 1213
 103 run: bg-color:number, bg-color-found?:boolean <- next-ingredient 
9999 mem: storing 0 in location 1215
9999 mem: storing 0 in location 1216
 103 run: break-if bg-color-found?, 
9999 mem: location 1216 is 0
9999 run: jump-if fell through
 103 run: bg-color <- copy 0/black
9999 mem: storing 0 in location 1215
 103 run: trace 90, [print-character], c
9999 mem: location 1212 is 32
  90 print-character: 32 
 103 run: break-unless sc, 
9999 mem: location 1211 is 1009
9999 run: jump-unless fell through
 103 run: width:number <- get *sc, num-columns:offset
9999 mem: location 1211 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1211 is 1009
9999 run: address to copy is 1010
9999 run: its type is number
9999 mem: location 1010 is 10
9999 mem: storing 10 in location 1217
 103 run: height:number <- get *sc, num-rows:offset
9999 mem: location 1211 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1211 is 1009
9999 run: address to copy is 1009
9999 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1218
 103 run: row:address:number <- get-address *sc, cursor-row:offset
9999 mem: location 1211 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1211 is 1009
9999 run: address to copy is 1011
9999 mem: storing 1011 in location 1219
 103 run: legal?:boolean <- greater-or-equal *row, 0
9999 mem: location 1219 is 1011
9999 mem: location 1011 is 1
9999 mem: storing 1 in location 1220
 103 run: jump-if legal?, 1:offset
9999 mem: location 1220 is 1
9999 run: jumping to instruction 22
 103 run: legal? <- lesser-than *row, height
9999 mem: location 1219 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1218 is 5
9999 mem: storing 1 in location 1220
 103 run: jump-if legal?, 1:offset
9999 mem: location 1220 is 1
9999 run: jumping to instruction 25
 103 run: column:address:number <- get-address *sc, cursor-column:offset
9999 mem: location 1211 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1211 is 1009
9999 run: address to copy is 1012
9999 mem: storing 1012 in location 1221
 103 run: legal? <- greater-or-equal *column, 0
9999 mem: location 1221 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 1 in location 1220
 103 run: jump-if legal?, 1:offset
9999 mem: location 1220 is 1
9999 run: jumping to instruction 29
 103 run: legal? <- lesser-than *column, width
9999 mem: location 1221 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1217 is 10
9999 mem: storing 1 in location 1220
 103 run: jump-if legal?, 1:offset
9999 mem: location 1220 is 1
9999 run: jumping to instruction 32
 103 run: newline?:boolean <- equal c, 10/newline
9999 mem: location 1212 is 32
9999 mem: storing 0 in location 1222
 103 run: break-unless newline?, 
9999 mem: location 1222 is 0
9999 run: jumping to instruction 43
 103 run: index:number <- multiply *row, width
9999 mem: location 1219 is 1011
9999 mem: location 1011 is 1
9999 mem: location 1217 is 10
9999 mem: storing 10 in location 1225
 103 run: index <- add index, *column
9999 mem: location 1225 is 10
9999 mem: location 1221 is 1012
9999 mem: location 1012 is 1
9999 mem: storing 11 in location 1225
 103 run: buf:address:array:screen-cell <- get *sc, data:offset
9999 mem: location 1211 is 1009
9999 mem: location 1009 is 5
9999 mem: location 1010 is 10
9999 mem: location 1011 is 1
9999 mem: location 1012 is 1
9999 mem: location 1013 is 1014
9999 mem: location 1211 is 1009
9999 run: address to copy is 1013
9999 run: its type is address
9999 mem: location 1013 is 1014
9999 mem: storing 1014 in location 1226
 103 run: len:number <- length *buf
9999 mem: location 1226 is 1014
9999 mem: storing 50 in location 1227
 103 run: backspace?:boolean <- equal c, 8
9999 mem: location 1212 is 32
9999 mem: storing 0 in location 1228
 103 run: break-unless backspace?, 
9999 mem: location 1228 is 0
9999 run: jumping to instruction 63
 103 run: cursor:address:screen-cell <- index-address *buf, index
9999 mem: location 1226 is 1014
9999 mem: location 1225 is 11
9999 mem: storing 1037 in location 1230
 103 run: cursor-contents:address:character <- get-address *cursor, contents:offset
9999 mem: location 1230 is 1037
9999 mem: location 1037 is 99
9999 mem: location 1038 is 7
9999 mem: location 1230 is 1037
9999 run: address to copy is 1037
9999 mem: storing 1037 in location 1231
 103 run: *cursor-contents <- copy c
9999 mem: location 1212 is 32
9999 mem: location 1231 is 1037
9999 mem: location 1231 is 1037
9999 mem: storing 32 in location 1037
 103 run: cursor-color:address:number <- get-address *cursor, color:offset
9999 mem: location 1230 is 1037
9999 mem: location 1037 is 32
9999 mem: location 1038 is 7
9999 mem: location 1230 is 1037
9999 run: address to copy is 1038
9999 mem: storing 1038 in location 1232
 103 run: *cursor-color <- copy color
9999 mem: location 1213 is 7
9999 mem: location 1232 is 1038
9999 mem: location 1232 is 1038
9999 mem: storing 7 in location 1038
 103 run: right:number <- subtract width, 1
9999 mem: location 1217 is 10
9999 mem: storing 9 in location 1233
 103 run: at-right?:boolean <- greater-or-equal *column, right
9999 mem: location 1221 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1233 is 9
9999 mem: storing 0 in location 1234
 103 run: break-if at-right?, 
9999 mem: location 1234 is 0
9999 run: jump-if fell through
 103 run: *column <- add *column, 1
9999 mem: location 1221 is 1012
9999 mem: location 1012 is 1
9999 mem: location 1221 is 1012
9999 mem: storing 2 in location 1012
 103 run: reply sc/same-as-ingredient:0
9999 mem: location 1211 is 1009
9999 run: result 0 is 1009
9999 mem: storing 1009 in location 1291
 102 run: reply screen/same-as-ingredient:0, editor/same-as-ingredient:1, 0/no-more-render
9999 mem: location 1291 is 1009
9999 mem: location 1292 is 1000
9999 run: result 0 is 1009
9999 run: result 1 is 1000
9999 run: result 2 is 0
9999 mem: storing 1009 in location 1243
9999 mem: storing 1000 in location 1245
9999 mem: storing 0 in location 1253
 101 run: break-unless go-render?, 
9999 mem: location 1253 is 0
9999 run: jumping to instruction 22
 101 run: loop 
9999 run: jumping to instruction 5
 101 run: e:event, console:address, found?:boolean, quit?:boolean <- read-event console
9999 mem: location 1244 is 1356
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 12
 102 run: x:address:console <- next-ingredient 
9999 mem: storing 1356 in location 1278
 102 run: break-unless x, 
9999 mem: location 1278 is 1356
9999 run: jump-unless fell through
 102 run: idx:address:number <- get-address *x, index:offset
9999 mem: location 1278 is 1356
9999 mem: location 1356 is 1
9999 mem: location 1357 is 1351
9999 mem: location 1278 is 1356
9999 run: address to copy is 1356
9999 mem: storing 1356 in location 1279
 102 run: buf:address:array:event <- get *x, data:offset
9999 mem: location 1278 is 1356
9999 mem: location 1356 is 1
9999 mem: location 1357 is 1351
9999 mem: location 1278 is 1356
9999 run: address to copy is 1357
9999 run: its type is address
9999 mem: location 1357 is 1351
9999 mem: storing 1351 in location 1280
 102 run: max:number <- length *buf
9999 mem: location 1280 is 1351
9999 mem: storing 1 in location 1281
 102 run: done?:boolean <- greater-or-equal *idx, max
9999 mem: location 1279 is 1356
9999 mem: location 1356 is 1
9999 mem: location 1281 is 1
9999 mem: storing 1 in location 1282
 102 run: break-unless done?, 
9999 mem: location 1282 is 1
9999 run: jump-unless fell through
 102 run: dummy:address:event <- new event:type
9999 mem: storing 1358 in location 1283
 102 run: reply *dummy, x/same-as-ingredient:0, 1/found, 1/quit
9999 mem: location 1283 is 1358
9999 mem: location 1358 is 0
9999 mem: location 1359 is 0
9999 mem: location 1360 is 0
9999 mem: location 1361 is 0
9999 mem: location 1278 is 1356
9999 run: result 0 is [0, 0, 0, 0]
9999 run: result 1 is 1356
9999 run: result 2 is 1
9999 run: result 3 is 1
9999 mem: storing 0 in location 1246
9999 mem: storing 0 in location 1247
9999 mem: storing 0 in location 1248
9999 mem: storing 0 in location 1249
9999 mem: storing 1356 in location 1244
9999 mem: storing 1 in location 1250
9999 mem: storing 1 in location 1251
 101 run: loop-unless found?, 
9999 mem: location 1250 is 1
9999 run: jump-unless fell through
 101 run: break-if quit?, 
9999 mem: location 1251 is 1
9999 run: jumping to instruction 25
  99 run: screen-should-contain [
    .          .
    .c         .
    .┈┈┈┈┈┈┈┈┈┈.
    .          .
  ]
  99 run: check-trace-count-for-label 2, [print-character]
