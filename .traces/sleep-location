schedule: f1
run: f1 0: (((1 integer)) <- ((copy)) ((0 literal)))
run: f1 0: 0 => ((1 integer))
mem: ((1 integer)): 1 <= 0
run: f1 1: (((sleep)) ((until-location-changes literal)) ((1 integer)))
mem: ((1 integer)) => 0
schedule: pushing f1 to sleep queue
schedule: f2
run: f2 0: (((sleep)) ((for-some-cycles literal)) ((30 literal)))
run: f2 0: sleeping until 33
schedule: pushing f2 to sleep queue
schedule: skipping to cycle 34
schedule: waking up f2
schedule: f2
run: f2 1: (((1 integer)) <- ((copy)) ((3 literal)))
run: f2 1: 3 => ((1 integer))
mem: ((1 integer)): 1 <= 3
schedule: done with routine 
schedule: waking up f1
schedule: f1
run: f1 2: (((2 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 3
run: f1 2: 4 => ((2 integer))
mem: ((2 integer)): 2 <= 4
schedule: done with routine 
