9991 parse: --- defining scenario_integer-to-decimal-digit-negative
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:array:character/raw <- to-text -1\n    2:array:character/raw <- copy *1:address:shared:array:character/raw\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:array:character/raw <- to-text -1
    2:array:character/raw <- copy *1:address:shared:array:character/raw
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2 <- 2\n    3 <- 45  # '-'\n    4 <- 49  # '1'\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2 <- 2
    3 <- 45  # '-'
    4 <- 49  # '1'
  ]
9999 parse: recipe scenario_integer-to-decimal-digit-negative has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- deduce types for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- collect surrounding spaces for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- transform names for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- resolve ambiguous calls for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- compute instruction operations for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- transform braces for recipe scenario_integer-to-decimal-digit-negative
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- type-check 'call' instructions inside recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- type-check calls inside recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_integer-to-decimal-digit-negative
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_integer-to-decimal-digit-negative
 102 run: run [
    1:address:shared:array:character/raw <- to-text -1
    2:array:character/raw <- copy *1:address:shared:array:character/raw
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: to-text
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"-1": "literal"}
9993 parse:   product: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>}
9992 load: after rewriting: 1:address:shared:array:character/raw <- to-text -1
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>, "lookup": <>}
9993 parse:   product: {"2": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 2:array:character/raw <- copy *1:address:shared:array:character/raw
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction 1:address:shared:array:character/raw <- to-text -1
9992 transform: checking variant (strict) 0: recipe to-text {"x": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"y": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 1: recipe to-text_2 {"n": "number"} -> {"result": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 transform: checking variant (strict) 2: recipe to-text_3 {"x": "boolean"} -> {"result": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 3: recipe to-text_4 {"x": <"address" : <"_elem" : <>>>} -> {"result": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9992 transform: checking variant (strict) 4: recipe to-text_5 {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>} -> {"result": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9993 transform: strict match failed: ingredient 0
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: to-text ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:array:character/raw <- to-text_2 -1
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 17
9999 mem: allocating size 19
9999 mem: new alloc: 1000
9999 mem: storing 17 in location 1001
 104 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing -1 in location 1003
 104 run: jump-if n, 
9999 mem: location 1003 is -1
9998 run: jumping to instruction 6
 104 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1005
 104 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1003 is -1
9999 mem: storing 1 in location 1006
 104 run: jump-unless negative?, 
9999 mem: location 1006 is 1
9998 run: jump-unless fell through
 104 run: negate-result <- copy 1
9999 mem: storing 1 in location 1005
 104 run: n <- multiply n, -1
9999 mem: location 1003 is -1
9999 mem: storing 1 in location 1003
 104 run: tmp:address:shared:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1019
9999 mem: storing 5 in location 1020
 105 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 1022
 105 run: result <- new buffer:type
9999 mem: allocating size 3
9999 mem: new alloc: 1026
9999 mem: storing 1026 in location 1023
9999 mem: incrementing refcount of 1026: 0 -> 1
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1023 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1023 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1024
 105 run: *len:address:number <- copy 0
9999 mem: location 1024 is 1027
9999 mem: storing 0 in location 1027
 105 run: s:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1023 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 0
9999 mem: location 1028 is 0
9999 mem: location 1023 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1028
9999 mem: storing 1028 in location 1025
 105 run: *s <- new character:type, capacity
9999 mem: location 1022 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 1029
9999 mem: storing 30 in location 1030
9999 mem: location 1025 is 1028
9999 mem: storing 1029 in location 1028
9999 mem: incrementing refcount of 1029: 0 -> 1
 105 run: reply result
9999 mem: location 1023 is 1026
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1026
9999 mem: storing 1026 in location 1007
9999 mem: incrementing refcount of 1026: 1 -> 2
 104 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1008
 104 run: done?:boolean <- equal n, 0
9999 mem: location 1003 is 1
9999 mem: storing 0 in location 1009
 104 run: jump-if done?, 
9999 mem: location 1009 is 0
9998 run: jump-if fell through
 104 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1003 is 1
9999 mem: storing 0 in location 1003
9999 mem: storing 1 in location 1010
 104 run: c:character <- add digit-base, digit
9999 mem: location 1008 is 48
9999 mem: location 1010 is 1
9999 mem: storing 49 in location 1011
 104 run: tmp:address:shared:buffer <- append_2 tmp, c
9999 mem: location 1007 is 1026
9999 mem: location 1011 is 49
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 mem: new alloc: 1061
9999 mem: storing 9 in location 1062
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1026 in location 1064
9999 mem: incrementing refcount of 1026: 2 -> 3
 105 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 49 in location 1065
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1064 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1064 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1066
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1065 is 49
9999 mem: storing 0 in location 1067
 105 run: jump-unless backspace?, 
9999 mem: location 1067 is 0
9998 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 1064 is 1026
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1072
9999 mem: storing 6 in location 1073
 106 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1026 in location 1075
9999 mem: incrementing refcount of 1026: 3 -> 4
 106 run: len:number <- get *in, length:offset
9999 mem: location 1075 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1075 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 0
9999 mem: storing 0 in location 1076
 106 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1075 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1075 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1077
9999 mem: incrementing refcount of 1029: 1 -> 2
 106 run: capacity:number <- length *s
9999 mem: location 1077 is 1029
9999 mem: skipping refcount at 1029
9999 mem: storing 30 in location 1078
 106 run: result <- greater-or-equal len, capacity
9999 mem: location 1076 is 0
9999 mem: location 1078 is 30
9999 mem: storing 0 in location 1079
 106 run: reply result:boolean
9999 mem: location 1079 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1069
 105 run: jump-unless full?, 
9999 mem: location 1069 is 0
9998 run: jumping to instruction 17
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1064 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 0
9999 mem: location 1028 is 1029
9999 mem: location 1064 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1070
9999 mem: incrementing refcount of 1029: 2 -> 3
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 1070 is 1029
9999 mem: skipping refcount at 1029
9999 mem: location 1066 is 1027
9999 mem: location 1027 is 0
9999 mem: storing 1031 in location 1071
 105 run: *dest <- copy c
9999 mem: location 1065 is 49
9999 mem: location 1071 is 1031
9999 mem: storing 49 in location 1031
 105 run: *len <- add *len, 1
9999 mem: location 1066 is 1027
9999 mem: location 1027 is 0
9999 mem: location 1066 is 1027
9999 mem: storing 1 in location 1027
 105 run: reply in:address:shared:buffer
9999 mem: location 1064 is 1026
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1026
9999 mem: decrementing refcount of 1026: 4 -> 3
9999 mem: storing 1026 in location 1007
9999 mem: incrementing refcount of 1026: 3 -> 4
 104 run: jump 
9998 run: jumping to instruction 17
 104 run: done?:boolean <- equal n, 0
9999 mem: location 1003 is 0
9999 mem: storing 1 in location 1009
 104 run: jump-if done?, 
9999 mem: location 1009 is 1
9998 run: jumping to instruction 23
 104 run: jump-unless negate-result:boolean, 
9999 mem: location 1005 is 1
9998 run: jump-unless fell through
 104 run: minus:character <- copy 45/-
9999 mem: storing 45 in location 1012
 104 run: tmp <- append_2 tmp, minus
9999 mem: location 1007 is 1026
9999 mem: location 1012 is 45
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1026 in location 1064
9999 mem: incrementing refcount of 1026: 4 -> 5
 105 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 45 in location 1065
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1064 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 1
9999 mem: location 1028 is 1029
9999 mem: location 1064 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1027
9999 mem: storing 1027 in location 1066
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1065 is 45
9999 mem: storing 0 in location 1067
 105 run: jump-unless backspace?, 
9999 mem: location 1067 is 0
9998 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 1064 is 1026
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 106 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1026 in location 1075
9999 mem: incrementing refcount of 1026: 5 -> 6
 106 run: len:number <- get *in, length:offset
9999 mem: location 1075 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 1
9999 mem: location 1028 is 1029
9999 mem: location 1075 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 1
9999 mem: storing 1 in location 1076
 106 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1075 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 1
9999 mem: location 1028 is 1029
9999 mem: location 1075 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1077
9999 mem: incrementing refcount of 1029: 3 -> 4
 106 run: capacity:number <- length *s
9999 mem: location 1077 is 1029
9999 mem: skipping refcount at 1029
9999 mem: storing 30 in location 1078
 106 run: result <- greater-or-equal len, capacity
9999 mem: location 1076 is 1
9999 mem: location 1078 is 30
9999 mem: storing 0 in location 1079
 106 run: reply result:boolean
9999 mem: location 1079 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1069
 105 run: jump-unless full?, 
9999 mem: location 1069 is 0
9998 run: jumping to instruction 17
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1064 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 1
9999 mem: location 1028 is 1029
9999 mem: location 1064 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1070
9999 mem: incrementing refcount of 1029: 4 -> 5
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 1070 is 1029
9999 mem: skipping refcount at 1029
9999 mem: location 1066 is 1027
9999 mem: location 1027 is 1
9999 mem: storing 1032 in location 1071
 105 run: *dest <- copy c
9999 mem: location 1065 is 45
9999 mem: location 1071 is 1032
9999 mem: storing 45 in location 1032
 105 run: *len <- add *len, 1
9999 mem: location 1066 is 1027
9999 mem: location 1027 is 1
9999 mem: location 1066 is 1027
9999 mem: storing 2 in location 1027
 105 run: reply in:address:shared:buffer
9999 mem: location 1064 is 1026
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1026
9999 mem: decrementing refcount of 1026: 6 -> 5
9999 mem: storing 1026 in location 1007
9999 mem: incrementing refcount of 1026: 5 -> 6
 104 run: len:number <- get *tmp, length:offset
9999 mem: location 1007 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 2
9999 mem: location 1028 is 1029
9999 mem: location 1007 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1027
9998 run: its type is number
9999 mem: location 1027 is 2
9999 mem: storing 2 in location 1013
 104 run: buf:address:shared:array:character <- get *tmp, data:offset
9999 mem: location 1007 is 1026
9999 mem: skipping refcount at 1026
9999 mem: location 1027 is 2
9999 mem: location 1028 is 1029
9999 mem: location 1007 is 1026
9999 mem: skipping refcount at 1026
9998 run: address to copy is 1028
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1028 is 1029
9999 mem: storing 1029 in location 1014
9999 mem: incrementing refcount of 1029: 5 -> 6
 104 run: result <- new character:type, len
9999 mem: location 1013 is 2
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1080
9999 mem: storing 2 in location 1081
9999 mem: storing 1080 in location 1004
9999 mem: incrementing refcount of 1080: 0 -> 1
 104 run: i:number <- subtract len, 1
9999 mem: location 1013 is 2
9999 mem: storing 1 in location 1015
 104 run: j:number <- copy 0
9999 mem: storing 0 in location 1016
 104 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1015 is 1
9999 mem: storing 0 in location 1009
 104 run: jump-if done?, 
9999 mem: location 1009 is 0
9998 run: jump-if fell through
 104 run: src:character <- index *buf, i
9999 mem: location 1014 is 1029
9999 mem: skipping refcount at 1029
9998 run: base address is 1030
9999 mem: location 1015 is 1
9998 run: address to copy is 1032
9998 run: its type is character
9999 mem: location 1032 is 45
9999 mem: storing 45 in location 1017
 104 run: dest:address:character <- index-address *result, j
9999 mem: location 1004 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1016 is 0
9999 mem: storing 1082 in location 1018
 104 run: *dest <- copy src
9999 mem: location 1017 is 45
9999 mem: location 1018 is 1082
9999 mem: storing 45 in location 1082
 104 run: i <- subtract i, 1
9999 mem: location 1015 is 1
9999 mem: storing 0 in location 1015
 104 run: j <- add j, 1
9999 mem: location 1016 is 0
9999 mem: storing 1 in location 1016
 104 run: jump 
9998 run: jumping to instruction 35
 104 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1015 is 0
9999 mem: storing 0 in location 1009
 104 run: jump-if done?, 
9999 mem: location 1009 is 0
9998 run: jump-if fell through
 104 run: src:character <- index *buf, i
9999 mem: location 1014 is 1029
9999 mem: skipping refcount at 1029
9998 run: base address is 1030
9999 mem: location 1015 is 0
9998 run: address to copy is 1031
9998 run: its type is character
9999 mem: location 1031 is 49
9999 mem: storing 49 in location 1017
 104 run: dest:address:character <- index-address *result, j
9999 mem: location 1004 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1016 is 1
9999 mem: storing 1083 in location 1018
 104 run: *dest <- copy src
9999 mem: location 1017 is 49
9999 mem: location 1018 is 1083
9999 mem: storing 49 in location 1083
 104 run: i <- subtract i, 1
9999 mem: location 1015 is 0
9999 mem: storing -1 in location 1015
 104 run: j <- add j, 1
9999 mem: location 1016 is 1
9999 mem: storing 2 in location 1016
 104 run: jump 
9998 run: jumping to instruction 35
 104 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1015 is -1
9999 mem: storing 1 in location 1009
 104 run: jump-if done?, 
9999 mem: location 1009 is 1
9998 run: jumping to instruction 43
 104 run: reply result:address:shared:array:character
9999 mem: location 1004 is 1080
9999 abandon: saving in free-list of size 19
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1080
9999 mem: storing 1080 in location 1
9999 mem: incrementing refcount of 1080: 1 -> 2
 103 run: 2:array:character/raw <- copy *1:address:shared:array:character/raw
9999 mem: location 1 is 1080
9999 mem: skipping refcount at 1080
9999 mem: location 1081 is 2
9999 mem: location 1082 is 45
9999 mem: location 1083 is 49
9999 mem: storing 2 in location 2
9999 mem: storing 45 in location 3
9999 mem: storing 49 in location 4
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 2
    3 <- 45  # '-'
    4 <- 49  # '1'
  ]
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
