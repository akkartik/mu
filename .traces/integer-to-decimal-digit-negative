parse: instruction: run
parse:   ingredient: {name: "
    1:address:array:character/raw <- integer-to-decimal-string -1:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  ", properties: ["
    1:address:array:character/raw <- integer-to-decimal-string -1:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    2 <- 2
    3 <- 45  # '-'
    4 <- 49  # '1'
  ", properties: ["
    2 <- 2
    3 <- 45  # '-'
    4 <- 49  # '1'
  ": "literal-string"]}
after-brace: recipe integer-to-decimal-digit-negative
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: integer-to-decimal-digit-negative
run: run [
    1:address:array:character/raw <- integer-to-decimal-string -1:literal
    2:array:character/raw <- copy 1:address:array:character/deref/raw
  ]
parse: instruction: integer-to-decimal-string
parse:   ingredient: {name: "-1", properties: ["-1": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"array":"character", "raw": ]}
parse: instruction: copy
parse:   ingredient: {name: "1", properties: ["1": "address":"array":"character", "deref": , "raw": ]}
parse:   product: {name: "2", properties: ["2": "array":"character", "raw": ]}
after-brace: recipe run1001
after-brace: integer-to-decimal-string ...
after-brace: copy ...
run: 1:address:array:character/raw <- integer-to-decimal-string -1:literal
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1000
run: n:number <- next-ingredient 
mem: storing -1 in location 1002
run: break-if n:number, 
mem: location 1002 is -1
run: jumping to instruction 6
run: negate-result:boolean <- copy 0:literal
mem: storing 0 in location 1004
run: negative?:boolean <- lesser-than n:number, 0:literal
mem: location 1002 is -1
mem: storing 1 in location 1005
run: break-unless negative?:boolean, 
mem: location 1005 is 1
run: jump-unless fell through
run: negate-result:boolean <- copy 1:literal
mem: storing 1 in location 1004
run: n:number <- multiply n:number, -1:literal
mem: location 1002 is -1
mem: storing 1 in location 1002
run: tmp:address:buffer <- init-buffer 30:literal
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1031
run: result:address:buffer <- new buffer:type
mem: new alloc: 1062
mem: storing 1062 in location 1033
run: len:address:number <- get-address result:address:buffer/deref, length:offset
mem: location 1033 is 1062
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1033 is 1062
run: address to copy is 1062
mem: storing 1062 in location 1034
run: len:address:number/deref <- copy 0:literal
mem: location 1034 is 1062
mem: storing 0 in location 1062
run: s:address:address:array:character <- get-address result:address:buffer/deref, data:offset
mem: location 1033 is 1062
mem: location 1062 is 0
mem: location 1063 is 0
mem: location 1033 is 1062
run: address to copy is 1063
mem: storing 1063 in location 1035
run: capacity:number <- next-ingredient 
mem: storing 30 in location 1036
run: s:address:address:array:character/deref <- new character:type, capacity:number
mem: location 1036 is 30
mem: array size is 30
mem: new alloc: 1064
mem: location 1035 is 1063
mem: storing 1064 in location 1063
run: reply result:address:buffer
mem: location 1033 is 1062
run: result 0 is 1062
mem: storing 1062 in location 1006
run: digit-base:number <- copy 48:literal
mem: storing 48 in location 1007
run: done?:boolean <- equal n:number, 0:literal
mem: location 1002 is 1
mem: storing 0 in location 1008
run: break-if done?:boolean, 
mem: location 1008 is 0
run: jump-if fell through
run: n:number, digit:number <- divide-with-remainder n:number, 10:literal
mem: location 1002 is 1
mem: storing 0 in location 1002
mem: storing 1 in location 1009
run: c:character <- add digit-base:number, digit:number
mem: location 1007 is 48
mem: location 1009 is 1
mem: storing 49 in location 1010
run: tmp:address:buffer <- buffer-append tmp:address:buffer, c:character
mem: location 1006 is 1062
mem: location 1010 is 49
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1095
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1097
run: c:character <- next-ingredient 
mem: storing 49 in location 1098
run: full?:boolean <- buffer-full? in:address:buffer
mem: location 1097 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1126
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1128
run: len:number <- get in:address:buffer/deref, length:offset
mem: location 1128 is 1062
mem: location 1062 is 0
mem: location 1063 is 1064
mem: location 1128 is 1062
run: address to copy is 1062
run: its type is 1
mem: location 1062 is 0
mem: storing 0 in location 1129
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1128 is 1062
mem: location 1062 is 0
mem: location 1063 is 1064
mem: location 1128 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1130
run: capacity:number <- length s:address:array:character/deref
mem: location 1130 is 1064
mem: location 1064 is 30
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1079 is 0
mem: location 1080 is 0
mem: location 1081 is 0
mem: location 1082 is 0
mem: location 1083 is 0
mem: location 1084 is 0
mem: location 1085 is 0
mem: location 1086 is 0
mem: location 1087 is 0
mem: location 1088 is 0
mem: location 1089 is 0
mem: location 1090 is 0
mem: location 1091 is 0
mem: location 1092 is 0
mem: location 1093 is 0
mem: location 1094 is 0
mem: location 1130 is 1064
mem: storing 30 in location 1131
run: result:boolean <- greater-or-equal len:number, capacity:number
mem: location 1129 is 0
mem: location 1131 is 30
mem: storing 0 in location 1132
run: reply result:boolean
mem: location 1132 is 0
run: result 0 is 0
mem: storing 0 in location 1099
run: break-unless full?:boolean, 
mem: location 1099 is 0
run: jumping to instruction 7
run: len:address:number <- get-address in:address:buffer/deref, length:offset
mem: location 1097 is 1062
mem: location 1062 is 0
mem: location 1063 is 1064
mem: location 1097 is 1062
run: address to copy is 1062
mem: storing 1062 in location 1100
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1097 is 1062
mem: location 1062 is 0
mem: location 1063 is 1064
mem: location 1097 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1101
run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
mem: location 1101 is 1064
mem: location 1064 is 30
mem: location 1065 is 0
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1079 is 0
mem: location 1080 is 0
mem: location 1081 is 0
mem: location 1082 is 0
mem: location 1083 is 0
mem: location 1084 is 0
mem: location 1085 is 0
mem: location 1086 is 0
mem: location 1087 is 0
mem: location 1088 is 0
mem: location 1089 is 0
mem: location 1090 is 0
mem: location 1091 is 0
mem: location 1092 is 0
mem: location 1093 is 0
mem: location 1094 is 0
mem: location 1100 is 1062
mem: location 1062 is 0
mem: location 1101 is 1064
mem: location 1100 is 1062
mem: location 1062 is 0
mem: storing 1065 in location 1102
run: dest:address:character/deref <- copy c:character
mem: location 1098 is 49
mem: location 1102 is 1065
mem: storing 49 in location 1065
run: len:address:number/deref <- add len:address:number/deref, 1:literal
mem: location 1100 is 1062
mem: location 1062 is 0
mem: location 1100 is 1062
mem: storing 1 in location 1062
run: reply in:address:buffer/same-as-ingredient:0
mem: location 1097 is 1062
run: result 0 is 1062
mem: storing 1062 in location 1006
run: loop 
run: jumping to instruction 17
run: done?:boolean <- equal n:number, 0:literal
mem: location 1002 is 0
mem: storing 1 in location 1008
run: break-if done?:boolean, 
mem: location 1008 is 1
run: jumping to instruction 23
run: break-unless negate-result:boolean, 
mem: location 1004 is 1
run: jump-unless fell through
run: tmp:address:buffer <- buffer-append tmp:address:buffer, 45:literal
mem: location 1006 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1157
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1159
run: c:character <- next-ingredient 
mem: storing 45 in location 1160
run: full?:boolean <- buffer-full? in:address:buffer
mem: location 1159 is 1062
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1188
run: in:address:buffer <- next-ingredient 
mem: storing 1062 in location 1190
run: len:number <- get in:address:buffer/deref, length:offset
mem: location 1190 is 1062
mem: location 1062 is 1
mem: location 1063 is 1064
mem: location 1190 is 1062
run: address to copy is 1062
run: its type is 1
mem: location 1062 is 1
mem: storing 1 in location 1191
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1190 is 1062
mem: location 1062 is 1
mem: location 1063 is 1064
mem: location 1190 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1192
run: capacity:number <- length s:address:array:character/deref
mem: location 1192 is 1064
mem: location 1064 is 30
mem: location 1065 is 49
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1079 is 0
mem: location 1080 is 0
mem: location 1081 is 0
mem: location 1082 is 0
mem: location 1083 is 0
mem: location 1084 is 0
mem: location 1085 is 0
mem: location 1086 is 0
mem: location 1087 is 0
mem: location 1088 is 0
mem: location 1089 is 0
mem: location 1090 is 0
mem: location 1091 is 0
mem: location 1092 is 0
mem: location 1093 is 0
mem: location 1094 is 0
mem: location 1192 is 1064
mem: storing 30 in location 1193
run: result:boolean <- greater-or-equal len:number, capacity:number
mem: location 1191 is 1
mem: location 1193 is 30
mem: storing 0 in location 1194
run: reply result:boolean
mem: location 1194 is 0
run: result 0 is 0
mem: storing 0 in location 1161
run: break-unless full?:boolean, 
mem: location 1161 is 0
run: jumping to instruction 7
run: len:address:number <- get-address in:address:buffer/deref, length:offset
mem: location 1159 is 1062
mem: location 1062 is 1
mem: location 1063 is 1064
mem: location 1159 is 1062
run: address to copy is 1062
mem: storing 1062 in location 1162
run: s:address:array:character <- get in:address:buffer/deref, data:offset
mem: location 1159 is 1062
mem: location 1062 is 1
mem: location 1063 is 1064
mem: location 1159 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1163
run: dest:address:character <- index-address s:address:array:character/deref, len:address:number/deref
mem: location 1163 is 1064
mem: location 1064 is 30
mem: location 1065 is 49
mem: location 1066 is 0
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1079 is 0
mem: location 1080 is 0
mem: location 1081 is 0
mem: location 1082 is 0
mem: location 1083 is 0
mem: location 1084 is 0
mem: location 1085 is 0
mem: location 1086 is 0
mem: location 1087 is 0
mem: location 1088 is 0
mem: location 1089 is 0
mem: location 1090 is 0
mem: location 1091 is 0
mem: location 1092 is 0
mem: location 1093 is 0
mem: location 1094 is 0
mem: location 1162 is 1062
mem: location 1062 is 1
mem: location 1163 is 1064
mem: location 1162 is 1062
mem: location 1062 is 1
mem: storing 1066 in location 1164
run: dest:address:character/deref <- copy c:character
mem: location 1160 is 45
mem: location 1164 is 1066
mem: storing 45 in location 1066
run: len:address:number/deref <- add len:address:number/deref, 1:literal
mem: location 1162 is 1062
mem: location 1062 is 1
mem: location 1162 is 1062
mem: storing 2 in location 1062
run: reply in:address:buffer/same-as-ingredient:0
mem: location 1159 is 1062
run: result 0 is 1062
mem: storing 1062 in location 1006
run: len:number <- get tmp:address:buffer/deref, length:offset
mem: location 1006 is 1062
mem: location 1062 is 2
mem: location 1063 is 1064
mem: location 1006 is 1062
run: address to copy is 1062
run: its type is 1
mem: location 1062 is 2
mem: storing 2 in location 1011
run: buf:address:array:character <- get tmp:address:buffer/deref, data:offset
mem: location 1006 is 1062
mem: location 1062 is 2
mem: location 1063 is 1064
mem: location 1006 is 1062
run: address to copy is 1063
run: its type is 2
mem: location 1063 is 1064
mem: storing 1064 in location 1012
run: result:address:array:character <- new character:type, len:number
mem: location 1011 is 2
mem: array size is 2
mem: new alloc: 1219
mem: storing 1219 in location 1003
run: i:number <- subtract len:number, 1:literal
mem: location 1011 is 2
mem: storing 1 in location 1013
run: j:number <- copy 0:literal
mem: storing 0 in location 1014
run: done?:boolean <- lesser-than i:number, 0:literal
mem: location 1013 is 1
mem: storing 0 in location 1008
run: break-if done?:boolean, 
mem: location 1008 is 0
run: jump-if fell through
run: src:character <- index buf:address:array:character/deref, i:number
mem: location 1012 is 1064
mem: location 1064 is 30
mem: location 1065 is 49
mem: location 1066 is 45
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1079 is 0
mem: location 1080 is 0
mem: location 1081 is 0
mem: location 1082 is 0
mem: location 1083 is 0
mem: location 1084 is 0
mem: location 1085 is 0
mem: location 1086 is 0
mem: location 1087 is 0
mem: location 1088 is 0
mem: location 1089 is 0
mem: location 1090 is 0
mem: location 1091 is 0
mem: location 1092 is 0
mem: location 1093 is 0
mem: location 1094 is 0
mem: location 1013 is 1
mem: location 1012 is 1064
mem: location 1013 is 1
run: address to copy is 1066
run: its type is 4
mem: location 1066 is 45
mem: storing 45 in location 1015
run: dest:address:character <- index-address result:address:array:character/deref, j:number
mem: location 1003 is 1219
mem: location 1219 is 2
mem: location 1220 is 0
mem: location 1221 is 0
mem: location 1014 is 0
mem: location 1003 is 1219
mem: location 1014 is 0
mem: storing 1220 in location 1016
run: dest:address:character/deref <- copy src:character
mem: location 1015 is 45
mem: location 1016 is 1220
mem: storing 45 in location 1220
run: i:number <- subtract i:number, 1:literal
mem: location 1013 is 1
mem: storing 0 in location 1013
run: j:number <- add j:number, 1:literal
mem: location 1014 is 0
mem: storing 1 in location 1014
run: loop 
run: jumping to instruction 34
run: done?:boolean <- lesser-than i:number, 0:literal
mem: location 1013 is 0
mem: storing 0 in location 1008
run: break-if done?:boolean, 
mem: location 1008 is 0
run: jump-if fell through
run: src:character <- index buf:address:array:character/deref, i:number
mem: location 1012 is 1064
mem: location 1064 is 30
mem: location 1065 is 49
mem: location 1066 is 45
mem: location 1067 is 0
mem: location 1068 is 0
mem: location 1069 is 0
mem: location 1070 is 0
mem: location 1071 is 0
mem: location 1072 is 0
mem: location 1073 is 0
mem: location 1074 is 0
mem: location 1075 is 0
mem: location 1076 is 0
mem: location 1077 is 0
mem: location 1078 is 0
mem: location 1079 is 0
mem: location 1080 is 0
mem: location 1081 is 0
mem: location 1082 is 0
mem: location 1083 is 0
mem: location 1084 is 0
mem: location 1085 is 0
mem: location 1086 is 0
mem: location 1087 is 0
mem: location 1088 is 0
mem: location 1089 is 0
mem: location 1090 is 0
mem: location 1091 is 0
mem: location 1092 is 0
mem: location 1093 is 0
mem: location 1094 is 0
mem: location 1013 is 0
mem: location 1012 is 1064
mem: location 1013 is 0
run: address to copy is 1065
run: its type is 4
mem: location 1065 is 49
mem: storing 49 in location 1015
run: dest:address:character <- index-address result:address:array:character/deref, j:number
mem: location 1003 is 1219
mem: location 1219 is 2
mem: location 1220 is 45
mem: location 1221 is 0
mem: location 1014 is 1
mem: location 1003 is 1219
mem: location 1014 is 1
mem: storing 1221 in location 1016
run: dest:address:character/deref <- copy src:character
mem: location 1015 is 49
mem: location 1016 is 1221
mem: storing 49 in location 1221
run: i:number <- subtract i:number, 1:literal
mem: location 1013 is 0
mem: storing -1 in location 1013
run: j:number <- add j:number, 1:literal
mem: location 1014 is 1
mem: storing 2 in location 1014
run: loop 
run: jumping to instruction 34
run: done?:boolean <- lesser-than i:number, 0:literal
mem: location 1013 is -1
mem: storing 1 in location 1008
run: break-if done?:boolean, 
mem: location 1008 is 1
run: jumping to instruction 42
run: reply result:address:array:character
mem: location 1003 is 1219
run: result 0 is 1219
mem: storing 1219 in location 1
run: 2:array:character/raw <- copy 1:address:array:character/deref/raw
mem: location 1 is 1219
mem: location 1219 is 2
mem: location 1220 is 45
mem: location 1221 is 49
mem: storing 2 in location 2
mem: storing 45 in location 3
mem: storing 49 in location 4
run: memory-should-contain [
    2 <- 2
    3 <- 45  # '-'
    4 <- 49  # '1'
  ]
run: checking location 2
run: checking location 3
run: checking location 4
