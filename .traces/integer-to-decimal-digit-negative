9991 parse: --- defining scenario-integer-to-decimal-digit-negative
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:array:character/raw <- integer-to-decimal-string -1\n    2:array:character/raw <- copy *1:address:array:character/raw\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:array:character/raw <- integer-to-decimal-string -1
    2:array:character/raw <- copy *1:address:array:character/raw
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2 <- 2\n    3 <- 45  # '-'\n    4 <- 49  # '1'\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2 <- 2
    3 <- 45  # '-'
    4 <- 49  # '1'
  ]
9999 parse: recipe scenario-integer-to-decimal-digit-negative has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-integer-to-decimal-digit-negative
9991 transform: --- transform braces for recipe scenario-integer-to-decimal-digit-negative
9992 transform: run ...
9992 transform: memory-should-contain ...
9991 transform: --- deduce types for recipe scenario-integer-to-decimal-digit-negative
9991 transform: --- resolve ambiguous calls for recipe scenario-integer-to-decimal-digit-negative
9991 transform: --- collect surrounding spaces for recipe scenario-integer-to-decimal-digit-negative
9991 transform: --- transform names for recipe scenario-integer-to-decimal-digit-negative
9991 transform: --- compute instruction operations for recipe scenario-integer-to-decimal-digit-negative
9991 transform: --- perform checks for recipe scenario-integer-to-decimal-digit-negative
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-integer-to-decimal-digit-negative
9991 transform: --- parsing any uninitialized reagents as integers
9991 transform: --- checking type and type_name pointers for recipe string-equal
9991 transform: --- checking type and type_name pointers for recipe new-buffer
9991 transform: --- checking type and type_name pointers for recipe grow-buffer
9991 transform: --- checking type and type_name pointers for recipe buffer-full?
9991 transform: --- checking type and type_name pointers for recipe buffer-append
9991 transform: --- checking type and type_name pointers for recipe integer-to-decimal-string
9991 transform: --- checking type and type_name pointers for recipe buffer-to-array
9991 transform: --- checking type and type_name pointers for recipe string-append
9991 transform: --- checking type and type_name pointers for recipe string-replace
9991 transform: --- checking type and type_name pointers for recipe interpolate
9991 transform: --- checking type and type_name pointers for recipe space?
9991 transform: --- checking type and type_name pointers for recipe trim
9991 transform: --- checking type and type_name pointers for recipe find-next
9991 transform: --- checking type and type_name pointers for recipe find-substring
9991 transform: --- checking type and type_name pointers for recipe match-at
9991 transform: --- checking type and type_name pointers for recipe split
9991 transform: --- checking type and type_name pointers for recipe split-first
9991 transform: --- checking type and type_name pointers for recipe string-copy
9991 transform: --- checking type and type_name pointers for recipe min
9991 transform: --- checking type and type_name pointers for recipe max
9991 transform: --- checking type and type_name pointers for recipe new-channel
9991 transform: --- checking type and type_name pointers for recipe write
9991 transform: --- checking type and type_name pointers for recipe read
9991 transform: --- checking type and type_name pointers for recipe clear-channel
9991 transform: --- checking type and type_name pointers for recipe channel-empty?
9991 transform: --- checking type and type_name pointers for recipe channel-full?
9991 transform: --- checking type and type_name pointers for recipe channel-capacity
9991 transform: --- checking type and type_name pointers for recipe buffer-lines
9991 transform: --- checking type and type_name pointers for recipe new-array
9991 transform: --- checking type and type_name pointers for recipe force-specialization-list-number
9991 transform: --- checking type and type_name pointers for recipe force-specialization-duplex-list-character
9991 transform: --- checking type and type_name pointers for recipe new-stream
9991 transform: --- checking type and type_name pointers for recipe rewind-stream
9991 transform: --- checking type and type_name pointers for recipe read-line
9991 transform: --- checking type and type_name pointers for recipe end-of-stream?
9991 transform: --- checking type and type_name pointers for recipe new-fake-screen
9991 transform: --- checking type and type_name pointers for recipe clear-screen
9991 transform: --- checking type and type_name pointers for recipe sync-screen
9991 transform: --- checking type and type_name pointers for recipe fake-screen-is-empty?
9991 transform: --- checking type and type_name pointers for recipe print-character
9991 transform: --- checking type and type_name pointers for recipe clear-line
9991 transform: --- checking type and type_name pointers for recipe cursor-position
9991 transform: --- checking type and type_name pointers for recipe move-cursor
9991 transform: --- checking type and type_name pointers for recipe cursor-down
9991 transform: --- checking type and type_name pointers for recipe cursor-up
9991 transform: --- checking type and type_name pointers for recipe cursor-right
9991 transform: --- checking type and type_name pointers for recipe cursor-left
9991 transform: --- checking type and type_name pointers for recipe cursor-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe cursor-to-next-line
9991 transform: --- checking type and type_name pointers for recipe screen-width
9991 transform: --- checking type and type_name pointers for recipe screen-height
9991 transform: --- checking type and type_name pointers for recipe hide-cursor
9991 transform: --- checking type and type_name pointers for recipe show-cursor
9991 transform: --- checking type and type_name pointers for recipe hide-screen
9991 transform: --- checking type and type_name pointers for recipe show-screen
9991 transform: --- checking type and type_name pointers for recipe print-string
9991 transform: --- checking type and type_name pointers for recipe print-integer
9991 transform: --- checking type and type_name pointers for recipe new-fake-console
9991 transform: --- checking type and type_name pointers for recipe read-event
9991 transform: --- checking type and type_name pointers for recipe read-key
9991 transform: --- checking type and type_name pointers for recipe send-keys-to-channel
9991 transform: --- checking type and type_name pointers for recipe wait-for-event
9991 transform: --- checking type and type_name pointers for recipe has-more-events?
9991 transform: --- checking type and type_name pointers for recipe push_2
9991 transform: --- checking type and type_name pointers for recipe first_2
9991 transform: --- checking type and type_name pointers for recipe rest_2
9991 transform: --- checking type and type_name pointers for recipe push-duplex_2
9991 transform: --- checking type and type_name pointers for recipe first-duplex_2
9991 transform: --- checking type and type_name pointers for recipe next-duplex_2
9991 transform: --- checking type and type_name pointers for recipe prev-duplex_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex-between_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex-range_2
9991 transform: --- checking type and type_name pointers for recipe append-duplex_2
9991 transform: --- checking type and type_name pointers for recipe last-duplex_2
9991 transform: --- checking type and type_name pointers for recipe sandbox
9991 transform: --- checking type and type_name pointers for recipe main_2
9991 transform: --- checking type and type_name pointers for recipe new-editor
9991 transform: --- checking type and type_name pointers for recipe insert-text
9991 transform: --- checking type and type_name pointers for recipe render
9991 transform: --- checking type and type_name pointers for recipe clear-line-delimited
9991 transform: --- checking type and type_name pointers for recipe clear-screen-from
9991 transform: --- checking type and type_name pointers for recipe clear-rest-of-screen
9991 transform: --- checking type and type_name pointers for recipe get-color
9991 transform: --- checking type and type_name pointers for recipe editor-event-loop
9991 transform: --- checking type and type_name pointers for recipe move-cursor-in-editor
9991 transform: --- checking type and type_name pointers for recipe snap-cursor
9991 transform: --- checking type and type_name pointers for recipe handle-keyboard-event
9991 transform: --- checking type and type_name pointers for recipe insert-at-cursor
9991 transform: --- checking type and type_name pointers for recipe editor-render
9991 transform: --- checking type and type_name pointers for recipe insert-new-line-and-indent
9991 transform: --- checking type and type_name pointers for recipe line-indent
9991 transform: --- checking type and type_name pointers for recipe draw-horizontal
9991 transform: --- checking type and type_name pointers for recipe delete-before-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-left
9991 transform: --- checking type and type_name pointers for recipe previous-line-length
9991 transform: --- checking type and type_name pointers for recipe delete-at-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-right
9991 transform: --- checking type and type_name pointers for recipe move-to-previous-line
9991 transform: --- checking type and type_name pointers for recipe move-to-next-line
9991 transform: --- checking type and type_name pointers for recipe move-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe move-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe before-start-of-next-line
9991 transform: --- checking type and type_name pointers for recipe before-previous-line
9991 transform: --- checking type and type_name pointers for recipe page-down
9991 transform: --- checking type and type_name pointers for recipe page-up
9991 transform: --- checking type and type_name pointers for recipe new-programming-environment
9991 transform: --- checking type and type_name pointers for recipe event-loop
9991 transform: --- checking type and type_name pointers for recipe resize
9991 transform: --- checking type and type_name pointers for recipe render-all
9991 transform: --- checking type and type_name pointers for recipe render-recipes
9991 transform: --- checking type and type_name pointers for recipe render-sandbox-side
9991 transform: --- checking type and type_name pointers for recipe update-cursor
9991 transform: --- checking type and type_name pointers for recipe render-string
9991 transform: --- checking type and type_name pointers for recipe render-code-string
9991 transform: --- checking type and type_name pointers for recipe maximize
9991 transform: --- checking type and type_name pointers for recipe draw-vertical
9991 transform: --- checking type and type_name pointers for recipe run-sandboxes
9991 transform: --- checking type and type_name pointers for recipe update-recipes
9991 transform: --- checking type and type_name pointers for recipe update-sandbox
9991 transform: --- checking type and type_name pointers for recipe update-status
9991 transform: --- checking type and type_name pointers for recipe save-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-sandboxes
9991 transform: --- checking type and type_name pointers for recipe restore-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-screen
9991 transform: --- checking type and type_name pointers for recipe editor-contents
9991 transform: --- checking type and type_name pointers for recipe empty-editor?
9991 transform: --- checking type and type_name pointers for recipe extract-sandbox
9991 transform: --- checking type and type_name pointers for recipe delete-sandbox
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-output
9991 transform: --- checking type and type_name pointers for recipe toggle-expected-response
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-code
9991 transform: --- checking type and type_name pointers for recipe add-operation
9991 transform: --- checking type and type_name pointers for recipe first_3
9991 transform: --- checking type and type_name pointers for recipe rest_3
9991 transform: --- checking type and type_name pointers for recipe push_3
9991 transform: --- checking type and type_name pointers for recipe scenario-integer-to-decimal-digit-negative
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-integer-to-decimal-digit-negative
 102 run: run [
    1:address:array:character/raw <- integer-to-decimal-string -1
    2:array:character/raw <- copy *1:address:array:character/raw
  ]
9991 parse: --- defining run1001
9993 parse: instruction: integer-to-decimal-string
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"-1": "literal"}
9993 parse:   product: {"1": <"address" : <"array" : <"character" : <>>>>, "raw": <>}
9992 load: after rewriting: 1:address:array:character/raw <- integer-to-decimal-string -1
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"array" : <"character" : <>>>>, "raw": <>, "lookup": <>}
9993 parse:   product: {"2": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 2:array:character/raw <- copy *1:address:array:character/raw
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: integer-to-decimal-string ...
9992 transform: copy ...
9991 transform: --- deduce types for recipe run1001
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9991 transform: --- checking type and type_name pointers for recipe string-equal
9991 transform: --- checking type and type_name pointers for recipe new-buffer
9991 transform: --- checking type and type_name pointers for recipe grow-buffer
9991 transform: --- checking type and type_name pointers for recipe buffer-full?
9991 transform: --- checking type and type_name pointers for recipe buffer-append
9991 transform: --- checking type and type_name pointers for recipe integer-to-decimal-string
9991 transform: --- checking type and type_name pointers for recipe buffer-to-array
9991 transform: --- checking type and type_name pointers for recipe string-append
9991 transform: --- checking type and type_name pointers for recipe string-replace
9991 transform: --- checking type and type_name pointers for recipe interpolate
9991 transform: --- checking type and type_name pointers for recipe space?
9991 transform: --- checking type and type_name pointers for recipe trim
9991 transform: --- checking type and type_name pointers for recipe find-next
9991 transform: --- checking type and type_name pointers for recipe find-substring
9991 transform: --- checking type and type_name pointers for recipe match-at
9991 transform: --- checking type and type_name pointers for recipe split
9991 transform: --- checking type and type_name pointers for recipe split-first
9991 transform: --- checking type and type_name pointers for recipe string-copy
9991 transform: --- checking type and type_name pointers for recipe min
9991 transform: --- checking type and type_name pointers for recipe max
9991 transform: --- checking type and type_name pointers for recipe new-channel
9991 transform: --- checking type and type_name pointers for recipe write
9991 transform: --- checking type and type_name pointers for recipe read
9991 transform: --- checking type and type_name pointers for recipe clear-channel
9991 transform: --- checking type and type_name pointers for recipe channel-empty?
9991 transform: --- checking type and type_name pointers for recipe channel-full?
9991 transform: --- checking type and type_name pointers for recipe channel-capacity
9991 transform: --- checking type and type_name pointers for recipe buffer-lines
9991 transform: --- checking type and type_name pointers for recipe new-array
9991 transform: --- checking type and type_name pointers for recipe force-specialization-list-number
9991 transform: --- checking type and type_name pointers for recipe force-specialization-duplex-list-character
9991 transform: --- checking type and type_name pointers for recipe new-stream
9991 transform: --- checking type and type_name pointers for recipe rewind-stream
9991 transform: --- checking type and type_name pointers for recipe read-line
9991 transform: --- checking type and type_name pointers for recipe end-of-stream?
9991 transform: --- checking type and type_name pointers for recipe new-fake-screen
9991 transform: --- checking type and type_name pointers for recipe clear-screen
9991 transform: --- checking type and type_name pointers for recipe sync-screen
9991 transform: --- checking type and type_name pointers for recipe fake-screen-is-empty?
9991 transform: --- checking type and type_name pointers for recipe print-character
9991 transform: --- checking type and type_name pointers for recipe clear-line
9991 transform: --- checking type and type_name pointers for recipe cursor-position
9991 transform: --- checking type and type_name pointers for recipe move-cursor
9991 transform: --- checking type and type_name pointers for recipe cursor-down
9991 transform: --- checking type and type_name pointers for recipe cursor-up
9991 transform: --- checking type and type_name pointers for recipe cursor-right
9991 transform: --- checking type and type_name pointers for recipe cursor-left
9991 transform: --- checking type and type_name pointers for recipe cursor-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe cursor-to-next-line
9991 transform: --- checking type and type_name pointers for recipe screen-width
9991 transform: --- checking type and type_name pointers for recipe screen-height
9991 transform: --- checking type and type_name pointers for recipe hide-cursor
9991 transform: --- checking type and type_name pointers for recipe show-cursor
9991 transform: --- checking type and type_name pointers for recipe hide-screen
9991 transform: --- checking type and type_name pointers for recipe show-screen
9991 transform: --- checking type and type_name pointers for recipe print-string
9991 transform: --- checking type and type_name pointers for recipe print-integer
9991 transform: --- checking type and type_name pointers for recipe new-fake-console
9991 transform: --- checking type and type_name pointers for recipe read-event
9991 transform: --- checking type and type_name pointers for recipe read-key
9991 transform: --- checking type and type_name pointers for recipe send-keys-to-channel
9991 transform: --- checking type and type_name pointers for recipe wait-for-event
9991 transform: --- checking type and type_name pointers for recipe has-more-events?
9991 transform: --- checking type and type_name pointers for recipe push_2
9991 transform: --- checking type and type_name pointers for recipe first_2
9991 transform: --- checking type and type_name pointers for recipe rest_2
9991 transform: --- checking type and type_name pointers for recipe push-duplex_2
9991 transform: --- checking type and type_name pointers for recipe first-duplex_2
9991 transform: --- checking type and type_name pointers for recipe next-duplex_2
9991 transform: --- checking type and type_name pointers for recipe prev-duplex_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex_2
9991 transform: --- checking type and type_name pointers for recipe remove-duplex-between_2
9991 transform: --- checking type and type_name pointers for recipe insert-duplex-range_2
9991 transform: --- checking type and type_name pointers for recipe append-duplex_2
9991 transform: --- checking type and type_name pointers for recipe last-duplex_2
9991 transform: --- checking type and type_name pointers for recipe sandbox
9991 transform: --- checking type and type_name pointers for recipe main_2
9991 transform: --- checking type and type_name pointers for recipe new-editor
9991 transform: --- checking type and type_name pointers for recipe insert-text
9991 transform: --- checking type and type_name pointers for recipe render
9991 transform: --- checking type and type_name pointers for recipe clear-line-delimited
9991 transform: --- checking type and type_name pointers for recipe clear-screen-from
9991 transform: --- checking type and type_name pointers for recipe clear-rest-of-screen
9991 transform: --- checking type and type_name pointers for recipe get-color
9991 transform: --- checking type and type_name pointers for recipe editor-event-loop
9991 transform: --- checking type and type_name pointers for recipe move-cursor-in-editor
9991 transform: --- checking type and type_name pointers for recipe snap-cursor
9991 transform: --- checking type and type_name pointers for recipe handle-keyboard-event
9991 transform: --- checking type and type_name pointers for recipe insert-at-cursor
9991 transform: --- checking type and type_name pointers for recipe editor-render
9991 transform: --- checking type and type_name pointers for recipe insert-new-line-and-indent
9991 transform: --- checking type and type_name pointers for recipe line-indent
9991 transform: --- checking type and type_name pointers for recipe draw-horizontal
9991 transform: --- checking type and type_name pointers for recipe delete-before-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-left
9991 transform: --- checking type and type_name pointers for recipe previous-line-length
9991 transform: --- checking type and type_name pointers for recipe delete-at-cursor
9991 transform: --- checking type and type_name pointers for recipe move-cursor-coordinates-right
9991 transform: --- checking type and type_name pointers for recipe move-to-previous-line
9991 transform: --- checking type and type_name pointers for recipe move-to-next-line
9991 transform: --- checking type and type_name pointers for recipe move-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe move-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-start-of-line
9991 transform: --- checking type and type_name pointers for recipe delete-to-end-of-line
9991 transform: --- checking type and type_name pointers for recipe before-start-of-next-line
9991 transform: --- checking type and type_name pointers for recipe before-previous-line
9991 transform: --- checking type and type_name pointers for recipe page-down
9991 transform: --- checking type and type_name pointers for recipe page-up
9991 transform: --- checking type and type_name pointers for recipe new-programming-environment
9991 transform: --- checking type and type_name pointers for recipe event-loop
9991 transform: --- checking type and type_name pointers for recipe resize
9991 transform: --- checking type and type_name pointers for recipe render-all
9991 transform: --- checking type and type_name pointers for recipe render-recipes
9991 transform: --- checking type and type_name pointers for recipe render-sandbox-side
9991 transform: --- checking type and type_name pointers for recipe update-cursor
9991 transform: --- checking type and type_name pointers for recipe render-string
9991 transform: --- checking type and type_name pointers for recipe render-code-string
9991 transform: --- checking type and type_name pointers for recipe maximize
9991 transform: --- checking type and type_name pointers for recipe draw-vertical
9991 transform: --- checking type and type_name pointers for recipe run-sandboxes
9991 transform: --- checking type and type_name pointers for recipe update-recipes
9991 transform: --- checking type and type_name pointers for recipe update-sandbox
9991 transform: --- checking type and type_name pointers for recipe update-status
9991 transform: --- checking type and type_name pointers for recipe save-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-sandboxes
9991 transform: --- checking type and type_name pointers for recipe restore-sandboxes
9991 transform: --- checking type and type_name pointers for recipe render-screen
9991 transform: --- checking type and type_name pointers for recipe editor-contents
9991 transform: --- checking type and type_name pointers for recipe empty-editor?
9991 transform: --- checking type and type_name pointers for recipe extract-sandbox
9991 transform: --- checking type and type_name pointers for recipe delete-sandbox
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-output
9991 transform: --- checking type and type_name pointers for recipe toggle-expected-response
9991 transform: --- checking type and type_name pointers for recipe find-click-in-sandbox-code
9991 transform: --- checking type and type_name pointers for recipe add-operation
9991 transform: --- checking type and type_name pointers for recipe first_3
9991 transform: --- checking type and type_name pointers for recipe rest_3
9991 transform: --- checking type and type_name pointers for recipe push_3
9991 transform: --- checking type and type_name pointers for recipe scenario-integer-to-decimal-digit-negative
9991 transform: --- checking type and type_name pointers for recipe run1001
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:array:character/raw <- integer-to-decimal-string -1
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
9999 mem: new alloc: 1000
 104 run: n:number <- next-ingredient 
9999 mem: storing -1 in location 1002
 104 run: jump-if n, 
9999 mem: location 1002 is -1
9998 run: jumping to instruction 6
 104 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1004
 104 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1002 is -1
9999 mem: storing 1 in location 1005
 104 run: jump-unless negative?, 
9999 mem: location 1005 is 1
9998 run: jump-unless fell through
 104 run: negate-result <- copy 1
9999 mem: storing 1 in location 1004
 104 run: n <- multiply n, -1
9999 mem: location 1002 is -1
9999 mem: storing 1 in location 1002
 104 run: tmp:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1017
 105 run: result:address:buffer <- new buffer:type
9999 mem: new alloc: 1024
9999 mem: storing 1024 in location 1019
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1019 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1019 is 1024
9998 run: address to copy is 1024
9999 mem: storing 1024 in location 1020
 105 run: *len:address:number <- copy 0
9999 mem: location 1020 is 1024
9999 mem: storing 0 in location 1024
 105 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1019 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 0
9999 mem: location 1019 is 1024
9998 run: address to copy is 1025
9999 mem: storing 1025 in location 1021
 105 run: capacity:number, found?:boolean <- next-ingredient 
9999 mem: storing 30 in location 1022
9999 mem: storing 1 in location 1023
 105 run: assert found?, [new-buffer must get a capacity argument]
9999 mem: location 1023 is 1
 105 run: *s <- new character:type, capacity
9999 mem: location 1022 is 30
9999 mem: array size is 30
9999 mem: new alloc: 1026
9999 mem: location 1021 is 1025
9999 mem: storing 1026 in location 1025
 105 run: reply result
9999 mem: location 1019 is 1024
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1024
9999 mem: storing 1024 in location 1006
 104 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1007
 104 run: done?:boolean <- equal n, 0
9999 mem: location 1002 is 1
9999 mem: storing 0 in location 1008
 104 run: jump-if done?, 
9999 mem: location 1008 is 0
9998 run: jump-if fell through
 104 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1002 is 1
9999 mem: storing 0 in location 1002
9999 mem: storing 1 in location 1009
 104 run: c:character <- add digit-base, digit
9999 mem: location 1007 is 48
9999 mem: location 1009 is 1
9999 mem: storing 49 in location 1010
 104 run: tmp:address:buffer <- buffer-append tmp, c
9999 mem: location 1006 is 1024
9999 mem: location 1010 is 49
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1057
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1024 in location 1059
 105 run: c:character <- next-ingredient 
9999 mem: storing 49 in location 1060
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1059 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 1026
9999 mem: location 1059 is 1024
9998 run: address to copy is 1024
9999 mem: storing 1024 in location 1061
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1060 is 49
9999 mem: storing 0 in location 1062
 105 run: jump-unless backspace?, 
9999 mem: location 1062 is 0
9998 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 1059 is 1024
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 106 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1024 in location 1019
 106 run: len:number <- get *in, length:offset
9999 mem: location 1019 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 1026
9999 mem: location 1019 is 1024
9998 run: address to copy is 1024
9998 run: its type is number
9999 mem: location 1024 is 0
9999 mem: storing 0 in location 1020
 106 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1019 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 1026
9999 mem: location 1019 is 1024
9998 run: address to copy is 1025
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1025 is 1026
9999 mem: storing 1026 in location 1021
 106 run: capacity:number <- length *s
9999 mem: location 1021 is 1026
9999 mem: storing 30 in location 1022
 106 run: result:boolean <- greater-or-equal len, capacity
9999 mem: location 1020 is 0
9999 mem: location 1022 is 30
9999 mem: storing 0 in location 1023
 106 run: reply result
9999 mem: location 1023 is 0
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1064
 105 run: jump-unless full?, 
9999 mem: location 1064 is 0
9998 run: jumping to instruction 17
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1059 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1025 is 1026
9999 mem: location 1059 is 1024
9998 run: address to copy is 1025
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1025 is 1026
9999 mem: storing 1026 in location 1065
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 1065 is 1026
9999 mem: location 1061 is 1024
9999 mem: location 1024 is 0
9999 mem: storing 1027 in location 1066
 105 run: *dest <- copy c
9999 mem: location 1060 is 49
9999 mem: location 1066 is 1027
9999 mem: storing 49 in location 1027
 105 run: *len <- add *len, 1
9999 mem: location 1061 is 1024
9999 mem: location 1024 is 0
9999 mem: location 1061 is 1024
9999 mem: storing 1 in location 1024
 105 run: reply in/same-as-ingredient:0
9999 mem: location 1059 is 1024
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1024
9999 mem: storing 1024 in location 1006
 104 run: jump 
9998 run: jumping to instruction 17
 104 run: done?:boolean <- equal n, 0
9999 mem: location 1002 is 0
9999 mem: storing 1 in location 1008
 104 run: jump-if done?, 
9999 mem: location 1008 is 1
9998 run: jumping to instruction 23
 104 run: jump-unless negate-result:boolean, 
9999 mem: location 1004 is 1
9998 run: jump-unless fell through
 104 run: tmp <- buffer-append tmp, 45
9999 mem: location 1006 is 1024
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1024 in location 1059
 105 run: c:character <- next-ingredient 
9999 mem: storing 45 in location 1060
 105 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1059 is 1024
9999 mem: location 1024 is 1
9999 mem: location 1025 is 1026
9999 mem: location 1059 is 1024
9998 run: address to copy is 1024
9999 mem: storing 1024 in location 1061
 105 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1060 is 45
9999 mem: storing 0 in location 1062
 105 run: jump-unless backspace?, 
9999 mem: location 1062 is 0
9998 run: jumping to instruction 12
 105 run: full?:boolean <- buffer-full? in
9999 mem: location 1059 is 1024
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 106 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1024 in location 1019
 106 run: len:number <- get *in, length:offset
9999 mem: location 1019 is 1024
9999 mem: location 1024 is 1
9999 mem: location 1025 is 1026
9999 mem: location 1019 is 1024
9998 run: address to copy is 1024
9998 run: its type is number
9999 mem: location 1024 is 1
9999 mem: storing 1 in location 1020
 106 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1019 is 1024
9999 mem: location 1024 is 1
9999 mem: location 1025 is 1026
9999 mem: location 1019 is 1024
9998 run: address to copy is 1025
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1025 is 1026
9999 mem: storing 1026 in location 1021
 106 run: capacity:number <- length *s
9999 mem: location 1021 is 1026
9999 mem: storing 30 in location 1022
 106 run: result:boolean <- greater-or-equal len, capacity
9999 mem: location 1020 is 1
9999 mem: location 1022 is 30
9999 mem: storing 0 in location 1023
 106 run: reply result
9999 mem: location 1023 is 0
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 0
9999 mem: storing 0 in location 1064
 105 run: jump-unless full?, 
9999 mem: location 1064 is 0
9998 run: jumping to instruction 17
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1059 is 1024
9999 mem: location 1024 is 1
9999 mem: location 1025 is 1026
9999 mem: location 1059 is 1024
9998 run: address to copy is 1025
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1025 is 1026
9999 mem: storing 1026 in location 1065
 105 run: dest:address:character <- index-address *s, *len
9999 mem: location 1065 is 1026
9999 mem: location 1061 is 1024
9999 mem: location 1024 is 1
9999 mem: storing 1028 in location 1066
 105 run: *dest <- copy c
9999 mem: location 1060 is 45
9999 mem: location 1066 is 1028
9999 mem: storing 45 in location 1028
 105 run: *len <- add *len, 1
9999 mem: location 1061 is 1024
9999 mem: location 1024 is 1
9999 mem: location 1061 is 1024
9999 mem: storing 2 in location 1024
 105 run: reply in/same-as-ingredient:0
9999 mem: location 1059 is 1024
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1024
9999 mem: storing 1024 in location 1006
 104 run: len:number <- get *tmp, length:offset
9999 mem: location 1006 is 1024
9999 mem: location 1024 is 2
9999 mem: location 1025 is 1026
9999 mem: location 1006 is 1024
9998 run: address to copy is 1024
9998 run: its type is number
9999 mem: location 1024 is 2
9999 mem: storing 2 in location 1011
 104 run: buf:address:array:character <- get *tmp, data:offset
9999 mem: location 1006 is 1024
9999 mem: location 1024 is 2
9999 mem: location 1025 is 1026
9999 mem: location 1006 is 1024
9998 run: address to copy is 1025
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1025 is 1026
9999 mem: storing 1026 in location 1012
 104 run: result:address:array:character <- new character:type, len
9999 mem: location 1011 is 2
9999 mem: array size is 2
9999 mem: new alloc: 1067
9999 mem: storing 1067 in location 1003
 104 run: i:number <- subtract len, 1
9999 mem: location 1011 is 2
9999 mem: storing 1 in location 1013
 104 run: j:number <- copy 0
9999 mem: storing 0 in location 1014
 104 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1013 is 1
9999 mem: storing 0 in location 1008
 104 run: jump-if done?, 
9999 mem: location 1008 is 0
9998 run: jump-if fell through
 104 run: src:character <- index *buf, i
9999 mem: location 1012 is 1026
9999 mem: location 1013 is 1
9998 run: address to copy is 1028
9998 run: its type is character
9999 mem: location 1028 is 45
9999 mem: storing 45 in location 1015
 104 run: dest:address:character <- index-address *result, j
9999 mem: location 1003 is 1067
9999 mem: location 1014 is 0
9999 mem: storing 1068 in location 1016
 104 run: *dest <- copy src
9999 mem: location 1015 is 45
9999 mem: location 1016 is 1068
9999 mem: storing 45 in location 1068
 104 run: i <- subtract i, 1
9999 mem: location 1013 is 1
9999 mem: storing 0 in location 1013
 104 run: j <- add j, 1
9999 mem: location 1014 is 0
9999 mem: storing 1 in location 1014
 104 run: jump 
9998 run: jumping to instruction 34
 104 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1013 is 0
9999 mem: storing 0 in location 1008
 104 run: jump-if done?, 
9999 mem: location 1008 is 0
9998 run: jump-if fell through
 104 run: src:character <- index *buf, i
9999 mem: location 1012 is 1026
9999 mem: location 1013 is 0
9998 run: address to copy is 1027
9998 run: its type is character
9999 mem: location 1027 is 49
9999 mem: storing 49 in location 1015
 104 run: dest:address:character <- index-address *result, j
9999 mem: location 1003 is 1067
9999 mem: location 1014 is 1
9999 mem: storing 1069 in location 1016
 104 run: *dest <- copy src
9999 mem: location 1015 is 49
9999 mem: location 1016 is 1069
9999 mem: storing 49 in location 1069
 104 run: i <- subtract i, 1
9999 mem: location 1013 is 0
9999 mem: storing -1 in location 1013
 104 run: j <- add j, 1
9999 mem: location 1014 is 1
9999 mem: storing 2 in location 1014
 104 run: jump 
9998 run: jumping to instruction 34
 104 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1013 is -1
9999 mem: storing 1 in location 1008
 104 run: jump-if done?, 
9999 mem: location 1008 is 1
9998 run: jumping to instruction 42
 104 run: reply result
9999 mem: location 1003 is 1067
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1067
9999 mem: storing 1067 in location 1
 103 run: 2:array:character/raw <- copy *1:address:array:character/raw
9999 mem: location 1 is 1067
9999 mem: location 1067 is 2
9999 mem: location 1068 is 45
9999 mem: location 1069 is 49
9999 mem: storing 2 in location 2
9999 mem: storing 45 in location 3
9999 mem: storing 49 in location 4
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 2
    3 <- 45  # '-'
    4 <- 49  # '1'
  ]
9999 run: checking location 2
9999 run: checking location 3
9999 run: checking location 4
9999 trace: fall-through: exiting scenario-integer-to-decimal-digit-negative; decrementing callstack depth from 1
