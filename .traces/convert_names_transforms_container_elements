parse: instruction: copy
parse:   ingredient: {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
parse:   product: {name: "p", value: 0, type: 2-6, properties: ["p": "address":"point"]}
parse: instruction: get
parse:   ingredient: {name: "p", value: 0, type: 2-6, properties: ["p": "address":"point", "deref": ]}
parse:   ingredient: {name: "y", value: 0, type: 0, properties: ["y": "offset"]}
parse:   product: {name: "a", value: 0, type: 1, properties: ["a": "number"]}
parse: instruction: get
parse:   ingredient: {name: "p", value: 0, type: 2-6, properties: ["p": "address":"point", "deref": ]}
parse:   ingredient: {name: "x", value: 0, type: 0, properties: ["x": "offset"]}
parse:   product: {name: "b", value: 0, type: 1, properties: ["b": "number"]}
name: assign p 1
name: element y of type point is at offset 1
name: assign a 2
name: element x of type point is at offset 0
name: assign b 3
after-brace: recipe main
after-brace: copy ...
after-brace: get ...
after-brace: get ...
new: routine allocated memory from 1000 to 101000
schedule: main
run: instruction main/0
run: {name: "p", value: 1, type: 2-6, properties: ["p": "address":"point"]} <- copy/1 {name: "0", value: 0, type: 0, properties: ["0": "literal"]}
run: ingredient 0 is 0
run: product 0 is p
mem: storing 0 in location 1
run: instruction main/1
run: {name: "a", value: 2, type: 1, properties: ["a": "number"]} <- get/28 {name: "p", value: 1, type: 2-6, properties: ["p": "address":"point", "deref": ]}, {name: "y", value: 1, type: 0, properties: ["y": "offset"]}
run: ingredient 0 is p
mem: location 1 is 0
mem: location 0 is 0
mem: location 1 is 0
run: ingredient 1 is y
mem: location 1 is 0
run: address to copy is 1
run: its type is 1
mem: location 1 is 0
run: product 0 is a
mem: storing 0 in location 2
run: instruction main/2
run: {name: "b", value: 3, type: 1, properties: ["b": "number"]} <- get/28 {name: "p", value: 1, type: 2-6, properties: ["p": "address":"point", "deref": ]}, {name: "x", value: 0, type: 0, properties: ["x": "offset"]}
run: ingredient 0 is p
mem: location 1 is 0
mem: location 0 is 0
mem: location 1 is 0
run: ingredient 1 is x
mem: location 1 is 0
run: address to copy is 0
run: its type is 1
mem: location 0 is 0
run: product 0 is b
mem: storing 0 in location 3
