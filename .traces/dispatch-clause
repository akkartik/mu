schedule: main
run: -- nil
run: 1 main 0: ((1 tagged-value-address) <- new-tagged-value (integer literal) (34 literal))
run: -- nil
run: 2 new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1000 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1000 30))
run: 3 new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer 34)
run: integer => (1 type)
setm: (1 type) <= integer
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1000
setm: size of (1 type) is 1
setm: (1 type): setting 1001 to integer
run: -- ((1000 30) (1001 integer))
run: 4 new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1000
sizeof: integer
run: 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1000
setm: size of (2 integer) is 1
setm: (2 integer): setting 1002 to 1
run: -- ((1000 30) (1001 integer) (1002 1))
run: 5 new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1000
run: t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1000
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1003 to t
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t))
run: 6 new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1000
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t))
run: 7 new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1031 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1031
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1000
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1004 to 1031
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031))
run: 8 new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1000
addr: deref 1004 => 1031
record-info: initial base 1031 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1031
run: 1031 => (5 location)
setm: (5 location) <= 1031
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
setm: size of (5 location) is 1
setm: (5 location): setting 1005 to 1031
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031))
run: 9 new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1000
run: integer => (5 location deref)
setm: (5 location deref) <= integer
sz: (5 location deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1000
sz: (1031 location)
addr: (5 location deref)
addr: initial result: 5
addr: incrementing by 1000
addr: deref 1005 => 1031
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1031 to integer
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1031 integer))
run: 10 new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1000
addr: deref 1004 => 1031
record-info: initial base 1031 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (1 offset) => 1032
run: 1032 => (6 location)
setm: (6 location) <= 1032
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
setm: size of (6 location) is 1
setm: (6 location): setting 1006 to 1032
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer))
run: 11 new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer 34)
run: 34 => (6 location deref)
setm: (6 location deref) <= 34
sz: (6 location deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1000
sz: (1032 location)
addr: (6 location deref)
addr: initial result: 6
addr: incrementing by 1000
addr: deref 1006 => 1032
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1032 to 34
run: -- ((1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34))
run: 12 new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1000
reply: ((4 tagged-value-address)) ((1 tagged-value-address))
reply: 1031 => (1 tagged-value-address)
setm: (1 tagged-value-address) <= 1031
sz: (1 tagged-value-address)
addr: (1 tagged-value-address)
addr: initial result: 1
setm: size of (1 tagged-value-address) is 1
setm: (1 tagged-value-address): setting 1 to 1031
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34))
run: 13 main 1: ((2 tagged-value-address) <- new-tagged-value (integer literal) (3 literal))
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34))
run: 14 new-tagged-value 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1033 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30))
run: 15 new-tagged-value 1: ((1 type) <- arg)
arg: nil 0 (integer 3)
run: integer => (1 type)
setm: (1 type) <= integer
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1033
setm: size of (1 type) is 1
setm: (1 type): setting 1034 to integer
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer))
run: 16 new-tagged-value 2: ((2 integer) <- sizeof (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1033
sizeof: integer
run: 1 => (2 integer)
setm: (2 integer) <= 1
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1033
setm: size of (2 integer) is 1
setm: (2 integer): setting 1035 to 1
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1))
run: 17 new-tagged-value 3: ((3 boolean) <- eq (2 integer) (1 literal))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1033
run: t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1033
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1036 to t
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t))
run: 18 new-tagged-value 4: (assert (3 boolean))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1033
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t))
run: 19 new-tagged-value 5: ((4 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1064 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1064
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1033
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1037 to 1064
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064))
run: 20 new-tagged-value 6: ((5 location) <- get-address (4 tagged-value-address deref) (0 offset))
record-info: (4 tagged-value-address deref) (0 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1033
addr: deref 1037 => 1064
record-info: initial base 1064 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (0 offset) => 1064
run: 1064 => (5 location)
setm: (5 location) <= 1064
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1033
setm: size of (5 location) is 1
setm: (5 location): setting 1038 to 1064
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064))
run: 21 new-tagged-value 7: ((5 location deref) <- copy (1 type))
m: (1 type)
sz: (1 type)
addr: (1 type)
addr: initial result: 1
addr: incrementing by 1033
run: integer => (5 location deref)
setm: (5 location deref) <= integer
sz: (5 location deref)
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1033
sz: (1064 location)
addr: (5 location deref)
addr: initial result: 5
addr: incrementing by 1033
addr: deref 1038 => 1064
setm: size of (5 location deref) is 1
setm: (5 location deref): setting 1064 to integer
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1064 integer))
run: 22 new-tagged-value 8: ((6 location) <- get-address (4 tagged-value-address deref) (1 offset))
record-info: (4 tagged-value-address deref) (1 offset)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1033
addr: deref 1037 => 1064
record-info: initial base 1064 type ((address t) (elem tagged-value) (size 1))
record-info: (4 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get-address: (4 tagged-value-address deref) (1 offset) => 1065
run: 1065 => (6 location)
setm: (6 location) <= 1065
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1033
setm: size of (6 location) is 1
setm: (6 location): setting 1039 to 1065
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer))
run: 23 new-tagged-value 9: ((6 location deref) <- arg)
arg: nil 1 (integer 3)
run: 3 => (6 location deref)
setm: (6 location deref) <= 3
sz: (6 location deref)
m: (6 location)
sz: (6 location)
addr: (6 location)
addr: initial result: 6
addr: incrementing by 1033
sz: (1065 location)
addr: (6 location deref)
addr: initial result: 6
addr: incrementing by 1033
addr: deref 1039 => 1065
setm: size of (6 location deref) is 1
setm: (6 location deref): setting 1065 to 3
run: -- ((1 1031) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3))
run: 24 new-tagged-value 10: (reply (4 tagged-value-address))
m: (4 tagged-value-address)
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1033
reply: ((4 tagged-value-address)) ((2 tagged-value-address))
reply: 1064 => (2 tagged-value-address)
setm: (2 tagged-value-address) <= 1064
sz: (2 tagged-value-address)
addr: (2 tagged-value-address)
addr: initial result: 2
setm: size of (2 tagged-value-address) is 1
setm: (2 tagged-value-address): setting 2 to 1064
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3))
run: 25 main 2: ((3 integer) <- test1 (1 tagged-value-address) (2 tagged-value-address))
m: (1 tagged-value-address)
sz: (1 tagged-value-address)
addr: (1 tagged-value-address)
addr: initial result: 1
m: (2 tagged-value-address)
sz: (2 tagged-value-address)
addr: (2 tagged-value-address)
addr: initial result: 2
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3))
run: 26 test1 0: ((default-scope scope-address) <- new (scope literal) (20 literal))
sizeof: location
run: 1066 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20))
run: 27 test1 1: ((1 tagged-value-address) <- arg)
arg: nil 0 (1031 1064)
run: 1031 => (1 tagged-value-address)
setm: (1 tagged-value-address) <= 1031
sz: (1 tagged-value-address)
addr: (1 tagged-value-address)
addr: initial result: 1
addr: incrementing by 1066
setm: size of (1 tagged-value-address) is 1
setm: (1 tagged-value-address): setting 1067 to 1031
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031))
run: 28 test1 2: ((2 integer) (3 boolean) <- maybe-coerce (1 tagged-value-address deref) (integer literal))
m: (1 tagged-value-address deref)
sz: (1 tagged-value-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1066
sz: (1031 tagged-value)
addr: (1 tagged-value-address deref)
addr: initial result: 1
addr: incrementing by 1066
addr: deref 1067 => 1031
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031))
run: 29 maybe-coerce 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1087 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30))
run: 30 maybe-coerce 1: ((1 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1118 => (1 tagged-value-address)
setm: (1 tagged-value-address) <= 1118
sz: (1 tagged-value-address)
addr: (1 tagged-value-address)
addr: initial result: 1
addr: incrementing by 1087
setm: size of (1 tagged-value-address) is 1
setm: (1 tagged-value-address): setting 1088 to 1118
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118))
run: 31 maybe-coerce 2: ((1 tagged-value-address deref) <- arg)
arg: nil 0 (#(tagged record (integer 34 . nil)) integer)
run: #(tagged record (integer 34 . nil)) => (1 tagged-value-address deref)
setm: (1 tagged-value-address deref) <= #(tagged record (integer 34 . nil))
sz: (1 tagged-value-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1087
sz: (1118 tagged-value)
addr: (1 tagged-value-address deref)
addr: initial result: 1
addr: incrementing by 1087
addr: deref 1088 => 1118
setm: size of (1 tagged-value-address deref) is 2
setm: (1 tagged-value-address deref): setting 1118 to integer
setm: (1 tagged-value-address deref): setting 1119 to 34
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1118 integer) (1119 34))
run: 32 maybe-coerce 3: ((2 type) <- arg)
arg: nil 1 (#(tagged record (integer 34 . nil)) integer)
run: integer => (2 type)
setm: (2 type) <= integer
sz: (2 type)
addr: (2 type)
addr: initial result: 2
addr: incrementing by 1087
setm: size of (2 type) is 1
setm: (2 type): setting 1089 to integer
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1089 integer) (1118 integer) (1119 34))
run: 33 maybe-coerce 4: ((3 type) <- get (1 tagged-value-address deref) (0 offset))
record-info: (1 tagged-value-address deref) (0 offset)
addr: (1 tagged-value-address deref)
addr: initial result: 1
addr: incrementing by 1087
addr: deref 1088 => 1118
record-info: initial base 1118 type ((address t) (elem tagged-value) (size 1))
record-info: (1 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get: (1 tagged-value-address deref) (0 offset) => 1118 type
m: (1118 type global)
sz: (1118 type global)
addr: (1118 type global)
addr: initial result: 1118
run: integer => (3 type)
setm: (3 type) <= integer
sz: (3 type)
addr: (3 type)
addr: initial result: 3
addr: incrementing by 1087
setm: size of (3 type) is 1
setm: (3 type): setting 1090 to integer
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1118 integer) (1119 34))
run: 34 maybe-coerce 5: ((4 boolean) <- eq (3 type) (2 type))
m: (3 type)
sz: (3 type)
addr: (3 type)
addr: initial result: 3
addr: incrementing by 1087
m: (2 type)
sz: (2 type)
addr: (2 type)
addr: initial result: 2
addr: incrementing by 1087
run: t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1087
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1091 to t
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1118 integer) (1119 34))
run: 35 maybe-coerce 6: (jump-if (4 boolean) (1 offset))
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1087
jump: checking that t is t
jump: jumping to 8
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1118 integer) (1119 34))
run: 36 maybe-coerce 8: ((5 location) <- get (1 tagged-value-address deref) (1 offset))
record-info: (1 tagged-value-address deref) (1 offset)
addr: (1 tagged-value-address deref)
addr: initial result: 1
addr: incrementing by 1087
addr: deref 1088 => 1118
record-info: initial base 1118 type ((address t) (elem tagged-value) (size 1))
record-info: (1 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get: (1 tagged-value-address deref) (1 offset) => 1119 location
m: (1119 location global)
sz: (1119 location global)
addr: (1119 location global)
addr: initial result: 1119
run: 34 => (5 location)
setm: (5 location) <= 34
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1087
setm: size of (5 location) is 1
setm: (5 location): setting 1092 to 34
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34))
run: 37 maybe-coerce 9: (reply (5 location) (4 boolean))
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1087
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1087
reply: ((5 location) (4 boolean)) ((2 integer) (3 boolean))
reply: 34 => (2 integer)
setm: (2 integer) <= 34
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1066
setm: size of (2 integer) is 1
setm: (2 integer): setting 1068 to 34
reply: t => (3 boolean)
setm: (3 boolean) <= t
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1066
setm: size of (3 boolean) is 1
setm: (3 boolean): setting 1069 to t
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34))
run: 38 test1 3: (jump-unless (3 boolean) (4 offset))
m: (3 boolean)
sz: (3 boolean)
addr: (3 boolean)
addr: initial result: 3
addr: incrementing by 1066
jump: checking that t is not t
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34))
run: 39 test1 4: ((4 tagged-value-address) <- arg)
arg: nil 1 (1031 1064)
run: 1064 => (4 tagged-value-address)
setm: (4 tagged-value-address) <= 1064
sz: (4 tagged-value-address)
addr: (4 tagged-value-address)
addr: initial result: 4
addr: incrementing by 1066
setm: size of (4 tagged-value-address) is 1
setm: (4 tagged-value-address): setting 1070 to 1064
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34))
run: 40 test1 5: ((5 integer) <- maybe-coerce (4 tagged-value-address deref) (integer literal))
m: (4 tagged-value-address deref)
sz: (4 tagged-value-address deref)
m: (4 location)
sz: (4 location)
addr: (4 location)
addr: initial result: 4
addr: incrementing by 1066
sz: (1064 tagged-value)
addr: (4 tagged-value-address deref)
addr: initial result: 4
addr: incrementing by 1066
addr: deref 1070 => 1064
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34))
run: 41 maybe-coerce 0: ((default-scope scope-address) <- new (scope literal) (30 literal))
sizeof: location
run: 1120 => (default-scope scope-address)
sz: (default-scope scope-address)
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30))
run: 42 maybe-coerce 1: ((1 tagged-value-address) <- new (tagged-value literal))
sizeof: tagged-value
sizeof: type
sizeof: location
run: 1151 => (1 tagged-value-address)
setm: (1 tagged-value-address) <= 1151
sz: (1 tagged-value-address)
addr: (1 tagged-value-address)
addr: initial result: 1
addr: incrementing by 1120
setm: size of (1 tagged-value-address) is 1
setm: (1 tagged-value-address): setting 1121 to 1151
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151))
run: 43 maybe-coerce 2: ((1 tagged-value-address deref) <- arg)
arg: nil 0 (#(tagged record (integer 3 . nil)) integer)
run: #(tagged record (integer 3 . nil)) => (1 tagged-value-address deref)
setm: (1 tagged-value-address deref) <= #(tagged record (integer 3 . nil))
sz: (1 tagged-value-address deref)
m: (1 location)
sz: (1 location)
addr: (1 location)
addr: initial result: 1
addr: incrementing by 1120
sz: (1151 tagged-value)
addr: (1 tagged-value-address deref)
addr: initial result: 1
addr: incrementing by 1120
addr: deref 1121 => 1151
setm: size of (1 tagged-value-address deref) is 2
setm: (1 tagged-value-address deref): setting 1151 to integer
setm: (1 tagged-value-address deref): setting 1152 to 3
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1151 integer) (1152 3))
run: 44 maybe-coerce 3: ((2 type) <- arg)
arg: nil 1 (#(tagged record (integer 3 . nil)) integer)
run: integer => (2 type)
setm: (2 type) <= integer
sz: (2 type)
addr: (2 type)
addr: initial result: 2
addr: incrementing by 1120
setm: size of (2 type) is 1
setm: (2 type): setting 1122 to integer
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1151 integer) (1152 3))
run: 45 maybe-coerce 4: ((3 type) <- get (1 tagged-value-address deref) (0 offset))
record-info: (1 tagged-value-address deref) (0 offset)
addr: (1 tagged-value-address deref)
addr: initial result: 1
addr: incrementing by 1120
addr: deref 1121 => 1151
record-info: initial base 1151 type ((address t) (elem tagged-value) (size 1))
record-info: (1 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get: (1 tagged-value-address deref) (0 offset) => 1151 type
m: (1151 type global)
sz: (1151 type global)
addr: (1151 type global)
addr: initial result: 1151
run: integer => (3 type)
setm: (3 type) <= integer
sz: (3 type)
addr: (3 type)
addr: initial result: 3
addr: incrementing by 1120
setm: size of (3 type) is 1
setm: (3 type): setting 1123 to integer
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1151 integer) (1152 3))
run: 46 maybe-coerce 5: ((4 boolean) <- eq (3 type) (2 type))
m: (3 type)
sz: (3 type)
addr: (3 type)
addr: initial result: 3
addr: incrementing by 1120
m: (2 type)
sz: (2 type)
addr: (2 type)
addr: initial result: 2
addr: incrementing by 1120
run: t => (4 boolean)
setm: (4 boolean) <= t
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1120
setm: size of (4 boolean) is 1
setm: (4 boolean): setting 1124 to t
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1124 t) (1151 integer) (1152 3))
run: 47 maybe-coerce 6: (jump-if (4 boolean) (1 offset))
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1120
jump: checking that t is t
jump: jumping to 8
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1124 t) (1151 integer) (1152 3))
run: 48 maybe-coerce 8: ((5 location) <- get (1 tagged-value-address deref) (1 offset))
record-info: (1 tagged-value-address deref) (1 offset)
addr: (1 tagged-value-address deref)
addr: initial result: 1
addr: incrementing by 1120
addr: deref 1121 => 1151
record-info: initial base 1151 type ((address t) (elem tagged-value) (size 1))
record-info: (1 tagged-value-address deref) requests deref => ((elems (type location)) (fields (type payload)) (record t) (size 2))
get: (1 tagged-value-address deref) (1 offset) => 1152 location
m: (1152 location global)
sz: (1152 location global)
addr: (1152 location global)
addr: initial result: 1152
run: 3 => (5 location)
setm: (5 location) <= 3
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1120
setm: size of (5 location) is 1
setm: (5 location): setting 1125 to 3
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1124 t) (1125 3) (1151 integer) (1152 3))
run: 49 maybe-coerce 9: (reply (5 location) (4 boolean))
m: (5 location)
sz: (5 location)
addr: (5 location)
addr: initial result: 5
addr: incrementing by 1120
m: (4 boolean)
sz: (4 boolean)
addr: (4 boolean)
addr: initial result: 4
addr: incrementing by 1120
reply: ((5 location) (4 boolean)) ((5 integer))
reply: 3 => (5 integer)
setm: (5 integer) <= 3
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1066
setm: size of (5 integer) is 1
setm: (5 integer): setting 1071 to 3
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1071 3) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1124 t) (1125 3) (1151 integer) (1152 3))
run: 50 test1 6: ((6 integer) <- add (2 integer) (5 integer))
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1066
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1066
add: 34 3
m: (2 integer)
sz: (2 integer)
addr: (2 integer)
addr: initial result: 2
addr: incrementing by 1066
m: (5 integer)
sz: (5 integer)
addr: (5 integer)
addr: initial result: 5
addr: incrementing by 1066
run: 37 => (6 integer)
setm: (6 integer) <= 37
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1066
setm: size of (6 integer) is 1
setm: (6 integer): setting 1072 to 37
run: -- ((1 1031) (2 1064) (1000 30) (1001 integer) (1002 1) (1003 t) (1004 1031) (1005 1031) (1006 1032) (1031 integer) (1032 34) (1033 30) (1034 integer) (1035 1) (1036 t) (1037 1064) (1038 1064) (1039 1065) (1064 integer) (1065 3) (1066 20) (1067 1031) (1068 34) (1069 t) (1070 1064) (1071 3) (1072 37) (1087 30) (1088 1118) (1089 integer) (1090 integer) (1091 t) (1092 34) (1118 integer) (1119 34) (1120 30) (1121 1151) (1122 integer) (1123 integer) (1124 t) (1125 3) (1151 integer) (1152 3))
run: 51 test1 7: (reply (6 integer))
m: (6 integer)
sz: (6 integer)
addr: (6 integer)
addr: initial result: 6
addr: incrementing by 1066
reply: ((6 integer)) ((3 integer))
reply: 37 => (3 integer)
setm: (3 integer) <= 37
sz: (3 integer)
addr: (3 integer)
addr: initial result: 3
setm: size of (3 integer) is 1
setm: (3 integer): setting 3 to 37
schedule: done with routine
