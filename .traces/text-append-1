9991 parse: --- defining scenario_text-append-1
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:shared:array:character/raw <- new [hello,]\n    2:address:shared:array:character/raw <- new [ world!]\n    3:address:shared:array:character/raw <- append 1:address:shared:array:character/raw, 2:address:shared:array:character/raw\n    4:array:character/raw <- copy *3:address:shared:array:character/raw\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:shared:array:character/raw <- new [hello,]
    2:address:shared:array:character/raw <- new [ world!]
    3:address:shared:array:character/raw <- append 1:address:shared:array:character/raw, 2:address:shared:array:character/raw
    4:array:character/raw <- copy *3:address:shared:array:character/raw
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    4:array:character <- [hello, world!]\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    4:array:character <- [hello, world!]
  ]
9999 parse: recipe scenario_text-append-1 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario_text-append-1
9991 transform: --- deduce types for recipe scenario_text-append-1
9991 transform: --- collect surrounding spaces for recipe scenario_text-append-1
9991 transform: --- transform names for recipe scenario_text-append-1
9991 transform: --- resolve ambiguous calls for recipe scenario_text-append-1
9991 transform: --- compute instruction operations for recipe scenario_text-append-1
9991 transform: --- transform braces for recipe scenario_text-append-1
9992 transform: run ...
9992 transform: memory-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario_text-append-1
9991 transform: --- type-check 'call' instructions inside recipe scenario_text-append-1
9991 transform: --- type-check calls inside recipe scenario_text-append-1
9991 transform: --- convert 'new' to 'allocate' for recipe scenario_text-append-1
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario_text-append-1
 102 run: run [
    1:address:shared:array:character/raw <- new [hello,]
    2:address:shared:array:character/raw <- new [ world!]
    3:address:shared:array:character/raw <- append 1:address:shared:array:character/raw, 2:address:shared:array:character/raw
    4:array:character/raw <- copy *3:address:shared:array:character/raw
  ]
9991 parse: --- defining run_1001
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"hello,": "literal-string"}
9993 parse:   product: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>}
9992 load: after rewriting: 1:address:shared:array:character/raw <- new [hello,]
9993 parse: instruction: new
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {" world!": "literal-string"}
9993 parse:   product: {"2": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>}
9992 load: after rewriting: 2:address:shared:array:character/raw <- new [ world!]
9993 parse: instruction: append
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>}
9993 parse:   ingredient: {"2": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>}
9993 parse:   product: {"3": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>}
9992 load: after rewriting: 3:address:shared:array:character/raw <- append 1:address:shared:array:character/raw, 2:address:shared:array:character/raw
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": <"address" : <"shared" : <"array" : <"character" : <>>>>>, "raw": <>, "lookup": <>}
9993 parse:   product: {"4": <"array" : <"character" : <>>>, "raw": <>}
9992 load: after rewriting: 4:array:character/raw <- copy *3:address:shared:array:character/raw
9999 parse: recipe run_1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run_1001
9991 transform: --- deduce types for recipe run_1001
9991 transform: --- collect surrounding spaces for recipe run_1001
9991 transform: --- transform names for recipe run_1001
9991 transform: --- resolve ambiguous calls for recipe run_1001
9992 transform: instruction 3:address:shared:array:character/raw <- append 1:address:shared:array:character/raw, 2:address:shared:array:character/raw
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9992 transform: checking variant 0: recipe append {"buf": <"address" : <"shared" : <"buffer" : <>>>>} {"x": "_elem"} -> {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: checking variant 1: recipe append_2 {"in": <"address" : <"shared" : <"buffer" : <>>>>} {"c": "character"} -> {"in": <"address" : <"shared" : <"buffer" : <>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: checking variant 2: recipe append_3 {"a": <"address" : <"shared" : <"array" : <"character" : <>>>>>} {"b": <"address" : <"shared" : <"array" : <"character" : <>>>>>} -> {"result": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 2: 100
9993 transform: switching append to append_3
9992 transform: checking variant 3: recipe append_4 {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>} {"new": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>, "contained-in": "in"} -> {"in": <"address" : <"shared" : <"duplex-list" : <"_elem" : <>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: checking variant 4: recipe append_5 {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>} {"new": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>, "contained-in": "in"} -> {"in": <"address" : <"shared" : <"duplex-list" : <"character" : <>>>>>}
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9991 transform: --- compute instruction operations for recipe run_1001
9991 transform: --- transform braces for recipe run_1001
9992 transform: new ...
9992 transform: new ...
9992 transform: append ...
9992 transform: copy ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run_1001
9991 transform: --- type-check 'call' instructions inside recipe run_1001
9991 transform: --- type-check calls inside recipe run_1001
9991 transform: --- convert 'new' to 'allocate' for recipe run_1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:shared:array:character/raw <- new [hello,]
9999 mem: storing 1000 in location 1
9999 mem: incrementing refcount of 1000: 0 -> 1
 103 run: 2:address:shared:array:character/raw <- new [ world!]
9999 mem: storing 1008 in location 2
9999 mem: incrementing refcount of 1008: 0 -> 1
 103 run: 3:address:shared:array:character/raw <- append_3 1:address:shared:array:character/raw, 2:address:shared:array:character/raw
9999 mem: location 1 is 1000
9999 mem: location 2 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 13
9999 mem: allocating size 15
9999 mem: new alloc: 1017
9999 mem: storing 13 in location 1018
 104 run: a:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1000 in location 1020
9999 mem: incrementing refcount of 1000: 1 -> 2
 104 run: b:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1021
9999 mem: incrementing refcount of 1008: 1 -> 2
 104 run: a-len:number <- length *a
9999 mem: location 1020 is 1000
9999 mem: skipping refcount at 1000
9999 mem: storing 6 in location 1022
 104 run: b-len:number <- length *b
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9999 mem: storing 7 in location 1023
 104 run: result-len:number <- add a-len, b-len
9999 mem: location 1022 is 6
9999 mem: location 1023 is 7
9999 mem: storing 13 in location 1024
 104 run: result <- new character:type, result-len
9999 mem: location 1024 is 13
9999 mem: array size is 13
9999 mem: allocating size 15
9999 mem: new alloc: 1032
9999 mem: storing 13 in location 1033
9999 mem: storing 1032 in location 1025
9999 mem: incrementing refcount of 1032: 0 -> 1
 104 run: result-idx:number <- copy 0
9999 mem: storing 0 in location 1026
 104 run: i:number <- copy 0
9999 mem: storing 0 in location 1027
 104 run: a-done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1027 is 0
9999 mem: location 1022 is 6
9999 mem: storing 0 in location 1028
 104 run: jump-if a-done?, 
9999 mem: location 1028 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 0
9999 mem: storing 1034 in location 1029
 104 run: in:character <- index *a, i
9999 mem: location 1020 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 0
9998 run: address to copy is 1002
9998 run: its type is character
9999 mem: location 1002 is 104
9999 mem: storing 104 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 104
9999 mem: location 1029 is 1034
9999 mem: storing 104 in location 1034
 104 run: i <- add i, 1
9999 mem: location 1027 is 0
9999 mem: storing 1 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 0
9999 mem: storing 1 in location 1026
 104 run: jump 
9998 run: jumping to instruction 10
 104 run: a-done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1027 is 1
9999 mem: location 1022 is 6
9999 mem: storing 0 in location 1028
 104 run: jump-if a-done?, 
9999 mem: location 1028 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 1
9999 mem: storing 1035 in location 1029
 104 run: in:character <- index *a, i
9999 mem: location 1020 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 1
9998 run: address to copy is 1003
9998 run: its type is character
9999 mem: location 1003 is 101
9999 mem: storing 101 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 101
9999 mem: location 1029 is 1035
9999 mem: storing 101 in location 1035
 104 run: i <- add i, 1
9999 mem: location 1027 is 1
9999 mem: storing 2 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 1
9999 mem: storing 2 in location 1026
 104 run: jump 
9998 run: jumping to instruction 10
 104 run: a-done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1027 is 2
9999 mem: location 1022 is 6
9999 mem: storing 0 in location 1028
 104 run: jump-if a-done?, 
9999 mem: location 1028 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 2
9999 mem: storing 1036 in location 1029
 104 run: in:character <- index *a, i
9999 mem: location 1020 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 2
9998 run: address to copy is 1004
9998 run: its type is character
9999 mem: location 1004 is 108
9999 mem: storing 108 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 108
9999 mem: location 1029 is 1036
9999 mem: storing 108 in location 1036
 104 run: i <- add i, 1
9999 mem: location 1027 is 2
9999 mem: storing 3 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 2
9999 mem: storing 3 in location 1026
 104 run: jump 
9998 run: jumping to instruction 10
 104 run: a-done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1027 is 3
9999 mem: location 1022 is 6
9999 mem: storing 0 in location 1028
 104 run: jump-if a-done?, 
9999 mem: location 1028 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 3
9999 mem: storing 1037 in location 1029
 104 run: in:character <- index *a, i
9999 mem: location 1020 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 3
9998 run: address to copy is 1005
9998 run: its type is character
9999 mem: location 1005 is 108
9999 mem: storing 108 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 108
9999 mem: location 1029 is 1037
9999 mem: storing 108 in location 1037
 104 run: i <- add i, 1
9999 mem: location 1027 is 3
9999 mem: storing 4 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 3
9999 mem: storing 4 in location 1026
 104 run: jump 
9998 run: jumping to instruction 10
 104 run: a-done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1027 is 4
9999 mem: location 1022 is 6
9999 mem: storing 0 in location 1028
 104 run: jump-if a-done?, 
9999 mem: location 1028 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 4
9999 mem: storing 1038 in location 1029
 104 run: in:character <- index *a, i
9999 mem: location 1020 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 4
9998 run: address to copy is 1006
9998 run: its type is character
9999 mem: location 1006 is 111
9999 mem: storing 111 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 111
9999 mem: location 1029 is 1038
9999 mem: storing 111 in location 1038
 104 run: i <- add i, 1
9999 mem: location 1027 is 4
9999 mem: storing 5 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 4
9999 mem: storing 5 in location 1026
 104 run: jump 
9998 run: jumping to instruction 10
 104 run: a-done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1027 is 5
9999 mem: location 1022 is 6
9999 mem: storing 0 in location 1028
 104 run: jump-if a-done?, 
9999 mem: location 1028 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 5
9999 mem: storing 1039 in location 1029
 104 run: in:character <- index *a, i
9999 mem: location 1020 is 1000
9999 mem: skipping refcount at 1000
9998 run: base address is 1001
9999 mem: location 1027 is 5
9998 run: address to copy is 1007
9998 run: its type is character
9999 mem: location 1007 is 44
9999 mem: storing 44 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 44
9999 mem: location 1029 is 1039
9999 mem: storing 44 in location 1039
 104 run: i <- add i, 1
9999 mem: location 1027 is 5
9999 mem: storing 6 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 5
9999 mem: storing 6 in location 1026
 104 run: jump 
9998 run: jumping to instruction 10
 104 run: a-done?:boolean <- greater-or-equal i, a-len
9999 mem: location 1027 is 6
9999 mem: location 1022 is 6
9999 mem: storing 1 in location 1028
 104 run: jump-if a-done?, 
9999 mem: location 1028 is 1
9998 run: jumping to instruction 18
 104 run: i <- copy 0
9999 mem: storing 0 in location 1027
 104 run: b-done?:boolean <- greater-or-equal i, b-len
9999 mem: location 1027 is 0
9999 mem: location 1023 is 7
9999 mem: storing 0 in location 1031
 104 run: jump-if b-done?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 6
9999 mem: storing 1040 in location 1029
 104 run: in:character <- index *b, i
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: base address is 1009
9999 mem: location 1027 is 0
9998 run: address to copy is 1010
9998 run: its type is character
9999 mem: location 1010 is 32
9999 mem: storing 32 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 32
9999 mem: location 1029 is 1040
9999 mem: storing 32 in location 1040
 104 run: i <- add i, 1
9999 mem: location 1027 is 0
9999 mem: storing 1 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 6
9999 mem: storing 7 in location 1026
 104 run: jump 
9998 run: jumping to instruction 21
 104 run: b-done?:boolean <- greater-or-equal i, b-len
9999 mem: location 1027 is 1
9999 mem: location 1023 is 7
9999 mem: storing 0 in location 1031
 104 run: jump-if b-done?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 7
9999 mem: storing 1041 in location 1029
 104 run: in:character <- index *b, i
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: base address is 1009
9999 mem: location 1027 is 1
9998 run: address to copy is 1011
9998 run: its type is character
9999 mem: location 1011 is 119
9999 mem: storing 119 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 119
9999 mem: location 1029 is 1041
9999 mem: storing 119 in location 1041
 104 run: i <- add i, 1
9999 mem: location 1027 is 1
9999 mem: storing 2 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 7
9999 mem: storing 8 in location 1026
 104 run: jump 
9998 run: jumping to instruction 21
 104 run: b-done?:boolean <- greater-or-equal i, b-len
9999 mem: location 1027 is 2
9999 mem: location 1023 is 7
9999 mem: storing 0 in location 1031
 104 run: jump-if b-done?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 8
9999 mem: storing 1042 in location 1029
 104 run: in:character <- index *b, i
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: base address is 1009
9999 mem: location 1027 is 2
9998 run: address to copy is 1012
9998 run: its type is character
9999 mem: location 1012 is 111
9999 mem: storing 111 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 111
9999 mem: location 1029 is 1042
9999 mem: storing 111 in location 1042
 104 run: i <- add i, 1
9999 mem: location 1027 is 2
9999 mem: storing 3 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 8
9999 mem: storing 9 in location 1026
 104 run: jump 
9998 run: jumping to instruction 21
 104 run: b-done?:boolean <- greater-or-equal i, b-len
9999 mem: location 1027 is 3
9999 mem: location 1023 is 7
9999 mem: storing 0 in location 1031
 104 run: jump-if b-done?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 9
9999 mem: storing 1043 in location 1029
 104 run: in:character <- index *b, i
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: base address is 1009
9999 mem: location 1027 is 3
9998 run: address to copy is 1013
9998 run: its type is character
9999 mem: location 1013 is 114
9999 mem: storing 114 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 114
9999 mem: location 1029 is 1043
9999 mem: storing 114 in location 1043
 104 run: i <- add i, 1
9999 mem: location 1027 is 3
9999 mem: storing 4 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 9
9999 mem: storing 10 in location 1026
 104 run: jump 
9998 run: jumping to instruction 21
 104 run: b-done?:boolean <- greater-or-equal i, b-len
9999 mem: location 1027 is 4
9999 mem: location 1023 is 7
9999 mem: storing 0 in location 1031
 104 run: jump-if b-done?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 10
9999 mem: storing 1044 in location 1029
 104 run: in:character <- index *b, i
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: base address is 1009
9999 mem: location 1027 is 4
9998 run: address to copy is 1014
9998 run: its type is character
9999 mem: location 1014 is 108
9999 mem: storing 108 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 108
9999 mem: location 1029 is 1044
9999 mem: storing 108 in location 1044
 104 run: i <- add i, 1
9999 mem: location 1027 is 4
9999 mem: storing 5 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 10
9999 mem: storing 11 in location 1026
 104 run: jump 
9998 run: jumping to instruction 21
 104 run: b-done?:boolean <- greater-or-equal i, b-len
9999 mem: location 1027 is 5
9999 mem: location 1023 is 7
9999 mem: storing 0 in location 1031
 104 run: jump-if b-done?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 11
9999 mem: storing 1045 in location 1029
 104 run: in:character <- index *b, i
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: base address is 1009
9999 mem: location 1027 is 5
9998 run: address to copy is 1015
9998 run: its type is character
9999 mem: location 1015 is 100
9999 mem: storing 100 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 100
9999 mem: location 1029 is 1045
9999 mem: storing 100 in location 1045
 104 run: i <- add i, 1
9999 mem: location 1027 is 5
9999 mem: storing 6 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 11
9999 mem: storing 12 in location 1026
 104 run: jump 
9998 run: jumping to instruction 21
 104 run: b-done?:boolean <- greater-or-equal i, b-len
9999 mem: location 1027 is 6
9999 mem: location 1023 is 7
9999 mem: storing 0 in location 1031
 104 run: jump-if b-done?, 
9999 mem: location 1031 is 0
9998 run: jump-if fell through
 104 run: out:address:character <- index-address *result, result-idx
9999 mem: location 1025 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1026 is 12
9999 mem: storing 1046 in location 1029
 104 run: in:character <- index *b, i
9999 mem: location 1021 is 1008
9999 mem: skipping refcount at 1008
9998 run: base address is 1009
9999 mem: location 1027 is 6
9998 run: address to copy is 1016
9998 run: its type is character
9999 mem: location 1016 is 33
9999 mem: storing 33 in location 1030
 104 run: *out <- copy in
9999 mem: location 1030 is 33
9999 mem: location 1029 is 1046
9999 mem: storing 33 in location 1046
 104 run: i <- add i, 1
9999 mem: location 1027 is 6
9999 mem: storing 7 in location 1027
 104 run: result-idx <- add result-idx, 1
9999 mem: location 1026 is 12
9999 mem: storing 13 in location 1026
 104 run: jump 
9998 run: jumping to instruction 21
 104 run: b-done?:boolean <- greater-or-equal i, b-len
9999 mem: location 1027 is 7
9999 mem: location 1023 is 7
9999 mem: storing 1 in location 1031
 104 run: jump-if b-done?, 
9999 mem: location 1031 is 1
9998 run: jumping to instruction 29
 104 run: reply result:address:shared:array:character
9999 mem: location 1025 is 1032
9999 abandon: saving in free-list of size 15
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1032
9999 mem: storing 1032 in location 3
9999 mem: incrementing refcount of 1032: 1 -> 2
 103 run: 4:array:character/raw <- copy *3:address:shared:array:character/raw
9999 mem: location 3 is 1032
9999 mem: skipping refcount at 1032
9999 mem: location 1033 is 13
9999 mem: location 1034 is 104
9999 mem: location 1035 is 101
9999 mem: location 1036 is 108
9999 mem: location 1037 is 108
9999 mem: location 1038 is 111
9999 mem: location 1039 is 44
9999 mem: location 1040 is 32
9999 mem: location 1041 is 119
9999 mem: location 1042 is 111
9999 mem: location 1043 is 114
9999 mem: location 1044 is 108
9999 mem: location 1045 is 100
9999 mem: location 1046 is 33
9999 mem: storing 13 in location 4
9999 mem: storing 104 in location 5
9999 mem: storing 101 in location 6
9999 mem: storing 108 in location 7
9999 mem: storing 108 in location 8
9999 mem: storing 111 in location 9
9999 mem: storing 44 in location 10
9999 mem: storing 32 in location 11
9999 mem: storing 119 in location 12
9999 mem: storing 111 in location 13
9999 mem: storing 114 in location 14
9999 mem: storing 108 in location 15
9999 mem: storing 100 in location 16
9999 mem: storing 33 in location 17
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: memory-should-contain [
    4:array:character <- [hello, world!]
  ]
9999 run: checking string length at 4
9999 run: checking location 5
9999 run: checking location 6
9999 run: checking location 7
9999 run: checking location 8
9999 run: checking location 9
9999 run: checking location 10
9999 run: checking location 11
9999 run: checking location 12
9999 run: checking location 13
9999 run: checking location 14
9999 run: checking location 15
9999 run: checking location 16
9999 run: checking location 17
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
