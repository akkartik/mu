schedule: main
run: 1 main 0: (((1 channel-address)) <- ((init-channel)) ((3 literal)))
run: 2 init-channel 0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal)))
sizeof: ((_ location))
run: 1000 => ((default-scope scope-address))
sizeof: ((default-scope scope-address))
run: 3 init-channel 1: (((1 channel-address)) <- ((new)) ((channel literal)))
sizeof: ((_ channel))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
run: 1031 => ((1 channel-address))
setm: ((1 channel-address)) <= 1031
setm: size of ((1 channel-address)) is 1
setm: ((1 channel-address)): setting 1002 to 1031
run: 4 init-channel 2: (((2 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((0 offset)))
run: 1031 => ((2 integer-address))
setm: ((2 integer-address)) <= 1031
setm: size of ((2 integer-address)) is 1
setm: ((2 integer-address)): setting 1003 to 1031
run: 5 init-channel 3: (((2 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: 0 => ((2 integer-address) (deref))
setm: ((2 integer-address) (deref)) <= 0
setm: size of ((2 integer-address) (deref)) is 1
setm: ((2 integer-address) (deref)): setting 1031 to 0
run: 6 init-channel 4: (((3 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
sizeof: ((_ integer))
run: 1032 => ((3 integer-address))
setm: ((3 integer-address)) <= 1032
setm: size of ((3 integer-address)) is 1
setm: ((3 integer-address)): setting 1004 to 1032
run: 7 init-channel 5: (((3 integer-address) (deref)) <- ((copy)) ((0 literal)))
run: 0 => ((3 integer-address) (deref))
setm: ((3 integer-address) (deref)) <= 0
setm: size of ((3 integer-address) (deref)) is 1
setm: ((3 integer-address) (deref)): setting 1032 to 0
run: 8 init-channel 6: (((4 integer)) <- ((next-input)))
arg: nil 0 (3)
run: 3 => ((4 integer))
setm: ((4 integer)) <= 3
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 1005 to 3
run: 9 init-channel 7: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
m: ((4 integer))
sizeof: ((4 integer))
add: 3 1
m: ((4 integer))
sizeof: ((4 integer))
run: 4 => ((4 integer))
setm: ((4 integer)) <= 4
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 1005 to 4
run: 10 init-channel 8: (((5 tagged-value-array-address-address)) <- ((get-address)) ((1 channel-address) (deref)) ((2 offset)))
sizeof: ((_ integer))
sizeof: ((_ integer))
run: 1033 => ((5 tagged-value-array-address-address))
setm: ((5 tagged-value-array-address-address)) <= 1033
setm: size of ((5 tagged-value-array-address-address)) is 1
setm: ((5 tagged-value-array-address-address)): setting 1006 to 1033
run: 11 init-channel 9: (((5 tagged-value-array-address-address) (deref)) <- ((new)) ((tagged-value-array literal)) ((4 integer)))
m: ((4 integer))
sizeof: ((4 integer))
sizeof: ((_ tagged-value))
sizeof: ((_ type))
sizeof: ((_ location))
run: 1034 => ((5 tagged-value-array-address-address) (deref))
setm: ((5 tagged-value-array-address-address) (deref)) <= 1034
setm: size of ((5 tagged-value-array-address-address) (deref)) is 1
setm: ((5 tagged-value-array-address-address) (deref)): setting 1033 to 1034
run: 12 init-channel 10: (((reply)) ((1 channel-address)))
m: ((1 channel-address))
sizeof: ((1 channel-address))
reply: (((1 channel-address))) (((1 channel-address)))
reply: 1031 => ((1 channel-address))
setm: ((1 channel-address)) <= 1031
setm: size of ((1 channel-address)) is 1
setm: ((1 channel-address)): setting 1 to 1031
run: 13 main 1: (((2 integer-address)) <- ((new)) ((integer literal)))
sizeof: ((_ integer))
run: 1043 => ((2 integer-address))
setm: ((2 integer-address)) <= 1043
setm: size of ((2 integer-address)) is 1
setm: ((2 integer-address)): setting 2 to 1043
run: 14 main 2: (((2 integer-address) (deref)) <- ((copy)) ((34 literal)))
run: 34 => ((2 integer-address) (deref))
setm: ((2 integer-address) (deref)) <= 34
setm: size of ((2 integer-address) (deref)) is 1
setm: ((2 integer-address) (deref)): setting 1043 to 34
run: 15 main 3: (((3 tagged-value)) <- ((save-type)) ((2 integer-address)))
m: ((2 integer-address))
sizeof: ((2 integer-address))
run: #(tagged record (integer-address 1043)) => ((3 tagged-value))
setm: ((3 tagged-value)) <= #(tagged record (integer-address 1043))
setm: size of ((3 tagged-value)) is 2
sizeof: ((3 tagged-value))
sizeof: ((_ type))
sizeof: ((_ location))
setm: ((3 tagged-value)): setting 3 to integer-address
setm: ((3 tagged-value)): setting 4 to 1043
run: 16 main 4: (((1 channel-address) (deref)) <- ((write)) ((1 channel-address)) ((3 tagged-value)))
m: ((1 channel-address))
sizeof: ((1 channel-address))
m: ((3 tagged-value))
sizeof: ((3 tagged-value))
sizeof: ((_ type))
sizeof: ((_ location))
run: 17 write 0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal)))
sizeof: ((_ location))
run: 1044 => ((default-scope scope-address))
sizeof: ((default-scope scope-address))
run: 18 write 1: (((1 channel-address)) <- ((next-input)))
arg: nil 0 (1031 #(tagged record (integer-address 1043 . nil)))
run: 1031 => ((1 channel-address))
setm: ((1 channel-address)) <= 1031
setm: size of ((1 channel-address)) is 1
setm: ((1 channel-address)): setting 1046 to 1031
run: 19 write 2: (((2 tagged-value)) <- ((next-input)))
arg: nil 1 (1031 #(tagged record (integer-address 1043 . nil)))
run: #(tagged record (integer-address 1043 . nil)) => ((2 tagged-value))
setm: ((2 tagged-value)) <= #(tagged record (integer-address 1043 . nil))
setm: size of ((2 tagged-value)) is 2
sizeof: ((2 tagged-value))
sizeof: ((_ type))
sizeof: ((_ location))
setm: ((2 tagged-value)): setting 1047 to integer-address
setm: ((2 tagged-value)): setting 1048 to 1043
run: 20 write 3: (((4 boolean)) <- ((full?)) ((1 channel-address) (deref)))
m: ((1 channel-address) (deref))
sizeof: ((1 channel-address) (deref))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
run: 21 full? 0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal)))
sizeof: ((_ location))
run: 1075 => ((default-scope scope-address))
sizeof: ((default-scope scope-address))
run: 22 full? 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: #(tagged record (0 0 1034 . nil)) => ((1 channel))
setm: ((1 channel)) <= #(tagged record (0 0 1034 . nil))
setm: size of ((1 channel)) is 3
sizeof: ((1 channel))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
setm: ((1 channel)): setting 1077 to 0
setm: ((1 channel)): setting 1078 to 0
setm: ((1 channel)): setting 1079 to 1034
run: 23 full? 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
sizeof: ((_ integer))
m: ((1078 integer) (raw))
sizeof: ((1078 integer) (raw))
run: 0 => ((4 integer))
setm: ((4 integer)) <= 0
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 1080 to 0
run: 24 full? 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
m: ((4 integer))
sizeof: ((4 integer))
add: 0 1
m: ((4 integer))
sizeof: ((4 integer))
run: 1 => ((4 integer))
setm: ((4 integer)) <= 1
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 1080 to 1
run: 25 full? 4: (((5 integer)) <- ((capacity)) ((1 channel)))
m: ((1 channel))
sizeof: ((1 channel))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
run: 26 capacity 0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal)))
sizeof: ((_ location))
run: 1106 => ((default-scope scope-address))
sizeof: ((default-scope scope-address))
run: 27 capacity 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 0 1034 . nil)))
run: #(tagged record (0 0 1034 . nil)) => ((1 channel))
setm: ((1 channel)) <= #(tagged record (0 0 1034 . nil))
setm: size of ((1 channel)) is 3
sizeof: ((1 channel))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
setm: ((1 channel)): setting 1108 to 0
setm: ((1 channel)): setting 1109 to 0
setm: ((1 channel)): setting 1110 to 1034
run: 28 capacity 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
sizeof: ((_ integer))
sizeof: ((_ integer))
m: ((1110 tagged-value-array-address) (raw))
sizeof: ((1110 tagged-value-array-address) (raw))
run: 1034 => ((4 tagged-value-array-address))
setm: ((4 tagged-value-array-address)) <= 1034
setm: size of ((4 tagged-value-array-address)) is 1
setm: ((4 tagged-value-array-address)): setting 1111 to 1034
run: 29 capacity 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
m: ((1034 integer) (raw))
sizeof: ((1034 integer) (raw))
run: 4 => ((5 integer))
setm: ((5 integer)) <= 4
setm: size of ((5 integer)) is 1
setm: ((5 integer)): setting 1112 to 4
run: 30 capacity 4: (((reply)) ((5 integer)))
m: ((5 integer))
sizeof: ((5 integer))
reply: (((5 integer))) (((5 integer)))
reply: 4 => ((5 integer))
setm: ((5 integer)) <= 4
setm: size of ((5 integer)) is 1
setm: ((5 integer)): setting 1081 to 4
run: 31 full? 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
m: ((4 integer))
sizeof: ((4 integer))
m: ((5 integer))
sizeof: ((5 integer))
run: t => ((6 boolean))
setm: ((6 boolean)) <= t
setm: size of ((6 boolean)) is 1
setm: ((6 boolean)): setting 1082 to t
run: 32 full? 6: (((jump-if)) ((6 boolean)) ((1 offset)))
m: ((6 boolean))
sizeof: ((6 boolean))
jump: checking t
jump: jumping to 8
run: 33 full? 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
m: ((1077 integer) (raw))
sizeof: ((1077 integer) (raw))
run: 0 => ((7 integer))
setm: ((7 integer)) <= 0
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1083 to 0
run: 34 full? 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
m: ((7 integer))
sizeof: ((7 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((8 boolean))
setm: ((8 boolean)) <= nil
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1084 to nil
run: 35 full? 10: (((reply)) ((8 boolean)))
m: ((8 boolean))
sizeof: ((8 boolean))
reply: (((8 boolean))) (((4 boolean)))
reply: nil => ((4 boolean))
setm: ((4 boolean)) <= nil
setm: size of ((4 boolean)) is 1
setm: ((4 boolean)): setting 1049 to nil
run: 36 write 4: (((jump-unless)) ((4 boolean)) ((2 offset)))
m: ((4 boolean))
sizeof: ((4 boolean))
jump: checking ~nil
jump: jumping to 7
run: 37 write 7: (((6 tagged-value-array-address)) <- ((get)) ((1 channel-address) (deref)) ((2 offset)))
sizeof: ((_ integer))
sizeof: ((_ integer))
m: ((1033 tagged-value-array-address) (raw))
sizeof: ((1033 tagged-value-array-address) (raw))
run: 1034 => ((6 tagged-value-array-address))
setm: ((6 tagged-value-array-address)) <= 1034
setm: size of ((6 tagged-value-array-address)) is 1
setm: ((6 tagged-value-array-address)): setting 1051 to 1034
run: 38 write 8: (((7 integer-address)) <- ((get-address)) ((1 channel-address) (deref)) ((1 offset)))
sizeof: ((_ integer))
run: 1032 => ((7 integer-address))
setm: ((7 integer-address)) <= 1032
setm: size of ((7 integer-address)) is 1
setm: ((7 integer-address)): setting 1052 to 1032
run: 39 write 9: (((8 tagged-value-address)) <- ((index-address)) ((6 tagged-value-array-address) (deref)) ((7 integer-address) (deref)))
m: ((7 integer-address) (deref))
sizeof: ((7 integer-address) (deref))
array-len: ((1034 tagged-value-array) (raw))
m: ((1034 integer) (raw))
sizeof: ((1034 integer) (raw))
sizeof: ((_ tagged-value))
sizeof: ((_ type))
sizeof: ((_ location))
run: 1035 => ((8 tagged-value-address))
setm: ((8 tagged-value-address)) <= 1035
setm: size of ((8 tagged-value-address)) is 1
setm: ((8 tagged-value-address)): setting 1053 to 1035
run: 40 write 10: (((8 tagged-value-address) (deref)) <- ((copy)) ((2 tagged-value)))
m: ((2 tagged-value))
sizeof: ((2 tagged-value))
sizeof: ((_ type))
sizeof: ((_ location))
run: #(tagged record (integer-address 1043 . nil)) => ((8 tagged-value-address) (deref))
setm: ((8 tagged-value-address) (deref)) <= #(tagged record (integer-address 1043 . nil))
setm: size of ((8 tagged-value-address) (deref)) is 2
sizeof: ((8 tagged-value-address) (deref))
sizeof: ((_ type))
sizeof: ((_ location))
setm: ((8 tagged-value-address) (deref)): setting 1035 to integer-address
setm: ((8 tagged-value-address) (deref)): setting 1036 to 1043
run: 41 write 11: (((7 integer-address) (deref)) <- ((add)) ((7 integer-address) (deref)) ((1 literal)))
m: ((7 integer-address) (deref))
sizeof: ((7 integer-address) (deref))
add: 0 1
m: ((7 integer-address) (deref))
sizeof: ((7 integer-address) (deref))
run: 1 => ((7 integer-address) (deref))
setm: ((7 integer-address) (deref)) <= 1
setm: size of ((7 integer-address) (deref)) is 1
setm: ((7 integer-address) (deref)): setting 1032 to 1
run: 42 write 12: (((9 integer)) <- ((length)) ((6 tagged-value-array-address) (deref)))
array-len: ((6 tagged-value-array-address) (deref))
m: ((1034 integer) (raw))
sizeof: ((1034 integer) (raw))
run: 4 => ((9 integer))
setm: ((9 integer)) <= 4
setm: size of ((9 integer)) is 1
setm: ((9 integer)): setting 1054 to 4
run: 43 write 13: (((10 boolean)) <- ((less-than)) ((7 integer-address) (deref)) ((9 integer)))
m: ((7 integer-address) (deref))
sizeof: ((7 integer-address) (deref))
m: ((9 integer))
sizeof: ((9 integer))
run: t => ((10 boolean))
setm: ((10 boolean)) <= t
setm: size of ((10 boolean)) is 1
setm: ((10 boolean)): setting 1055 to t
run: 44 write 14: (((jump-if)) ((10 boolean)) ((1 offset)))
m: ((10 boolean))
sizeof: ((10 boolean))
jump: checking t
jump: jumping to 16
run: 45 write 16: (((reply)) ((1 channel-address) (deref)))
m: ((1 channel-address) (deref))
sizeof: ((1 channel-address) (deref))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
reply: (((1 channel-address) (deref))) (((1 channel-address) (deref)))
reply: #(tagged record (0 1 1034 . nil)) => ((1 channel-address) (deref))
setm: ((1 channel-address) (deref)) <= #(tagged record (0 1 1034 . nil))
setm: size of ((1 channel-address) (deref)) is 3
sizeof: ((1 channel-address) (deref))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
setm: ((1 channel-address) (deref)): setting 1031 to 0
setm: ((1 channel-address) (deref)): setting 1032 to 1
setm: ((1 channel-address) (deref)): setting 1033 to 1034
run: 46 main 5: (((5 boolean)) <- ((empty?)) ((1 channel-address) (deref)))
m: ((1 channel-address) (deref))
sizeof: ((1 channel-address) (deref))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
run: 47 empty? 0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal)))
sizeof: ((_ location))
run: 1137 => ((default-scope scope-address))
sizeof: ((default-scope scope-address))
run: 48 empty? 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 1 1034 . nil)))
run: #(tagged record (0 1 1034 . nil)) => ((1 channel))
setm: ((1 channel)) <= #(tagged record (0 1 1034 . nil))
setm: size of ((1 channel)) is 3
sizeof: ((1 channel))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
setm: ((1 channel)): setting 1139 to 0
setm: ((1 channel)): setting 1140 to 1
setm: ((1 channel)): setting 1141 to 1034
run: 49 empty? 2: (((4 integer)) <- ((get)) ((1 channel)) ((0 offset)))
m: ((1139 integer) (raw))
sizeof: ((1139 integer) (raw))
run: 0 => ((4 integer))
setm: ((4 integer)) <= 0
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 1142 to 0
run: 50 empty? 3: (((5 integer)) <- ((get)) ((1 channel)) ((1 offset)))
sizeof: ((_ integer))
m: ((1140 integer) (raw))
sizeof: ((1140 integer) (raw))
run: 1 => ((5 integer))
setm: ((5 integer)) <= 1
setm: size of ((5 integer)) is 1
setm: ((5 integer)): setting 1143 to 1
run: 51 empty? 4: (((6 boolean)) <- ((equal)) ((4 integer)) ((5 integer)))
m: ((4 integer))
sizeof: ((4 integer))
m: ((5 integer))
sizeof: ((5 integer))
run: nil => ((6 boolean))
setm: ((6 boolean)) <= nil
setm: size of ((6 boolean)) is 1
setm: ((6 boolean)): setting 1144 to nil
run: 52 empty? 5: (((reply)) ((6 boolean)))
m: ((6 boolean))
sizeof: ((6 boolean))
reply: (((6 boolean))) (((5 boolean)))
reply: nil => ((5 boolean))
setm: ((5 boolean)) <= nil
setm: size of ((5 boolean)) is 1
setm: ((5 boolean)): setting 5 to nil
run: 53 main 6: (((6 boolean)) <- ((full?)) ((1 channel-address) (deref)))
m: ((1 channel-address) (deref))
sizeof: ((1 channel-address) (deref))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
run: 54 full? 0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal)))
sizeof: ((_ location))
run: 1168 => ((default-scope scope-address))
sizeof: ((default-scope scope-address))
run: 55 full? 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 1 1034 . nil)))
run: #(tagged record (0 1 1034 . nil)) => ((1 channel))
setm: ((1 channel)) <= #(tagged record (0 1 1034 . nil))
setm: size of ((1 channel)) is 3
sizeof: ((1 channel))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
setm: ((1 channel)): setting 1170 to 0
setm: ((1 channel)): setting 1171 to 1
setm: ((1 channel)): setting 1172 to 1034
run: 56 full? 2: (((4 integer)) <- ((get)) ((1 channel)) ((1 offset)))
sizeof: ((_ integer))
m: ((1171 integer) (raw))
sizeof: ((1171 integer) (raw))
run: 1 => ((4 integer))
setm: ((4 integer)) <= 1
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 1173 to 1
run: 57 full? 3: (((4 integer)) <- ((add)) ((4 integer)) ((1 literal)))
m: ((4 integer))
sizeof: ((4 integer))
add: 1 1
m: ((4 integer))
sizeof: ((4 integer))
run: 2 => ((4 integer))
setm: ((4 integer)) <= 2
setm: size of ((4 integer)) is 1
setm: ((4 integer)): setting 1173 to 2
run: 58 full? 4: (((5 integer)) <- ((capacity)) ((1 channel)))
m: ((1 channel))
sizeof: ((1 channel))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
run: 59 capacity 0: (((default-scope scope-address)) <- ((new)) ((scope literal)) ((30 literal)))
sizeof: ((_ location))
run: 1199 => ((default-scope scope-address))
sizeof: ((default-scope scope-address))
run: 60 capacity 1: (((1 channel)) <- ((next-input)))
arg: nil 0 (#(tagged record (0 1 1034 . nil)))
run: #(tagged record (0 1 1034 . nil)) => ((1 channel))
setm: ((1 channel)) <= #(tagged record (0 1 1034 . nil))
setm: size of ((1 channel)) is 3
sizeof: ((1 channel))
sizeof: ((_ integer))
sizeof: ((_ integer))
sizeof: ((_ tagged-value-array-address))
setm: ((1 channel)): setting 1201 to 0
setm: ((1 channel)): setting 1202 to 1
setm: ((1 channel)): setting 1203 to 1034
run: 61 capacity 2: (((4 tagged-value-array-address)) <- ((get)) ((1 channel)) ((2 offset)))
sizeof: ((_ integer))
sizeof: ((_ integer))
m: ((1203 tagged-value-array-address) (raw))
sizeof: ((1203 tagged-value-array-address) (raw))
run: 1034 => ((4 tagged-value-array-address))
setm: ((4 tagged-value-array-address)) <= 1034
setm: size of ((4 tagged-value-array-address)) is 1
setm: ((4 tagged-value-array-address)): setting 1204 to 1034
run: 62 capacity 3: (((5 integer)) <- ((length)) ((4 tagged-value-array-address) (deref)))
array-len: ((4 tagged-value-array-address) (deref))
m: ((1034 integer) (raw))
sizeof: ((1034 integer) (raw))
run: 4 => ((5 integer))
setm: ((5 integer)) <= 4
setm: size of ((5 integer)) is 1
setm: ((5 integer)): setting 1205 to 4
run: 63 capacity 4: (((reply)) ((5 integer)))
m: ((5 integer))
sizeof: ((5 integer))
reply: (((5 integer))) (((5 integer)))
reply: 4 => ((5 integer))
setm: ((5 integer)) <= 4
setm: size of ((5 integer)) is 1
setm: ((5 integer)): setting 1174 to 4
run: 64 full? 5: (((6 boolean)) <- ((less-than)) ((4 integer)) ((5 integer)))
m: ((4 integer))
sizeof: ((4 integer))
m: ((5 integer))
sizeof: ((5 integer))
run: t => ((6 boolean))
setm: ((6 boolean)) <= t
setm: size of ((6 boolean)) is 1
setm: ((6 boolean)): setting 1175 to t
run: 65 full? 6: (((jump-if)) ((6 boolean)) ((1 offset)))
m: ((6 boolean))
sizeof: ((6 boolean))
jump: checking t
jump: jumping to 8
run: 66 full? 8: (((7 integer)) <- ((get)) ((1 channel)) ((0 offset)))
m: ((1170 integer) (raw))
sizeof: ((1170 integer) (raw))
run: 0 => ((7 integer))
setm: ((7 integer)) <= 0
setm: size of ((7 integer)) is 1
setm: ((7 integer)): setting 1176 to 0
run: 67 full? 9: (((8 boolean)) <- ((equal)) ((7 integer)) ((4 integer)))
m: ((7 integer))
sizeof: ((7 integer))
m: ((4 integer))
sizeof: ((4 integer))
run: nil => ((8 boolean))
setm: ((8 boolean)) <= nil
setm: size of ((8 boolean)) is 1
setm: ((8 boolean)): setting 1177 to nil
run: 68 full? 10: (((reply)) ((8 boolean)))
m: ((8 boolean))
sizeof: ((8 boolean))
reply: (((8 boolean))) (((6 boolean)))
reply: nil => ((6 boolean))
setm: ((6 boolean)) <= nil
setm: size of ((6 boolean)) is 1
setm: ((6 boolean)): setting 6 to nil
schedule: done with routine
