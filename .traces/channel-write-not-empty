parse: instruction: run
parse:   ingredient: {name: "
    1:address:channel <- init-channel 3:literal/capacity
    1:address:channel <- write 1:address:channel, 34:literal
    2:boolean <- channel-empty? 1:address:channel
    3:boolean <- channel-full? 1:address:channel
  ", properties: ["
    1:address:channel <- init-channel 3:literal/capacity
    1:address:channel <- write 1:address:channel, 34:literal
    2:boolean <- channel-empty? 1:address:channel
    3:boolean <- channel-full? 1:address:channel
  ": "literal-string"]}
parse: instruction: memory-should-contain
parse:   ingredient: {name: "
    2 <- 0  # empty?
    3 <- 0  # full?
  ", properties: ["
    2 <- 0  # empty?
    3 <- 0  # full?
  ": "literal-string"]}
after-brace: recipe channel-write-not-empty
after-brace: run ...
after-brace: memory-should-contain ...
new: routine allocated memory from 1000 to 101000
schedule: channel-write-not-empty
run: run [
    1:address:channel <- init-channel 3:literal/capacity
    1:address:channel <- write 1:address:channel, 34:literal
    2:boolean <- channel-empty? 1:address:channel
    3:boolean <- channel-full? 1:address:channel
  ]
parse: instruction: init-channel
parse:   ingredient: {name: "3", properties: ["3": "literal", "capacity": ]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: write
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   ingredient: {name: "34", properties: ["34": "literal"]}
parse:   product: {name: "1", properties: ["1": "address":"channel"]}
parse: instruction: channel-empty?
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   product: {name: "2", properties: ["2": "boolean"]}
parse: instruction: channel-full?
parse:   ingredient: {name: "1", properties: ["1": "address":"channel"]}
parse:   product: {name: "3", properties: ["3": "boolean"]}
after-brace: recipe run1001
after-brace: init-channel ...
after-brace: write ...
after-brace: channel-empty? ...
after-brace: channel-full? ...
run: 1:address:channel <- init-channel 3:literal/capacity
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1000
run: result:address:channel <- new channel:type
mem: new alloc: 1031
mem: storing 1031 in location 1002
run: full:address:number <- get-address result:address:channel/deref, first-full:offset
mem: location 1002 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 0
mem: location 1002 is 1031
run: address to copy is 1031
mem: storing 1031 in location 1003
run: full:address:number/deref <- copy 0:literal
mem: location 1003 is 1031
mem: storing 0 in location 1031
run: free:address:number <- get-address result:address:channel/deref, first-free:offset
mem: location 1002 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 0
mem: location 1002 is 1031
run: address to copy is 1032
mem: storing 1032 in location 1004
run: free:address:number/deref <- copy 0:literal
mem: location 1004 is 1032
mem: storing 0 in location 1032
run: capacity:number <- next-ingredient 
mem: storing 3 in location 1005
run: capacity:number <- add capacity:number, 1:literal
mem: location 1005 is 3
mem: storing 4 in location 1005
run: dest:address:address:array:location <- get-address result:address:channel/deref, data:offset
mem: location 1002 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 0
mem: location 1002 is 1031
run: address to copy is 1033
mem: storing 1033 in location 1006
run: dest:address:address:array:location/deref <- new location:type, capacity:number
mem: location 1005 is 4
mem: array size is 4
mem: new alloc: 1034
mem: location 1006 is 1033
mem: storing 1034 in location 1033
run: reply result:address:channel
mem: location 1002 is 1031
run: result 0 is 1031
mem: storing 1031 in location 1
run: 1:address:channel <- write 1:address:channel, 34:literal
mem: location 1 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1039
run: chan:address:channel <- next-ingredient 
mem: storing 1031 in location 1041
run: val:location <- next-ingredient 
mem: storing 34 in location 1042
run: full:boolean <- channel-full? chan:address:channel
mem: location 1041 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1070
run: chan:address:channel <- next-ingredient 
mem: storing 1031 in location 1072
run: tmp:number <- get chan:address:channel/deref, first-free:offset
mem: location 1072 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
mem: location 1072 is 1031
run: address to copy is 1032
run: its type is 1
mem: location 1032 is 0
mem: storing 0 in location 1073
run: tmp:number <- add tmp:number, 1:literal
mem: location 1073 is 0
mem: storing 1 in location 1073
run: len:number <- channel-capacity chan:address:channel
mem: location 1072 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1101
run: chan:address:channel <- next-ingredient 
mem: storing 1031 in location 1103
run: q:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1103 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
mem: location 1103 is 1031
run: address to copy is 1033
run: its type is 2
mem: location 1033 is 1034
mem: storing 1034 in location 1104
run: result:number <- length q:address:array:location/deref
mem: location 1104 is 1034
mem: location 1034 is 4
mem: location 1035 is 0
mem: location 1036 is 0
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1104 is 1034
mem: storing 4 in location 1105
run: reply result:number
mem: location 1105 is 4
run: result 0 is 4
mem: storing 4 in location 1074
run: at-end?:boolean <- greater-or-equal tmp:number, len:number
mem: location 1073 is 1
mem: location 1074 is 4
mem: storing 0 in location 1075
run: break-unless at-end?:boolean, 
mem: location 1075 is 0
run: jumping to instruction 9
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 1072 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
mem: location 1072 is 1031
run: address to copy is 1031
run: its type is 1
mem: location 1031 is 0
mem: storing 0 in location 1076
run: result:boolean <- equal full:number, tmp:number
mem: location 1076 is 0
mem: location 1073 is 1
mem: storing 0 in location 1077
run: reply result:boolean
mem: location 1077 is 0
run: result 0 is 0
mem: storing 0 in location 1043
run: break-unless full:boolean, 
mem: location 1043 is 0
run: jumping to instruction 8
run: circular-buffer:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1041 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
mem: location 1041 is 1031
run: address to copy is 1033
run: its type is 2
mem: location 1033 is 1034
mem: storing 1034 in location 1045
run: free:address:number <- get-address chan:address:channel/deref, first-free:offset
mem: location 1041 is 1031
mem: location 1031 is 0
mem: location 1032 is 0
mem: location 1033 is 1034
mem: location 1041 is 1031
run: address to copy is 1032
mem: storing 1032 in location 1046
run: dest:address:location <- index-address circular-buffer:address:array:location/deref, free:address:number/deref
mem: location 1045 is 1034
mem: location 1034 is 4
mem: location 1035 is 0
mem: location 1036 is 0
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1046 is 1032
mem: location 1032 is 0
mem: location 1045 is 1034
mem: location 1046 is 1032
mem: location 1032 is 0
mem: storing 1035 in location 1047
run: dest:address:location/deref <- copy val:location
mem: location 1042 is 34
mem: location 1047 is 1035
mem: storing 34 in location 1035
run: free:address:number/deref <- add free:address:number/deref, 1:literal
mem: location 1046 is 1032
mem: location 1032 is 0
mem: location 1046 is 1032
mem: storing 1 in location 1032
run: len:number <- length circular-buffer:address:array:location/deref
mem: location 1045 is 1034
mem: location 1034 is 4
mem: location 1035 is 34
mem: location 1036 is 0
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1045 is 1034
mem: storing 4 in location 1048
run: at-end?:boolean <- greater-or-equal free:address:number/deref, len:number
mem: location 1046 is 1032
mem: location 1032 is 1
mem: location 1048 is 4
mem: storing 0 in location 1049
run: break-unless at-end?:boolean, 
mem: location 1049 is 0
run: jumping to instruction 19
run: reply chan:address:channel/same-as-ingredient:0
mem: location 1041 is 1031
run: result 0 is 1031
mem: storing 1031 in location 1
run: 2:boolean <- channel-empty? 1:address:channel
mem: location 1 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1132
run: chan:address:channel <- next-ingredient 
mem: storing 1031 in location 1134
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 1134 is 1031
mem: location 1031 is 0
mem: location 1032 is 1
mem: location 1033 is 1034
mem: location 1134 is 1031
run: address to copy is 1031
run: its type is 1
mem: location 1031 is 0
mem: storing 0 in location 1135
run: free:number <- get chan:address:channel/deref, first-free:offset
mem: location 1134 is 1031
mem: location 1031 is 0
mem: location 1032 is 1
mem: location 1033 is 1034
mem: location 1134 is 1031
run: address to copy is 1032
run: its type is 1
mem: location 1032 is 1
mem: storing 1 in location 1136
run: result:boolean <- equal full:number, free:number
mem: location 1135 is 0
mem: location 1136 is 1
mem: storing 0 in location 1137
run: reply result:boolean
mem: location 1137 is 0
run: result 0 is 0
mem: storing 0 in location 2
run: 3:boolean <- channel-full? 1:address:channel
mem: location 1 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1163
run: chan:address:channel <- next-ingredient 
mem: storing 1031 in location 1165
run: tmp:number <- get chan:address:channel/deref, first-free:offset
mem: location 1165 is 1031
mem: location 1031 is 0
mem: location 1032 is 1
mem: location 1033 is 1034
mem: location 1165 is 1031
run: address to copy is 1032
run: its type is 1
mem: location 1032 is 1
mem: storing 1 in location 1166
run: tmp:number <- add tmp:number, 1:literal
mem: location 1166 is 1
mem: storing 2 in location 1166
run: len:number <- channel-capacity chan:address:channel
mem: location 1165 is 1031
run: default-space:address:array:location <- new location:type, 30:literal
mem: array size is 30
mem: new alloc: 1194
run: chan:address:channel <- next-ingredient 
mem: storing 1031 in location 1196
run: q:address:array:location <- get chan:address:channel/deref, data:offset
mem: location 1196 is 1031
mem: location 1031 is 0
mem: location 1032 is 1
mem: location 1033 is 1034
mem: location 1196 is 1031
run: address to copy is 1033
run: its type is 2
mem: location 1033 is 1034
mem: storing 1034 in location 1197
run: result:number <- length q:address:array:location/deref
mem: location 1197 is 1034
mem: location 1034 is 4
mem: location 1035 is 34
mem: location 1036 is 0
mem: location 1037 is 0
mem: location 1038 is 0
mem: location 1197 is 1034
mem: storing 4 in location 1198
run: reply result:number
mem: location 1198 is 4
run: result 0 is 4
mem: storing 4 in location 1167
run: at-end?:boolean <- greater-or-equal tmp:number, len:number
mem: location 1166 is 2
mem: location 1167 is 4
mem: storing 0 in location 1168
run: break-unless at-end?:boolean, 
mem: location 1168 is 0
run: jumping to instruction 9
run: full:number <- get chan:address:channel/deref, first-full:offset
mem: location 1165 is 1031
mem: location 1031 is 0
mem: location 1032 is 1
mem: location 1033 is 1034
mem: location 1165 is 1031
run: address to copy is 1031
run: its type is 1
mem: location 1031 is 0
mem: storing 0 in location 1169
run: result:boolean <- equal full:number, tmp:number
mem: location 1169 is 0
mem: location 1166 is 2
mem: storing 0 in location 1170
run: reply result:boolean
mem: location 1170 is 0
run: result 0 is 0
mem: storing 0 in location 3
run: memory-should-contain [
    2 <- 0  # empty?
    3 <- 0  # full?
  ]
run: checking location 2
run: checking location 3
