9991 parse: --- defining scenario-channel-write-not-empty
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    1:address:channel <- new-channel 3/capacity\n    1:address:channel <- write 1:address:channel, 34\n    2:boolean <- channel-empty? 1:address:channel\n    3:boolean <- channel-full? 1:address:channel\n  ": "literal-string"}
9992 load: after rewriting: run [
    1:address:channel <- new-channel 3/capacity
    1:address:channel <- write 1:address:channel, 34
    2:boolean <- channel-empty? 1:address:channel
    3:boolean <- channel-full? 1:address:channel
  ]
9993 parse: instruction: memory-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    2 <- 0  # empty?\n    3 <- 0  # full?\n  ": "literal-string"}
9992 load: after rewriting: memory-should-contain [
    2 <- 0  # empty?
    3 <- 0  # full?
  ]
9999 parse: recipe scenario-channel-write-not-empty has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe scenario-channel-write-not-empty
9991 transform: --- deduce types for recipe scenario-channel-write-not-empty
9991 transform: --- collect surrounding spaces for recipe scenario-channel-write-not-empty
9991 transform: --- transform names for recipe scenario-channel-write-not-empty
9991 transform: --- transform braces for recipe scenario-channel-write-not-empty
9992 transform: run ...
9992 transform: memory-should-contain ...
9991 transform: --- compute instruction operations for recipe scenario-channel-write-not-empty
9991 transform: --- perform checks for recipe scenario-channel-write-not-empty
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-channel-write-not-empty
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-channel-write-not-empty
 102 run: run [
    1:address:channel <- new-channel 3/capacity
    1:address:channel <- write 1:address:channel, 34
    2:boolean <- channel-empty? 1:address:channel
    3:boolean <- channel-full? 1:address:channel
  ]
9991 parse: --- defining run1001
9993 parse: instruction: new-channel
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal", "capacity": <>}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- new-channel 3/capacity
9993 parse: instruction: write
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"1": <"address" : <"channel" : <>>>}
9992 load: after rewriting: 1:address:channel <- write 1:address:channel, 34
9993 parse: instruction: channel-empty?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   product: {"2": "boolean"}
9992 load: after rewriting: 2:boolean <- channel-empty? 1:address:channel
9993 parse: instruction: channel-full?
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": <"address" : <"channel" : <>>>}
9993 parse:   product: {"3": "boolean"}
9992 load: after rewriting: 3:boolean <- channel-full? 1:address:channel
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe run1001
9991 transform: --- deduce types for recipe run1001
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: new-channel ...
9992 transform: write ...
9992 transform: channel-empty? ...
9992 transform: channel-full? ...
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: 1:address:channel <- new-channel 3/capacity
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 104 run: result:address:channel <- new channel:type
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1002
 104 run: full:address:number <- get-address *result, first-full:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9998 run: address to copy is 1007
9999 mem: storing 1007 in location 1003
 104 run: *full <- copy 0
9999 mem: location 1003 is 1007
9999 mem: storing 0 in location 1007
 104 run: free:address:number <- get-address *result, first-free:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1004
 104 run: *free <- copy 0
9999 mem: location 1004 is 1008
9999 mem: storing 0 in location 1008
 104 run: capacity:number <- next-ingredient 
9999 mem: storing 3 in location 1005
 104 run: capacity <- add capacity, 1
9999 mem: location 1005 is 3
9999 mem: storing 4 in location 1005
 104 run: dest:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1002 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 0
9999 mem: location 1002 is 1007
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *dest <- new character:type, capacity
9999 mem: location 1005 is 4
9999 mem: array size is 4
9999 mem: new alloc: 1010
9999 mem: location 1006 is 1009
9999 mem: storing 1010 in location 1009
 104 run: reply result
9999 mem: location 1002 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: 1:address:channel <- write 1:address:channel, 34
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 10
9999 mem: new alloc: 1015
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1017
 104 run: val:character <- next-ingredient 
9999 mem: storing 34 in location 1018
 104 run: full:boolean <- channel-full? chan
9999 mem: location 1017 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
9999 mem: new alloc: 1026
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1028
 105 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1028 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1028 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1029
 105 run: tmp <- add tmp, 1
9999 mem: location 1029 is 0
9999 mem: storing 1 in location 1029
 105 run: len:number <- channel-capacity chan
9999 mem: location 1028 is 1007
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1034
 106 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1036
 106 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1036 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1036 is 1007
9998 run: address to copy is 1009
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1037
 106 run: result:number <- length *q
9999 mem: location 1037 is 1010
9999 mem: storing 4 in location 1038
 106 run: reply result
9999 mem: location 1038 is 4
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 4
9999 mem: storing 4 in location 1030
 105 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1029 is 1
9999 mem: location 1030 is 4
9999 mem: storing 0 in location 1031
 105 run: jump-unless at-end?, 
9999 mem: location 1031 is 0
9998 run: jumping to instruction 9
 105 run: full:number <- get *chan, first-full:offset
9999 mem: location 1028 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1028 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1032
 105 run: result:boolean <- equal full, tmp
9999 mem: location 1032 is 0
9999 mem: location 1029 is 1
9999 mem: storing 0 in location 1033
 105 run: reply result
9999 mem: location 1033 is 0
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 0
9999 mem: storing 0 in location 1019
 104 run: jump-unless full, 
9999 mem: location 1019 is 0
9998 run: jumping to instruction 8
 104 run: circular-buffer:address:array:character <- get *chan, data:offset
9999 mem: location 1017 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1017 is 1007
9998 run: address to copy is 1009
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1021
 104 run: free:address:number <- get-address *chan, first-free:offset
9999 mem: location 1017 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1009 is 1010
9999 mem: location 1017 is 1007
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1022
 104 run: dest:address:character <- index-address *circular-buffer, *free
9999 mem: location 1021 is 1010
9999 mem: location 1022 is 1008
9999 mem: location 1008 is 0
9999 mem: storing 1011 in location 1023
 104 run: *dest <- copy val
9999 mem: location 1018 is 34
9999 mem: location 1023 is 1011
9999 mem: storing 34 in location 1011
 104 run: *free <- add *free, 1
9999 mem: location 1022 is 1008
9999 mem: location 1008 is 0
9999 mem: location 1022 is 1008
9999 mem: storing 1 in location 1008
 104 run: len:number <- length *circular-buffer
9999 mem: location 1021 is 1010
9999 mem: storing 4 in location 1024
 104 run: at-end?:boolean <- greater-or-equal *free, len
9999 mem: location 1022 is 1008
9999 mem: location 1008 is 1
9999 mem: location 1024 is 4
9999 mem: storing 0 in location 1025
 104 run: jump-unless at-end?, 
9999 mem: location 1025 is 0
9998 run: jumping to instruction 19
 104 run: reply chan/same-as-ingredient:0
9999 mem: location 1017 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: 2:boolean <- channel-empty? 1:address:channel
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1039
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1041
 104 run: full:number <- get *chan, first-full:offset
9999 mem: location 1041 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1041 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1042
 104 run: free:number <- get *chan, first-free:offset
9999 mem: location 1041 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1041 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1043
 104 run: result:boolean <- equal full, free
9999 mem: location 1042 is 0
9999 mem: location 1043 is 1
9999 mem: storing 0 in location 1044
 104 run: reply result
9999 mem: location 1044 is 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 2
 103 run: 3:boolean <- channel-full? 1:address:channel
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 7
 104 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1028
 104 run: tmp:number <- get *chan, first-free:offset
9999 mem: location 1028 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1028 is 1007
9998 run: address to copy is 1008
9998 run: its type is number
9999 mem: location 1008 is 1
9999 mem: storing 1 in location 1029
 104 run: tmp <- add tmp, 1
9999 mem: location 1029 is 1
9999 mem: storing 2 in location 1029
 104 run: len:number <- channel-capacity chan
9999 mem: location 1028 is 1007
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
 105 run: chan:address:channel <- next-ingredient 
9999 mem: storing 1007 in location 1036
 105 run: q:address:array:character <- get *chan, data:offset
9999 mem: location 1036 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1036 is 1007
9998 run: address to copy is 1009
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1009 is 1010
9999 mem: storing 1010 in location 1037
 105 run: result:number <- length *q
9999 mem: location 1037 is 1010
9999 mem: storing 4 in location 1038
 105 run: reply result
9999 mem: location 1038 is 4
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 4
9999 mem: storing 4 in location 1030
 104 run: at-end?:boolean <- greater-or-equal tmp, len
9999 mem: location 1029 is 2
9999 mem: location 1030 is 4
9999 mem: storing 0 in location 1031
 104 run: jump-unless at-end?, 
9999 mem: location 1031 is 0
9998 run: jumping to instruction 9
 104 run: full:number <- get *chan, first-full:offset
9999 mem: location 1028 is 1007
9999 mem: location 1007 is 0
9999 mem: location 1008 is 1
9999 mem: location 1009 is 1010
9999 mem: location 1028 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 0
9999 mem: storing 0 in location 1032
 104 run: result:boolean <- equal full, tmp
9999 mem: location 1032 is 0
9999 mem: location 1029 is 2
9999 mem: storing 0 in location 1033
 104 run: reply result
9999 mem: location 1033 is 0
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 0
9999 mem: storing 0 in location 3
9999 trace: fall-through: exiting run1001; decrementing callstack depth from 2
 102 run: memory-should-contain [
    2 <- 0  # empty?
    3 <- 0  # full?
  ]
9999 run: checking location 2
9999 run: checking location 3
9999 trace: fall-through: exiting scenario-channel-write-not-empty; decrementing callstack depth from 1
