9991 parse: --- defining main
9993 parse: instruction: test
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"3": "literal"}
9993 parse:   product: {"7": "number", "raw": <>}
9992 load: after rewriting: 7:number/raw <- test 3
9999 parse: recipe main has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:number
9999 parse: header product: z:number
9991 parse: --- defining test
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"1": "literal"}
9993 parse:   product: {"z": <>}
9992 load: after rewriting: z <- copy 1
9999 parse: recipe test has a header
9999 parse: recipe has a header; parsing
9999 parse: header ingredient: a:number
9999 parse: header ingredient: b:number
9999 parse: header product: z:number
9991 parse: --- defining test_2
9993 parse: instruction: copy
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"2": "literal"}
9993 parse:   product: {"z": <>}
9992 load: after rewriting: z <- copy 2
9999 parse: recipe test_2 has a header
9990 transform: === transform_all()
9991 transform: --- resolve ambiguous calls for recipe main
9992 transform: instruction test
9992 transform: checking variant 0: 100
9993 transform: too few ingredients
9992 transform: checking variant 1: -1
9991 transform: --- resolve ambiguous calls for recipe test
9991 transform: --- resolve ambiguous calls for recipe test_2
9991 transform: --- deduce types for recipe main
9991 transform: --- deduce types for recipe test
9992 transform: z => number
9991 transform: --- deduce types for recipe test_2
9992 transform: z => number
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- collect surrounding spaces for recipe test
9991 transform: --- collect surrounding spaces for recipe test_2
9991 transform: --- deduce types from header for test
9992 transform: z <- copy 1
9993 transform: type of z is number
9992 transform: reply z:number
9991 transform: --- deduce types from header for test_2
9992 transform: z <- copy 2
9993 transform: type of z is number
9992 transform: reply z:number
9991 transform: --- transform names for recipe main
9991 transform: --- transform names for recipe test
9993 name: assign z 1
9991 transform: --- transform names for recipe test_2
9993 name: assign z 1
9991 transform: --- transform braces for recipe main
9991 transform: test ...
9991 transform: --- transform braces for recipe test
9991 transform: copy ...
9991 transform:  ...
9991 transform: --- transform braces for recipe test_2
9991 transform: copy ...
9991 transform:  ...
9991 transform: --- compute instruction operations for recipe main
9991 transform: --- compute instruction operations for recipe test
9991 transform: --- compute instruction operations for recipe test_2
9991 transform: --- perform checks for recipe main
9991 transform: --- perform checks for recipe test
9991 transform: --- perform checks for recipe test_2
9991 transform: --- checking reply instructions against header for test
9991 transform: --- checking reply instructions against header for test_2
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: 7:number/raw <- test 3
9999 trace: incrementing callstack depth to 2
 103 run: z <- copy 1
9999 mem: storing 1 in location 1
 103 run: reply z:number
9999 mem: location 1 is 1
9999 trace: reply: decrementing callstack depth from 2
9998 run: result 0 is 1
9999 mem: storing 1 in location 7
9999 trace: fall-through: exiting main; decrementing callstack depth from 1
