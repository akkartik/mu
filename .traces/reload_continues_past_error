9991 parse: --- defining main
9993 parse: instruction: local-scope
9992 load: after rewriting: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9993 parse: instruction: new
9993 parse:   ingredient: {"recipe foo [\n  get 1234:number, foo:offset\n]": "literal-string"}
9993 parse:   product: {"x": <"address" : <"array" : <"character" : <>>>>}
9992 load: after rewriting: x:address:array:character <- new [recipe foo [
  get 1234:number, foo:offset
]]
9993 parse: instruction: reload
9993 parse:   ingredient: {"x": <>}
9992 load: after rewriting: reload x
9993 parse: instruction: copy
9993 parse:   ingredient: {"34": "literal"}
9993 parse:   product: {"1": "number", "raw": <>}
9992 load: after rewriting: 1:number/raw <- copy 34
9990 transform: === transform_all()
9991 transform: --- collect surrounding spaces for recipe main
9991 transform: --- transform names for recipe main
9999 new: location -> location
9993 name: assign x 1
9991 transform: --- transform braces for recipe main
9991 transform: local-scope ...
9991 transform: new ...
9991 transform: reload ...
9991 transform: copy ...
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: main
 102 run: default-space:address:array:location <- local-scope location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1000
 102 run: x:address:array:character <- new [recipe foo [
  get 1234:number, foo:offset
]]
9999 mem: storing 1003 in location 1002
 102 run: reload x
9999 mem: location 1002 is 1003
 102 run: 1:number/raw <- copy 34
9999 mem: storing 34 in location 1
9999 trace: fall-through: exiting main; decrementing callstack depth from 1
