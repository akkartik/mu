schedule: main
run: main 0: (((1 space-address) (names init-counter)) <- ((init-counter)))
run: init-counter/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-counter/main 0: 1000 => ((default-space space-address))
run: init-counter/main 1: (((1 integer)) <- ((copy)) ((23 literal)))
run: init-counter/main 1: 23 => ((1 integer))
mem: ((1 integer)): 1002 <= 23
run: init-counter/main 2: (((2 integer)) <- ((copy)) ((3 literal)))
run: init-counter/main 2: 3 => ((2 integer))
mem: ((2 integer)): 1003 <= 3
run: init-counter/main 3: (((reply)) ((default-space space-address)))
run: main 0: 1000 => ((1 space-address) (names init-counter))
mem: ((1 space-address) (names init-counter)): 1 <= 1000
run: main 1: (((2 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter)))
mem: ((1 space-address) (names init-counter)) => 1000
run: increment-counter/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: increment-counter/main 0: 1031 => ((default-space space-address))
run: increment-counter/main 1: (((0 space-address) (names init-counter)) <- ((next-input)))
arg: nil 0 (1000)
run: increment-counter/main 1: 1000 => ((0 space-address) (names init-counter))
mem: ((0 space-address) (names init-counter)): 1032 <= 1000
run: increment-counter/main 2: (((2 integer) (space 1)) <- ((add)) ((2 integer) (space 1)) ((1 literal)))
mem: ((2 integer) (space 1)) => 3
run: increment-counter/main 2: 4 => ((2 integer) (space 1))
mem: ((2 integer) (space 1)): 1003 <= 4
run: increment-counter/main 3: (((1 integer)) <- ((copy)) ((34 literal)))
run: increment-counter/main 3: 34 => ((1 integer))
mem: ((1 integer)): 1033 <= 34
run: increment-counter/main 4: (((reply)) ((2 integer) (space 1)))
mem: ((2 integer) (space 1)) => 4
run: main 1: 4 => ((2 integer))
mem: ((2 integer)): 2 <= 4
run: main 2: (((3 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter)))
mem: ((1 space-address) (names init-counter)) => 1000
run: increment-counter/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: increment-counter/main 0: 1062 => ((default-space space-address))
run: increment-counter/main 1: (((0 space-address) (names init-counter)) <- ((next-input)))
arg: nil 0 (1000)
run: increment-counter/main 1: 1000 => ((0 space-address) (names init-counter))
mem: ((0 space-address) (names init-counter)): 1063 <= 1000
run: increment-counter/main 2: (((2 integer) (space 1)) <- ((add)) ((2 integer) (space 1)) ((1 literal)))
mem: ((2 integer) (space 1)) => 4
run: increment-counter/main 2: 5 => ((2 integer) (space 1))
mem: ((2 integer) (space 1)): 1003 <= 5
run: increment-counter/main 3: (((1 integer)) <- ((copy)) ((34 literal)))
run: increment-counter/main 3: 34 => ((1 integer))
mem: ((1 integer)): 1064 <= 34
run: increment-counter/main 4: (((reply)) ((2 integer) (space 1)))
mem: ((2 integer) (space 1)) => 5
run: main 2: 5 => ((3 integer))
mem: ((3 integer)): 3 <= 5
schedule: done with routine 
