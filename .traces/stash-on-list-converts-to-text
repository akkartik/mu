9991 parse: --- defining scenario-stash-on-list-converts-to-text
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    x:address:shared:list:number <- push 4, 0\n    x <- push 5, x\n    x <- push 6, x\n    stash [foo foo], x\n  ": "literal-string"}
9992 load: after rewriting: run [
    x:address:shared:list:number <- push 4, 0
    x <- push 5, x
    x <- push 6, x
    stash [foo foo], x
  ]
9993 parse: instruction: trace-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    app: foo foo 6 -> 5 -> 4\n  ": "literal-string"}
9992 load: after rewriting: trace-should-contain [
    app: foo foo 6 -> 5 -> 4
  ]
9999 parse: recipe scenario-stash-on-list-converts-to-text has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- deduce types for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- collect surrounding spaces for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- transform names for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- resolve ambiguous calls for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- compute instruction operations for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- transform braces for recipe scenario-stash-on-list-converts-to-text
9992 transform: run ...
9992 transform: trace-should-contain ...
9992 transform:  ...
9991 transform: --- perform checks for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- type-check 'call' instructions inside recipe scenario-stash-on-list-converts-to-text
9991 transform: --- type-check calls inside recipe scenario-stash-on-list-converts-to-text
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-stash-on-list-converts-to-text
 102 run: run [
    x:address:shared:list:number <- push 4, 0
    x <- push 5, x
    x <- push 6, x
    stash [foo foo], x
  ]
9991 parse: --- defining run1001
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"x": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 load: after rewriting: x:address:shared:list:number <- push 4, 0
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": "literal"}
9993 parse:   ingredient: {"x": <>}
9993 parse:   product: {"x": <>}
9992 load: after rewriting: x <- push 5, x
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"6": "literal"}
9993 parse:   ingredient: {"x": <>}
9993 parse:   product: {"x": <>}
9992 load: after rewriting: x <- push 6, x
9993 parse: instruction: stash
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"foo foo": "literal-string"}
9993 parse:   ingredient: {"x": <>}
9992 load: after rewriting: stash [foo foo], x
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- deduce types for recipe run1001
9992 transform: x => <address : <shared : <list : <number : <>>>>>
9992 transform: x <= <address : <shared : <list : <number : <>>>>>
9992 transform: x <= <address : <shared : <list : <number : <>>>>>
9992 transform: x <= <address : <shared : <list : <number : <>>>>>
9992 transform: x <= <address : <shared : <list : <number : <>>>>>
9992 transform: x <= <address : <shared : <list : <number : <>>>>>
9992 transform: stash_0_1 => <address : <shared : <array : <character : <>>>>>
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9993 name: assign x 1
9993 name: assign stash_0_1 2
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: mismatch: product 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: score for variant 4: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 106
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: mismatch: product 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 3
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 233 push
9993 transform: switching push to push_5
9993 transform: compute type names: push_5
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: result:address:shared:list:_elem <- new {(list _elem): type}
9994 transform:     checking {"(list _elem)": "type"}: "type"
9993 transform: type of (list _elem) is "type"
9994 transform:     checking {"result": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of result is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform: type of val is <"address" : <"_elem" : <>>>
9993 transform:   instruction: *val <- copy x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"val": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"_elem" : <>>>
9993 transform:   instruction: next:address:address:shared:list:_elem <- get-address *result, next:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"next": <"address" : <"address" : <"shared" : <"list" : <"_elem" : <>>>>>>}: <"address" : <"address" : <"shared" : <"list" : <"_elem" : <>>>>>>
9993 transform: type of next is <"address" : <"address" : <"shared" : <"list" : <"_elem" : <>>>>>>
9993 transform:   instruction: *next <- copy in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"shared" : <"list" : <"_elem" : <>>>>>>
9993 transform:   instruction: reply result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: adding mapping from _elem to "literal"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'in:address:shared:list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'result:address:shared:list:_elem <- new {(list _elem): type}'
9993 transform: replacing in ingredient {(list _elem): type}
9993 transform:   after: ?0
9993 transform: replacing in ingredient result:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <number : <>>>
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient *val
9993 transform: _elem => "number"
9993 transform:   after: <address : <number : <>>>
9993 transform: replacing in instruction 'next:address:address:shared:list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient next:address:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <address : <shared : <list : <number : <>>>>>>
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient *next
9993 transform: _elem => "number"
9993 transform:   after: <address : <address : <shared : <list : <number : <>>>>>>
9993 transform: replacing in instruction 'reply result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9992 transform: transforming new specialization: push_5
9991 transform: --- checking reply instructions against header for push_5
9991 transform: --- fill in reply ingredients from header for recipe push_5
9991 transform: --- deduce types for recipe push_5
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: x => number
9992 transform: in => <address : <shared : <list : <number : <>>>>>
9992 transform: result => <address : <shared : <list : <number : <>>>>>
9992 transform: val => <address : <number : <>>>
9992 transform: next => <address : <address : <shared : <list : <number : <>>>>>>
9991 transform: --- deduce types from header for push_5
9993 transform: type of x is number
9993 transform: type of in is <address : <shared : <list : <number : <>>>>>
9993 transform: type of in is <address : <shared : <list : <number : <>>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: number -- {"x": "number"}
9992 transform: instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <list : <number : <>>>>> -- {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: result:address:shared:list:_elem <- new {(list _elem): type}
9993 transform:   product: result: <address : <shared : <list : <number : <>>>>> -- {"result": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: <address : <number : <>>> -- {"val": <"address" : <"number" : <>>>}
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: <address : <number : <>>> -- {"val": <"address" : <"number" : <>>>, "lookup": <>}
9992 transform: instruction: next:address:address:shared:list:_elem <- get-address *result, next:offset
9993 transform:   product: next: <address : <address : <shared : <list : <number : <>>>>>> -- {"next": <"address" : <"address" : <"shared" : <"list" : <"number" : <>>>>>>}
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: <address : <address : <shared : <list : <number : <>>>>>> -- {"next": <"address" : <"address" : <"shared" : <"list" : <"number" : <>>>>>>, "lookup": <>}
9992 transform: instruction: reply result
9991 transform: --- collect surrounding spaces for recipe push_5
9991 transform: --- transform names for recipe push_5
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type list is at offset 0
9993 name: assign val 4
9993 name: element next of type list is at offset 1
9993 name: assign next 5
9991 transform: --- resolve ambiguous calls for recipe push_5
9991 transform: --- compute instruction operations for recipe push_5
9991 transform: --- transform braces for recipe push_5
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: reply ...
9991 transform: --- perform checks for recipe push_5
9991 transform: --- type-check 'call' instructions inside recipe push_5
9991 transform: --- type-check calls inside recipe push_5
9991 transform: --- convert 'new' to 'allocate' for recipe push_5
9992 new: size of "location" is 1
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9992 new: size of <"list" : <"number" : <>>> is 2
9991 transform: --- checking reply instructions against header for push_5
9992 transform: new specialization: push_5
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: score for variant 4: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 5: 1000
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: non-strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9992 transform: score for variant 4: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 5: 1000
9992 transform: instruction to-text-line
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 104
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9992 transform: final score: 107
9992 transform: matches
9992 transform: found variant to specialize: 237 to-text-line_2
9993 transform: switching to-text-line to to-text-line_3
9993 transform: compute type names: to-text-line_3
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"result": <"address" : <"shared" : <"array" : <"character" : <>>>>>}: <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform: type of result is <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: buf:address:shared:buffer <- new-buffer 80
9994 transform:     checking {"80": "literal"}: "literal"
9993 transform: type of 80 is "literal"
9994 transform:     checking {"buf": <"address" : <"shared" : <"buffer" : <>>>>}: <"address" : <"shared" : <"buffer" : <>>>>
9993 transform: type of buf is <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: buf <- to-buffer in, buf, 6
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"6": "literal"}: "literal"
9993 transform: type of 6 is "literal"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: result <- buffer-to-array buf
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:shared:array:character
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'in:address:shared:list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'buf:address:shared:buffer <- new-buffer 80'
9993 transform: replacing in ingredient 80
9993 transform:   after: ?0
9993 transform: replacing in ingredient buf:address:shared:buffer
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'buf <- to-buffer in, buf, 6'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient 6
9993 transform:   after: ?0
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'result <- buffer-to-array buf'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient result
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9992 transform: transforming new specialization: to-text-line_3
9991 transform: --- checking reply instructions against header for to-text-line_3
9991 transform: --- fill in reply ingredients from header for recipe to-text-line_3
9991 transform: --- deduce types for recipe to-text-line_3
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: in => <address : <shared : <list : <number : <>>>>>
9992 transform: buf => <address : <shared : <buffer : <>>>>
9992 transform: result => <address : <shared : <array : <character : <>>>>>
9991 transform: --- deduce types from header for to-text-line_3
9993 transform: type of in is <address : <shared : <list : <number : <>>>>>
9993 transform: type of result is <address : <shared : <array : <character : <>>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <list : <number : <>>>>> -- {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: buf:address:shared:buffer <- new-buffer 80
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: buf <- to-buffer in, buf, 6
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: result <- buffer-to-array buf
9993 transform:   product: result: <address : <shared : <array : <character : <>>>>> -- {"result": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 transform: instruction: reply result:address:shared:array:character
9991 transform: --- collect surrounding spaces for recipe to-text-line_3
9991 transform: --- transform names for recipe to-text-line_3
9993 name: assign in 1
9993 name: assign buf 2
9993 name: assign result 3
9991 transform: --- resolve ambiguous calls for recipe to-text-line_3
9992 transform: instruction new-buffer
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 1000
9992 transform: instruction to-buffer
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 108
9992 transform: matches
9992 transform: found variant to specialize: 238 to-buffer
9993 transform: switching to-buffer to to-buffer_2
9993 transform: compute type names: to-buffer_2
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"buf": <"address" : <"shared" : <"buffer" : <>>>>}: <"address" : <"shared" : <"buffer" : <>>>>
9993 transform: type of buf is <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"buf": <"address" : <"shared" : <"buffer" : <>>>>}: <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9994 transform:     checking {"buf": <"address" : <"shared" : <"buffer" : <>>>>}: <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: {
9993 transform:   instruction: break-if in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: buf <- append buf, 48/0
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"48": "literal", "0": <>}: "literal"
9993 transform: type of 48 is "literal"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: reply 
9993 transform:   instruction: }
9993 transform:   instruction: val:_elem <- get *in, value:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": "_elem"}: "_elem"
9993 transform: type of val is "_elem"
9993 transform:   instruction: buf <- append buf, val
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"val": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: next:address:shared:list:_elem <- rest in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of next is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: nextn:number <- copy next
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"nextn": "number"}: "number"
9993 transform: type of nextn is "number"
9993 transform:   instruction: jump-if next, 1:offset
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"1": "offset"}: "offset"
9993 transform:   instruction: reply 
9993 transform:   instruction: space:character <- copy 32/space
9994 transform:     checking {"32": "literal", "space": <>}: "literal"
9993 transform: type of 32 is "literal"
9994 transform:     checking {"space": "character"}: "character"
9993 transform: type of space is "character"
9993 transform:   instruction: buf <- append buf, space:character
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"space": "character"}: "character"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: s:address:shared:array:character <- new [-> ]
9994 transform:     checking {"-> ": "literal-string"}: "literal-string"
9993 transform: type of ->  is "literal-string"
9994 transform:     checking {"s": <"address" : <"shared" : <"array" : <"character" : <>>>>>}: <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform: type of s is <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform:   instruction: n:number <- length *s
9994 transform:     checking {"s": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"array" : <"character" : <>>>>>
9994 transform:     checking {"n": "number"}: "number"
9993 transform: type of n is "number"
9993 transform:   instruction: buf <- append buf, s
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"s": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"array" : <"character" : <>>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9994 transform:     checking {"remaining": "number"}: "number"
9993 transform: type of remaining is "number"
9994 transform:     checking {"optional-ingredient-found?": "boolean"}: "boolean"
9993 transform: type of optional-ingredient-found? is "boolean"
9993 transform:   instruction: {
9993 transform:   instruction: break-if optional-ingredient-found?
9994 transform:     checking {"optional-ingredient-found?": <>}: <>
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: buf <- to-buffer next, buf
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: reply 
9993 transform:   instruction: }
9993 transform:   instruction: {
9993 transform:   instruction: break-unless remaining
9994 transform:     checking {"remaining": <>}: <>
9994 transform:     deducing type to "number"
9993 transform:   instruction: remaining <- subtract remaining, 1
9994 transform:     checking {"remaining": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"1": "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {"remaining": <>}: <>
9994 transform:     deducing type to "number"
9993 transform:   instruction: buf <- to-buffer next, buf, remaining
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"remaining": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: reply 
9993 transform:   instruction: }
9993 transform:   instruction: s:address:shared:array:character <- new [...]
9994 transform:     checking {"...": "literal-string"}: "literal-string"
9993 transform: type of ... is "literal-string"
9994 transform:     checking {"s": <"address" : <"shared" : <"array" : <"character" : <>>>>>}: <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform:   instruction: append buf, s
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"s": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient buf:address:shared:buffer
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient buf:address:shared:buffer
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'in:address:shared:list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'buf:address:shared:buffer <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient buf:address:shared:buffer
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-if in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'buf <- append buf, 48/0'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient 48/0
9993 transform:   after: ?0
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'val:_elem <- get *in, value:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'buf <- append buf, val'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient val
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'next:address:shared:list:_elem <- rest in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient next:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'nextn:number <- copy next'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient nextn:number
9993 transform:   after: number
9993 transform: replacing in instruction 'jump-if next, 1:offset'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient 1:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction 'space:character <- copy 32/space'
9993 transform: replacing in ingredient 32/space
9993 transform:   after: ?0
9993 transform: replacing in ingredient space:character
9993 transform:   after: character
9993 transform: replacing in instruction 'buf <- append buf, space:character'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient space:character
9993 transform:   after: character
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 's:address:shared:array:character <- new [-> ]'
9993 transform: replacing in ingredient [-> ]
9993 transform:   after: ?0
9993 transform: replacing in ingredient s:address:shared:array:character
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in instruction 'n:number <- length *s'
9993 transform: replacing in ingredient *s
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in ingredient n:number
9993 transform:   after: number
9993 transform: replacing in instruction 'buf <- append buf, s'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient s
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'remaining:number, optional-ingredient-found?:boolean <- next-ingredient '
9993 transform: replacing in ingredient remaining:number
9993 transform:   after: number
9993 transform: replacing in ingredient optional-ingredient-found?:boolean
9993 transform:   after: boolean
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-if optional-ingredient-found?'
9993 transform: replacing in ingredient optional-ingredient-found?
9993 transform:   after: boolean
9993 transform: replacing in instruction 'buf <- to-buffer next, buf'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-unless remaining'
9993 transform: replacing in ingredient remaining
9993 transform:   after: number
9993 transform: replacing in instruction 'remaining <- subtract remaining, 1'
9993 transform: replacing in ingredient remaining
9993 transform:   after: number
9993 transform: replacing in ingredient 1
9993 transform:   after: ?0
9993 transform: replacing in ingredient remaining
9993 transform:   after: number
9993 transform: replacing in instruction 'buf <- to-buffer next, buf, remaining'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient remaining
9993 transform:   after: number
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 's:address:shared:array:character <- new [...]'
9993 transform: replacing in ingredient [...]
9993 transform:   after: ?0
9993 transform: replacing in ingredient s:address:shared:array:character
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in instruction 'append buf, s'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient s
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9992 transform: transforming new specialization: to-buffer_2
9991 transform: --- checking reply instructions against header for to-buffer_2
9991 transform: --- fill in reply ingredients from header for recipe to-buffer_2
9991 transform: --- deduce types for recipe to-buffer_2
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: in => <address : <shared : <list : <number : <>>>>>
9992 transform: buf => <address : <shared : <buffer : <>>>>
9992 transform: val => number
9992 transform: next => <address : <shared : <list : <number : <>>>>>
9992 transform: nextn => number
9992 transform: space => character
9992 transform: s => <address : <shared : <array : <character : <>>>>>
9992 transform: n => number
9992 transform: remaining => number
9992 transform: optional-ingredient-found? => boolean
9991 transform: --- deduce types from header for to-buffer_2
9993 transform: type of in is <address : <shared : <list : <number : <>>>>>
9993 transform: type of buf is <address : <shared : <buffer : <>>>>
9993 transform: type of buf is <address : <shared : <buffer : <>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <list : <number : <>>>>> -- {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: {
9992 transform: instruction: break-if in
9992 transform: instruction: buf <- append buf, 48/0
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: reply buf:address:shared:buffer
9992 transform: instruction: }
9992 transform: instruction: val:_elem <- get *in, value:offset
9993 transform:   product: val: number -- {"val": "number"}
9992 transform: instruction: buf <- append buf, val
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: next:address:shared:list:_elem <- rest in
9993 transform:   product: next: <address : <shared : <list : <number : <>>>>> -- {"next": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: nextn:number <- copy next
9993 transform:   product: nextn: number -- {"nextn": "number"}
9992 transform: instruction: jump-if next, 1:offset
9992 transform: instruction: reply buf:address:shared:buffer
9992 transform: instruction: space:character <- copy 32/space
9993 transform:   product: space: character -- {"space": "character"}
9992 transform: instruction: buf <- append buf, space:character
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: s:address:shared:array:character <- new [-> ]
9993 transform:   product: s: <address : <shared : <array : <character : <>>>>> -- {"s": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 transform: instruction: n:number <- length *s
9993 transform:   product: n: number -- {"n": "number"}
9992 transform: instruction: buf <- append buf, s
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9993 transform:   product: remaining: number -- {"remaining": "number"}
9993 transform:   product: optional-ingredient-found?: boolean -- {"optional-ingredient-found?": "boolean"}
9992 transform: instruction: {
9992 transform: instruction: break-if optional-ingredient-found?
9992 transform: instruction: buf <- to-buffer next, buf
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: reply buf:address:shared:buffer
9992 transform: instruction: }
9992 transform: instruction: {
9992 transform: instruction: break-unless remaining
9992 transform: instruction: remaining <- subtract remaining, 1
9993 transform:   product: remaining: number -- {"remaining": "number"}
9992 transform: instruction: buf <- to-buffer next, buf, remaining
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: reply buf:address:shared:buffer
9992 transform: instruction: }
9992 transform: instruction: s:address:shared:array:character <- new [...]
9993 transform:   product: s: <address : <shared : <array : <character : <>>>>> -- {"s": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 transform: instruction: append buf, s
9992 transform: instruction: reply buf:address:shared:buffer
9991 transform: --- collect surrounding spaces for recipe to-buffer_2
9991 transform: --- transform names for recipe to-buffer_2
9993 name: assign in 1
9993 name: assign buf 2
9993 name: element value of type list is at offset 0
9993 name: assign val 3
9993 name: assign next 4
9993 name: assign nextn 5
9993 name: assign space 6
9993 name: assign s 7
9993 name: assign n 8
9993 name: assign remaining 9
9993 name: assign optional-ingredient-found? 10
9991 transform: --- resolve ambiguous calls for recipe to-buffer_2
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 990
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 106
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 3
9993 transform: mismatch: ingredient 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 4
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 207 append
9993 transform: switching append to append_6
9993 transform: compute type names: append_6
9994 transform:     checking {"buf": <"address" : <"shared" : <"buffer" : <>>>>}: <"address" : <"shared" : <"buffer" : <>>>>
9993 transform: type of buf is <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"buf": <"address" : <"shared" : <"buffer" : <>>>>}: <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9994 transform:     checking {"buf": <"address" : <"shared" : <"buffer" : <>>>>}: <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: text:address:shared:array:character <- to-text x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"text": <"address" : <"shared" : <"array" : <"character" : <>>>>>}: <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform: type of text is <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform:   instruction: len:number <- length *text
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"array" : <"character" : <>>>>>
9994 transform:     checking {"len": "number"}: "number"
9993 transform: type of len is "number"
9993 transform:   instruction: i:number <- copy 0
9994 transform:     checking {"0": "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {"i": "number"}: "number"
9993 transform: type of i is "number"
9993 transform:   instruction: {
9993 transform:   instruction: done?:boolean <- greater-or-equal i, len
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"len": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"done?": "boolean"}: "boolean"
9993 transform: type of done? is "boolean"
9993 transform:   instruction: break-if done?
9994 transform:     checking {"done?": <>}: <>
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: c:character <- index *text, i
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"array" : <"character" : <>>>>>
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"c": "character"}: "character"
9993 transform: type of c is "character"
9993 transform:   instruction: buf <- append buf, c
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"c": <>}: <>
9994 transform:     deducing type to "character"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: i <- add i, 1
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"1": "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9993 transform:   instruction: loop 
9993 transform:   instruction: }
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient buf:address:shared:buffer
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient buf:address:shared:buffer
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'buf:address:shared:buffer <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient buf:address:shared:buffer
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'text:address:shared:array:character <- to-text x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient text:address:shared:array:character
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in instruction 'len:number <- length *text'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in ingredient len:number
9993 transform:   after: number
9993 transform: replacing in instruction 'i:number <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in ingredient i:number
9993 transform:   after: number
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'done?:boolean <- greater-or-equal i, len'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient len
9993 transform:   after: number
9993 transform: replacing in ingredient done?:boolean
9993 transform:   after: boolean
9993 transform: replacing in instruction 'break-if done?'
9993 transform: replacing in ingredient done?
9993 transform:   after: boolean
9993 transform: replacing in instruction 'c:character <- index *text, i'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient c:character
9993 transform:   after: character
9993 transform: replacing in instruction 'buf <- append buf, c'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient c
9993 transform:   after: character
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'i <- add i, 1'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient 1
9993 transform:   after: ?0
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in instruction 'loop '
9993 transform: replacing in instruction '}'
9992 transform: transforming new specialization: append_6
9991 transform: --- checking reply instructions against header for append_6
9991 transform: --- fill in reply ingredients from header for recipe append_6
9991 transform: --- deduce types for recipe append_6
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: buf => <address : <shared : <buffer : <>>>>
9992 transform: x => number
9992 transform: text => <address : <shared : <array : <character : <>>>>>
9992 transform: len => number
9992 transform: i => number
9992 transform: done? => boolean
9992 transform: c => character
9991 transform: --- deduce types from header for append_6
9993 transform: type of buf is <address : <shared : <buffer : <>>>>
9993 transform: type of x is number
9993 transform: type of buf is <address : <shared : <buffer : <>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: number -- {"x": "number"}
9992 transform: instruction: text:address:shared:array:character <- to-text x
9993 transform:   product: text: <address : <shared : <array : <character : <>>>>> -- {"text": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 transform: instruction: len:number <- length *text
9993 transform:   product: len: number -- {"len": "number"}
9992 transform: instruction: i:number <- copy 0
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: {
9992 transform: instruction: done?:boolean <- greater-or-equal i, len
9993 transform:   product: done?: boolean -- {"done?": "boolean"}
9992 transform: instruction: break-if done?
9992 transform: instruction: c:character <- index *text, i
9993 transform:   product: c: character -- {"c": "character"}
9992 transform: instruction: buf <- append buf, c
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: i <- add i, 1
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: loop 
9992 transform: instruction: }
9992 transform: instruction: reply buf:address:shared:buffer
9991 transform: --- collect surrounding spaces for recipe append_6
9991 transform: --- transform names for recipe append_6
9993 name: assign buf 1
9993 name: assign x 2
9993 name: assign text 3
9993 name: assign len 4
9993 name: assign i 5
9993 name: assign done? 6
9993 name: assign c 7
9991 transform: --- resolve ambiguous calls for recipe append_6
9992 transform: instruction to-text
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 5: -1
9991 transform: --- compute instruction operations for recipe append_6
9991 transform: --- transform braces for recipe append_6
9993 transform: append_6: push (open, 6)
9993 transform: push (close, 13)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: to-text ...
9992 transform: length ...
9992 transform: copy ...
9992 transform: greater-or-equal ...
9992 transform: jump-if done?, 4:offset
9992 transform: index ...
9992 transform: append ...
9992 transform: add ...
9992 transform: jump -6:offset
9992 transform:  ...
9991 transform: --- perform checks for recipe append_6
9991 transform: --- type-check 'call' instructions inside recipe append_6
9991 transform: --- type-check calls inside recipe append_6
9991 transform: --- convert 'new' to 'allocate' for recipe append_6
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for append_6
9992 transform: new specialization: append_6
9992 transform: instruction rest
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9992 transform: score for variant 2: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 106
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 235 rest
9993 transform: switching rest to rest_3
9993 transform: compute type names: rest_3
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of in is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"result": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>, "contained-in": "in"}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: type of result is <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"in": <"address" : <"shared" : <"list" : <"_elem" : <>>>>>}: <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: result <- get *in, next:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"list" : <"_elem" : <>>>>>
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:shared:list:_elem/contained-in:in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'in:address:shared:list:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient in:address:shared:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in instruction 'result <- get *in, next:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: <address : <shared : <list : <number : <>>>>>
9992 transform: transforming new specialization: rest_3
9991 transform: --- checking reply instructions against header for rest_3
9991 transform: --- fill in reply ingredients from header for recipe rest_3
9991 transform: --- deduce types for recipe rest_3
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: in => <address : <shared : <list : <number : <>>>>>
9992 transform: result => <address : <shared : <list : <number : <>>>>>
9991 transform: --- deduce types from header for rest_3
9993 transform: type of in is <address : <shared : <list : <number : <>>>>>
9993 transform: type of result is <address : <shared : <list : <number : <>>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: in: <address : <shared : <list : <number : <>>>>> -- {"in": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: result <- get *in, next:offset
9993 transform:   product: result: <address : <shared : <list : <number : <>>>>> -- {"result": <"address" : <"shared" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: reply result:address:shared:list:_elem/contained-in:in
9991 transform: --- collect surrounding spaces for recipe rest_3
9991 transform: --- transform names for recipe rest_3
9993 name: assign in 1
9993 name: element next of type list is at offset 1
9993 name: assign result 2
9991 transform: --- resolve ambiguous calls for recipe rest_3
9991 transform: --- compute instruction operations for recipe rest_3
9991 transform: --- transform braces for recipe rest_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- perform checks for recipe rest_3
9991 transform: --- type-check 'call' instructions inside recipe rest_3
9991 transform: --- type-check calls inside recipe rest_3
9991 transform: --- convert 'new' to 'allocate' for recipe rest_3
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for rest_3
9992 transform: new specialization: rest_3
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 5: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 5: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 106
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 3
9993 transform: mismatch: ingredient 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 4
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 5
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 207 append
9993 transform: switching append to append_7
9993 transform: compute type names: append_7
9994 transform:     checking {"buf": <"address" : <"shared" : <"buffer" : <>>>>}: <"address" : <"shared" : <"buffer" : <>>>>
9993 transform: type of buf is <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"buf": <"address" : <"shared" : <"buffer" : <>>>>}: <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}: <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform: type of default-space is <"address" : <"shared" : <"array" : <"location" : <>>>>>
9993 transform:   instruction: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9994 transform:     checking {"buf": <"address" : <"shared" : <"buffer" : <>>>>}: <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: x:_elem <- next-ingredient-without-typechecking 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: text:address:shared:array:character <- to-text x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"text": <"address" : <"shared" : <"array" : <"character" : <>>>>>}: <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform: type of text is <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform:   instruction: len:number <- length *text
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"array" : <"character" : <>>>>>
9994 transform:     checking {"len": "number"}: "number"
9993 transform: type of len is "number"
9993 transform:   instruction: i:number <- copy 0
9994 transform:     checking {"0": "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {"i": "number"}: "number"
9993 transform: type of i is "number"
9993 transform:   instruction: {
9993 transform:   instruction: done?:boolean <- greater-or-equal i, len
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"len": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"done?": "boolean"}: "boolean"
9993 transform: type of done? is "boolean"
9993 transform:   instruction: break-if done?
9994 transform:     checking {"done?": <>}: <>
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: c:character <- index *text, i
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"array" : <"character" : <>>>>>
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"c": "character"}: "character"
9993 transform: type of c is "character"
9993 transform:   instruction: buf <- append buf, c
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9994 transform:     checking {"c": <>}: <>
9994 transform:     deducing type to "character"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"shared" : <"buffer" : <>>>>
9993 transform:   instruction: i <- add i, 1
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"1": "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9993 transform:   instruction: loop 
9993 transform:   instruction: }
9993 transform: adding mapping from _elem to <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient buf:address:shared:buffer
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient buf:address:shared:buffer
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'default-space:address:shared:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:shared:array:location
9993 transform:   after: <address : <shared : <array : <number : <>>>>>
9993 transform: replacing in instruction 'buf:address:shared:buffer <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient buf:address:shared:buffer
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient-without-typechecking '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in instruction 'text:address:shared:array:character <- to-text x'
9993 transform: replacing in ingredient x
9993 transform: _elem => <"address" : <"shared" : <"array" : <"character" : <>>>>>
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in ingredient text:address:shared:array:character
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in instruction 'len:number <- length *text'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in ingredient len:number
9993 transform:   after: number
9993 transform: replacing in instruction 'i:number <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in ingredient i:number
9993 transform:   after: number
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'done?:boolean <- greater-or-equal i, len'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient len
9993 transform:   after: number
9993 transform: replacing in ingredient done?:boolean
9993 transform:   after: boolean
9993 transform: replacing in instruction 'break-if done?'
9993 transform: replacing in ingredient done?
9993 transform:   after: boolean
9993 transform: replacing in instruction 'c:character <- index *text, i'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <shared : <array : <character : <>>>>>
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient c:character
9993 transform:   after: character
9993 transform: replacing in instruction 'buf <- append buf, c'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in ingredient c
9993 transform:   after: character
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <shared : <buffer : <>>>>
9993 transform: replacing in instruction 'i <- add i, 1'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient 1
9993 transform:   after: ?0
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in instruction 'loop '
9993 transform: replacing in instruction '}'
9992 transform: transforming new specialization: append_7
9991 transform: --- checking reply instructions against header for append_7
9991 transform: --- fill in reply ingredients from header for recipe append_7
9991 transform: --- deduce types for recipe append_7
9992 transform: default-space => <address : <shared : <array : <number : <>>>>>
9992 transform: buf => <address : <shared : <buffer : <>>>>
9992 transform: x => <address : <shared : <array : <character : <>>>>>
9992 transform: text => <address : <shared : <array : <character : <>>>>>
9992 transform: len => number
9992 transform: i => number
9992 transform: done? => boolean
9992 transform: c => character
9991 transform: --- deduce types from header for append_7
9993 transform: type of buf is <address : <shared : <buffer : <>>>>
9993 transform: type of x is <address : <shared : <array : <character : <>>>>>
9993 transform: type of buf is <address : <shared : <buffer : <>>>>
9992 transform: instruction: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <shared : <array : <number : <>>>>> -- {"default-space": <"address" : <"shared" : <"array" : <"location" : <>>>>>}
9992 transform: instruction: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: x:_elem <- next-ingredient-without-typechecking 
9993 transform:   product: x: <address : <shared : <array : <character : <>>>>> -- {"x": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 transform: instruction: text:address:shared:array:character <- to-text x
9993 transform:   product: text: <address : <shared : <array : <character : <>>>>> -- {"text": <"address" : <"shared" : <"array" : <"character" : <>>>>>}
9992 transform: instruction: len:number <- length *text
9993 transform:   product: len: number -- {"len": "number"}
9992 transform: instruction: i:number <- copy 0
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: {
9992 transform: instruction: done?:boolean <- greater-or-equal i, len
9993 transform:   product: done?: boolean -- {"done?": "boolean"}
9992 transform: instruction: break-if done?
9992 transform: instruction: c:character <- index *text, i
9993 transform:   product: c: character -- {"c": "character"}
9992 transform: instruction: buf <- append buf, c
9993 transform:   product: buf: <address : <shared : <buffer : <>>>> -- {"buf": <"address" : <"shared" : <"buffer" : <>>>>}
9992 transform: instruction: i <- add i, 1
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: loop 
9992 transform: instruction: }
9992 transform: instruction: reply buf:address:shared:buffer
9991 transform: --- collect surrounding spaces for recipe append_7
9991 transform: --- transform names for recipe append_7
9993 name: assign buf 1
9993 name: assign x 2
9993 name: assign text 3
9993 name: assign len 4
9993 name: assign i 5
9993 name: assign done? 6
9993 name: assign c 7
9991 transform: --- resolve ambiguous calls for recipe append_7
9992 transform: instruction to-text
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 5: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 6: -1
9991 transform: --- compute instruction operations for recipe append_7
9991 transform: --- transform braces for recipe append_7
9993 transform: append_7: push (open, 6)
9993 transform: push (close, 13)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: to-text ...
9992 transform: length ...
9992 transform: copy ...
9992 transform: greater-or-equal ...
9992 transform: jump-if done?, 4:offset
9992 transform: index ...
9992 transform: append ...
9992 transform: add ...
9992 transform: jump -6:offset
9992 transform:  ...
9991 transform: --- perform checks for recipe append_7
9991 transform: --- type-check 'call' instructions inside recipe append_7
9991 transform: --- type-check calls inside recipe append_7
9991 transform: --- convert 'new' to 'allocate' for recipe append_7
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for append_7
9992 transform: new specialization: append_7
9992 transform: instruction to-buffer
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 1000
9992 transform: instruction to-buffer
9993 transform: mismatch: ingredient 0
9992 transform: score for base: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: score for variant 1: 999
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for base: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: score for variant 4: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: score for variant 5: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9992 transform: score for variant 6: 999
9991 transform: --- compute instruction operations for recipe to-buffer_2
9991 transform: --- transform braces for recipe to-buffer_2
9993 transform: to-buffer_2: push (open, 3)
9993 transform: push (close, 7)
9993 transform: to-buffer_2: push (open, 20)
9993 transform: push (close, 24)
9993 transform: to-buffer_2: push (open, 25)
9993 transform: push (close, 30)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: jump-if in, 2:offset
9992 transform: append ...
9992 transform: reply ...
9992 transform: get ...
9992 transform: append ...
9992 transform: rest ...
9992 transform: copy ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: copy ...
9992 transform: append ...
9992 transform: new ...
9992 transform: length ...
9992 transform: append ...
9992 transform: next-ingredient ...
9992 transform: jump-if optional-ingredient-found?, 2:offset
9992 transform: to-buffer ...
9992 transform: reply ...
9992 transform: jump-unless remaining, 3:offset
9992 transform: subtract ...
9992 transform: to-buffer ...
9992 transform: reply ...
9992 transform: new ...
9992 transform: append ...
9992 transform:  ...
9991 transform: --- perform checks for recipe to-buffer_2
9991 transform: --- type-check 'call' instructions inside recipe to-buffer_2
9991 transform: --- type-check calls inside recipe to-buffer_2
9991 transform: --- convert 'new' to 'allocate' for recipe to-buffer_2
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for to-buffer_2
9992 transform: new specialization: to-buffer_2
9992 transform: instruction buffer-to-array
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for base: 1000
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: score for variant 0: 1000
9991 transform: --- compute instruction operations for recipe to-text-line_3
9991 transform: --- transform braces for recipe to-text-line_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new-buffer ...
9992 transform: to-buffer ...
9992 transform: buffer-to-array ...
9992 transform:  ...
9991 transform: --- perform checks for recipe to-text-line_3
9991 transform: --- type-check 'call' instructions inside recipe to-text-line_3
9991 transform: --- type-check calls inside recipe to-text-line_3
9991 transform: --- convert 'new' to 'allocate' for recipe to-text-line_3
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for to-text-line_3
9992 transform: new specialization: to-text-line_3
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: push ...
9992 transform: push ...
9992 transform: push ...
9992 transform:  ...
9992 transform: stash ...
9992 transform:  ...
9991 transform: --- perform checks for recipe run1001
9991 transform: --- type-check 'call' instructions inside recipe run1001
9991 transform: --- type-check calls inside recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: x:address:shared:list:number <- push_5 4, 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 mem: new alloc: 1000
9999 mem: storing 6 in location 1001
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1003
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 0 in location 1004
 104 run: result:address:shared:list:_elem <- new {(list _elem): type}
9999 mem: allocating size 3
9999 mem: new alloc: 1008
9999 mem: storing 1008 in location 1005
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 4
9999 mem: location 1006 is 1009
9999 mem: storing 4 in location 1009
 104 run: next:address:address:shared:list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 4
9999 mem: location 1010 is 0
9999 mem: location 1005 is 1008
9999 mem: skipping refcount at 1008
9999 type: type deduced to be number$
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 0
9999 mem: location 1007 is 1010
9999 mem: storing 0 in location 1010
 104 run: reply result
9999 mem: location 1005 is 1008
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1
 103 run: x <- push_5 5, x
9999 mem: location 1 is 1008
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1003
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1004
 104 run: result:address:shared:list:_elem <- new {(list _elem): type}
9999 mem: allocating size 3
9999 mem: new alloc: 1011
9999 mem: storing 1011 in location 1005
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1011
9999 mem: skipping refcount at 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1012 is 0
9999 mem: location 1013 is 0
9999 mem: location 1005 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9999 mem: storing 1012 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 5
9999 mem: location 1006 is 1012
9999 mem: storing 5 in location 1012
 104 run: next:address:address:shared:list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1011
9999 mem: skipping refcount at 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1012 is 5
9999 mem: location 1013 is 0
9999 mem: location 1005 is 1011
9999 mem: skipping refcount at 1011
9999 type: type deduced to be number$
9998 run: address to copy is 1013
9999 mem: storing 1013 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 1008
9999 mem: location 1007 is 1013
9999 mem: storing 1008 in location 1013
 104 run: reply result
9999 mem: location 1005 is 1011
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 1
 103 run: x <- push_5 6, x
9999 mem: location 1 is 1011
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 104 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 6 in location 1003
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1004
 104 run: result:address:shared:list:_elem <- new {(list _elem): type}
9999 mem: allocating size 3
9999 mem: new alloc: 1014
9999 mem: storing 1014 in location 1005
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1005 is 1014
9999 mem: skipping refcount at 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1015 is 0
9999 mem: location 1016 is 0
9999 mem: location 1005 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1015
9999 mem: storing 1015 in location 1006
 104 run: *val <- copy x
9999 mem: location 1003 is 6
9999 mem: location 1006 is 1015
9999 mem: storing 6 in location 1015
 104 run: next:address:address:shared:list:_elem <- get-address *result, next:offset
9999 mem: location 1005 is 1014
9999 mem: skipping refcount at 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1015 is 6
9999 mem: location 1016 is 0
9999 mem: location 1005 is 1014
9999 mem: skipping refcount at 1014
9999 type: type deduced to be number$
9998 run: address to copy is 1016
9999 mem: storing 1016 in location 1007
 104 run: *next <- copy in
9999 mem: location 1004 is 1011
9999 mem: location 1007 is 1016
9999 mem: storing 1011 in location 1016
 104 run: reply result
9999 mem: location 1005 is 1014
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1014
9999 mem: storing 1014 in location 1
 103 run: stash_0_1:address:shared:array:character <- to-text-line_3 x
9999 mem: location 1 is 1014
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: allocating size 6
9999 mem: new alloc: 1017
9999 mem: storing 4 in location 1018
 104 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1014 in location 1020
 104 run: buf:address:shared:buffer <- new-buffer 80
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 mem: new alloc: 1023
9999 mem: storing 5 in location 1024
 105 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 80 in location 1026
 105 run: result <- new buffer:type
9999 mem: allocating size 3
9999 mem: new alloc: 1030
9999 mem: storing 1030 in location 1027
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1027 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1027 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1028
 105 run: *len:address:number <- copy 0
9999 mem: location 1028 is 1031
9999 mem: storing 0 in location 1031
 105 run: s:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1027 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 0
9999 mem: location 1032 is 0
9999 mem: location 1027 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9999 mem: storing 1032 in location 1029
 105 run: *s <- new character:type, capacity
9999 mem: location 1026 is 80
9999 mem: array size is 80
9999 mem: allocating size 82
9999 mem: new alloc: 1033
9999 mem: storing 80 in location 1034
9999 mem: location 1029 is 1032
9999 mem: storing 1033 in location 1032
 105 run: reply result
9999 mem: location 1027 is 1030
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1021
 104 run: buf <- to-buffer_2 in, buf, 6
9999 mem: location 1020 is 1014
9999 mem: location 1021 is 1030
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1115
9999 mem: storing 11 in location 1116
 105 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1014 in location 1118
 105 run: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1119
 105 run: jump-if in, 
9999 mem: location 1118 is 1014
9998 run: jumping to instruction 7
 105 run: val:_elem <- get *in, value:offset
9999 mem: location 1118 is 1014
9999 mem: skipping refcount at 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1015 is 6
9999 mem: location 1016 is 1011
9999 mem: location 1118 is 1014
9999 mem: skipping refcount at 1014
9998 run: address to copy is 1015
9998 run: its type is number
9999 mem: location 1015 is 6
9999 mem: storing 6 in location 1120
 105 run: buf <- append_6 buf, val
9999 mem: location 1119 is 1030
9999 mem: location 1120 is 6
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 mem: new alloc: 1128
9999 mem: storing 8 in location 1129
 106 run: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1131
 106 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 6 in location 1132
 106 run: text:address:shared:array:character <- to-text_2 x
9999 mem: location 1132 is 6
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
9999 mem: allocating size 18
9999 mem: new alloc: 1138
9999 mem: storing 16 in location 1139
 107 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing 6 in location 1141
 107 run: jump-if n, 
9999 mem: location 1141 is 6
9998 run: jumping to instruction 6
 107 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1143
 107 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1141 is 6
9999 mem: storing 0 in location 1144
 107 run: jump-unless negative?, 
9999 mem: location 1144 is 0
9998 run: jumping to instruction 13
 107 run: tmp:address:shared:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 108 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 1026
 108 run: result <- new buffer:type
9999 mem: allocating size 3
9999 mem: new alloc: 1156
9999 mem: storing 1156 in location 1027
 108 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1027 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 0
9999 mem: location 1158 is 0
9999 mem: location 1027 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1157
9999 mem: storing 1157 in location 1028
 108 run: *len:address:number <- copy 0
9999 mem: location 1028 is 1157
9999 mem: storing 0 in location 1157
 108 run: s:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1027 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 0
9999 mem: location 1158 is 0
9999 mem: location 1027 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1158
9999 mem: storing 1158 in location 1029
 108 run: *s <- new character:type, capacity
9999 mem: location 1026 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 1159
9999 mem: storing 30 in location 1160
9999 mem: location 1029 is 1158
9999 mem: storing 1159 in location 1158
 108 run: reply result
9999 mem: location 1027 is 1156
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1156
9999 mem: storing 1156 in location 1145
 107 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1146
 107 run: done?:boolean <- equal n, 0
9999 mem: location 1141 is 6
9999 mem: storing 0 in location 1147
 107 run: jump-if done?, 
9999 mem: location 1147 is 0
9998 run: jump-if fell through
 107 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1141 is 6
9999 mem: storing 0 in location 1141
9999 mem: storing 6 in location 1148
 107 run: c:character <- add digit-base, digit
9999 mem: location 1146 is 48
9999 mem: location 1148 is 6
9999 mem: storing 54 in location 1149
 107 run: tmp:address:shared:buffer <- append_2 tmp, c
9999 mem: location 1145 is 1156
9999 mem: location 1149 is 54
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 mem: new alloc: 1191
9999 mem: storing 9 in location 1192
 108 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1156 in location 1194
 108 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 54 in location 1195
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1159
9999 mem: location 1194 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1157
9999 mem: storing 1157 in location 1196
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 54
9999 mem: storing 0 in location 1197
 108 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1156
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 109 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1156 in location 1003
 109 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1159
9999 mem: location 1003 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1157
9998 run: its type is number
9999 mem: location 1157 is 0
9999 mem: storing 0 in location 1004
 109 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1159
9999 mem: location 1003 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1158
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1158 is 1159
9999 mem: storing 1159 in location 1005
 109 run: capacity:number <- length *s
9999 mem: location 1005 is 1159
9999 mem: skipping refcount at 1159
9999 mem: storing 30 in location 1006
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 0
9999 mem: location 1006 is 30
9999 mem: storing 0 in location 1007
 109 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 108 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 108 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 0
9999 mem: location 1158 is 1159
9999 mem: location 1194 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1158
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1158 is 1159
9999 mem: storing 1159 in location 1200
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1159
9999 mem: skipping refcount at 1159
9999 mem: location 1196 is 1157
9999 mem: location 1157 is 0
9999 mem: storing 1161 in location 1201
 108 run: *dest <- copy c
9999 mem: location 1195 is 54
9999 mem: location 1201 is 1161
9999 mem: storing 54 in location 1161
 108 run: *len <- add *len, 1
9999 mem: location 1196 is 1157
9999 mem: location 1157 is 0
9999 mem: location 1196 is 1157
9999 mem: storing 1 in location 1157
 108 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1156
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1156
9999 mem: storing 1156 in location 1145
 107 run: jump 
9998 run: jumping to instruction 17
 107 run: done?:boolean <- equal n, 0
9999 mem: location 1141 is 0
9999 mem: storing 1 in location 1147
 107 run: jump-if done?, 
9999 mem: location 1147 is 1
9998 run: jumping to instruction 23
 107 run: jump-unless negate-result:boolean, 
9999 mem: location 1143 is 0
9998 run: jumping to instruction 27
 107 run: len:number <- get *tmp, length:offset
9999 mem: location 1145 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1159
9999 mem: location 1145 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1157
9998 run: its type is number
9999 mem: location 1157 is 1
9999 mem: storing 1 in location 1150
 107 run: buf:address:shared:array:character <- get *tmp, data:offset
9999 mem: location 1145 is 1156
9999 mem: skipping refcount at 1156
9999 mem: location 1157 is 1
9999 mem: location 1158 is 1159
9999 mem: location 1145 is 1156
9999 mem: skipping refcount at 1156
9998 run: address to copy is 1158
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1158 is 1159
9999 mem: storing 1159 in location 1151
 107 run: result <- new character:type, len
9999 mem: location 1150 is 1
9999 mem: array size is 1
9999 mem: allocating size 3
9999 mem: new alloc: 1202
9999 mem: storing 1 in location 1203
9999 mem: storing 1202 in location 1142
 107 run: i:number <- subtract len, 1
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1152
 107 run: j:number <- copy 0
9999 mem: storing 0 in location 1153
 107 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1152 is 0
9999 mem: storing 0 in location 1147
 107 run: jump-if done?, 
9999 mem: location 1147 is 0
9998 run: jump-if fell through
 107 run: src:character <- index *buf, i
9999 mem: location 1151 is 1159
9999 mem: skipping refcount at 1159
9998 run: base address is 1160
9999 mem: location 1152 is 0
9998 run: address to copy is 1161
9998 run: its type is character
9999 mem: location 1161 is 54
9999 mem: storing 54 in location 1154
 107 run: dest:address:character <- index-address *result, j
9999 mem: location 1142 is 1202
9999 mem: skipping refcount at 1202
9999 mem: location 1153 is 0
9999 mem: storing 1204 in location 1155
 107 run: *dest <- copy src
9999 mem: location 1154 is 54
9999 mem: location 1155 is 1204
9999 mem: storing 54 in location 1204
 107 run: i <- subtract i, 1
9999 mem: location 1152 is 0
9999 mem: storing -1 in location 1152
 107 run: j <- add j, 1
9999 mem: location 1153 is 0
9999 mem: storing 1 in location 1153
 107 run: jump 
9998 run: jumping to instruction 34
 107 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1152 is -1
9999 mem: storing 1 in location 1147
 107 run: jump-if done?, 
9999 mem: location 1147 is 1
9998 run: jumping to instruction 42
 107 run: reply result:address:shared:array:character
9999 mem: location 1142 is 1202
9999 abandon: saving in free-list of size 18
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1202
9999 mem: storing 1202 in location 1133
 106 run: len:number <- length *text
9999 mem: location 1133 is 1202
9999 mem: skipping refcount at 1202
9999 mem: storing 1 in location 1134
 106 run: i:number <- copy 0
9999 mem: storing 0 in location 1135
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 0
9999 mem: location 1134 is 1
9999 mem: storing 0 in location 1136
 106 run: jump-if done?, 
9999 mem: location 1136 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1133 is 1202
9999 mem: skipping refcount at 1202
9998 run: base address is 1203
9999 mem: location 1135 is 0
9998 run: address to copy is 1204
9998 run: its type is character
9999 mem: location 1204 is 54
9999 mem: storing 54 in location 1137
 106 run: buf <- append_2 buf, c
9999 mem: location 1131 is 1030
9999 mem: location 1137 is 54
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 107 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 107 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 54 in location 1195
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 0
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 54
9999 mem: storing 0 in location 1197
 107 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 108 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 108 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 0
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 0
9999 mem: storing 0 in location 1004
 108 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 0
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 108 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 0
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 108 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 107 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 107 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 0
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 0
9999 mem: storing 1035 in location 1201
 107 run: *dest <- copy c
9999 mem: location 1195 is 54
9999 mem: location 1201 is 1035
9999 mem: storing 54 in location 1035
 107 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 0
9999 mem: location 1196 is 1031
9999 mem: storing 1 in location 1031
 107 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1131
 106 run: i <- add i, 1
9999 mem: location 1135 is 0
9999 mem: storing 1 in location 1135
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 1
9999 mem: location 1134 is 1
9999 mem: storing 1 in location 1136
 106 run: jump-if done?, 
9999 mem: location 1136 is 1
9998 run: jumping to instruction 13
 106 run: reply buf:address:shared:buffer
9999 mem: location 1131 is 1030
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1119
 105 run: next:address:shared:list:_elem <- rest_3 in
9999 mem: location 1118 is 1014
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 mem: new alloc: 1205
9999 mem: storing 3 in location 1206
 106 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1014 in location 1208
 106 run: result <- get *in, next:offset
9999 mem: location 1208 is 1014
9999 mem: skipping refcount at 1014
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1015 is 6
9999 mem: location 1016 is 1011
9999 mem: location 1208 is 1014
9999 mem: skipping refcount at 1014
9999 type: type deduced to be number$
9998 run: address to copy is 1016
9998 run: its type is <address : <shared : <list : <number : <>>>>>
9999 mem: location 1016 is 1011
9999 mem: storing 1011 in location 1209
 106 run: reply result:address:shared:list:_elem/contained-in:in
9999 mem: location 1209 is 1011
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1011
9999 mem: storing 1011 in location 1121
 105 run: nextn:number <- copy next
9999 mem: location 1121 is 1011
9999 mem: storing 1011 in location 1122
 105 run: jump-if next, 1:offset
9999 mem: location 1121 is 1011
9998 run: jumping to instruction 14
 105 run: space:character <- copy 32/space
9999 mem: storing 32 in location 1123
 105 run: buf <- append_2 buf, space:character
9999 mem: location 1119 is 1030
9999 mem: location 1123 is 32
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 106 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 106 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1195
 106 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 106 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 32
9999 mem: storing 0 in location 1197
 106 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 106 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 107 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 107 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 1
9999 mem: storing 1 in location 1004
 107 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 107 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 107 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 1
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 107 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 106 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 106 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 1
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 106 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 1
9999 mem: storing 1036 in location 1201
 106 run: *dest <- copy c
9999 mem: location 1195 is 32
9999 mem: location 1201 is 1036
9999 mem: storing 32 in location 1036
 106 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 1
9999 mem: location 1196 is 1031
9999 mem: storing 2 in location 1031
 106 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1119
 105 run: s:address:shared:array:character <- new [-> ]
9999 mem: storing 1210 in location 1124
 105 run: n:number <- length *s
9999 mem: location 1124 is 1210
9999 mem: skipping refcount at 1210
9999 mem: storing 3 in location 1125
 105 run: buf <- append_7 buf, s
9999 mem: location 1119 is 1030
9999 mem: location 1124 is 1210
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
 106 run: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1131
 106 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1210 in location 1132
 106 run: text:address:shared:array:character <- to-text x
9999 mem: location 1132 is 1210
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: allocating size 4
9999 mem: new alloc: 1215
9999 mem: storing 2 in location 1216
 107 run: x:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1210 in location 1218
 107 run: reply x
9999 mem: location 1218 is 1210
9999 abandon: saving in free-list of size 4
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1210
9999 mem: storing 1210 in location 1133
 106 run: len:number <- length *text
9999 mem: location 1133 is 1210
9999 mem: skipping refcount at 1210
9999 mem: storing 3 in location 1134
 106 run: i:number <- copy 0
9999 mem: storing 0 in location 1135
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 0
9999 mem: location 1134 is 3
9999 mem: storing 0 in location 1136
 106 run: jump-if done?, 
9999 mem: location 1136 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1133 is 1210
9999 mem: skipping refcount at 1210
9998 run: base address is 1211
9999 mem: location 1135 is 0
9998 run: address to copy is 1212
9998 run: its type is character
9999 mem: location 1212 is 45
9999 mem: storing 45 in location 1137
 106 run: buf <- append_2 buf, c
9999 mem: location 1131 is 1030
9999 mem: location 1137 is 45
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 107 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 107 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 45 in location 1195
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 2
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 45
9999 mem: storing 0 in location 1197
 107 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 108 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 108 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 2
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 2
9999 mem: storing 2 in location 1004
 108 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 2
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 108 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 2
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 108 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 107 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 107 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 2
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 2
9999 mem: storing 1037 in location 1201
 107 run: *dest <- copy c
9999 mem: location 1195 is 45
9999 mem: location 1201 is 1037
9999 mem: storing 45 in location 1037
 107 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 2
9999 mem: location 1196 is 1031
9999 mem: storing 3 in location 1031
 107 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1131
 106 run: i <- add i, 1
9999 mem: location 1135 is 0
9999 mem: storing 1 in location 1135
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 1
9999 mem: location 1134 is 3
9999 mem: storing 0 in location 1136
 106 run: jump-if done?, 
9999 mem: location 1136 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1133 is 1210
9999 mem: skipping refcount at 1210
9998 run: base address is 1211
9999 mem: location 1135 is 1
9998 run: address to copy is 1213
9998 run: its type is character
9999 mem: location 1213 is 62
9999 mem: storing 62 in location 1137
 106 run: buf <- append_2 buf, c
9999 mem: location 1131 is 1030
9999 mem: location 1137 is 62
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 107 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 107 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 62 in location 1195
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 3
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 62
9999 mem: storing 0 in location 1197
 107 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 108 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 108 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 3
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 3
9999 mem: storing 3 in location 1004
 108 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 3
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 108 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 3
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 108 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 107 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 107 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 3
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 3
9999 mem: storing 1038 in location 1201
 107 run: *dest <- copy c
9999 mem: location 1195 is 62
9999 mem: location 1201 is 1038
9999 mem: storing 62 in location 1038
 107 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 3
9999 mem: location 1196 is 1031
9999 mem: storing 4 in location 1031
 107 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1131
 106 run: i <- add i, 1
9999 mem: location 1135 is 1
9999 mem: storing 2 in location 1135
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 2
9999 mem: location 1134 is 3
9999 mem: storing 0 in location 1136
 106 run: jump-if done?, 
9999 mem: location 1136 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1133 is 1210
9999 mem: skipping refcount at 1210
9998 run: base address is 1211
9999 mem: location 1135 is 2
9998 run: address to copy is 1214
9998 run: its type is character
9999 mem: location 1214 is 32
9999 mem: storing 32 in location 1137
 106 run: buf <- append_2 buf, c
9999 mem: location 1131 is 1030
9999 mem: location 1137 is 32
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 107 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 107 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1195
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 4
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 108 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 108 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 4
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 4
9999 mem: storing 4 in location 1004
 108 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 4
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 108 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 4
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 108 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 107 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 107 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 4
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 4
9999 mem: storing 1039 in location 1201
 107 run: *dest <- copy c
9999 mem: location 1195 is 32
9999 mem: location 1201 is 1039
9999 mem: storing 32 in location 1039
 107 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 4
9999 mem: location 1196 is 1031
9999 mem: storing 5 in location 1031
 107 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1131
 106 run: i <- add i, 1
9999 mem: location 1135 is 2
9999 mem: storing 3 in location 1135
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 3
9999 mem: location 1134 is 3
9999 mem: storing 1 in location 1136
 106 run: jump-if done?, 
9999 mem: location 1136 is 1
9998 run: jumping to instruction 13
 106 run: reply buf:address:shared:buffer
9999 mem: location 1131 is 1030
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1119
 105 run: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9999 mem: storing 6 in location 1126
9999 mem: storing 1 in location 1127
 105 run: jump-if optional-ingredient-found?, 
9999 mem: location 1127 is 1
9998 run: jumping to instruction 24
 105 run: jump-unless remaining, 
9999 mem: location 1126 is 6
9998 run: jump-unless fell through
 105 run: remaining <- subtract remaining, 1
9999 mem: location 1126 is 6
9999 mem: storing 5 in location 1126
 105 run: buf <- to-buffer_2 next, buf, remaining
9999 mem: location 1121 is 1011
9999 mem: location 1119 is 1030
9999 mem: location 1126 is 5
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1219
9999 mem: storing 11 in location 1220
 106 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1222
 106 run: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1223
 106 run: jump-if in, 
9999 mem: location 1222 is 1011
9998 run: jumping to instruction 7
 106 run: val:_elem <- get *in, value:offset
9999 mem: location 1222 is 1011
9999 mem: skipping refcount at 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1008
9999 mem: location 1222 is 1011
9999 mem: skipping refcount at 1011
9998 run: address to copy is 1012
9998 run: its type is number
9999 mem: location 1012 is 5
9999 mem: storing 5 in location 1224
 106 run: buf <- append_6 buf, val
9999 mem: location 1223 is 1030
9999 mem: location 1224 is 5
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
 107 run: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1131
 107 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1132
 107 run: text:address:shared:array:character <- to-text_2 x
9999 mem: location 1132 is 5
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
9999 mem: allocating size 18
9999 abandon: picking up space from free-list of size 18
 108 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing 5 in location 1141
 108 run: jump-if n, 
9999 mem: location 1141 is 5
9998 run: jumping to instruction 6
 108 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1143
 108 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1141 is 5
9999 mem: storing 0 in location 1144
 108 run: jump-unless negative?, 
9999 mem: location 1144 is 0
9998 run: jumping to instruction 13
 108 run: tmp:address:shared:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 109 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 1026
 109 run: result <- new buffer:type
9999 mem: allocating size 3
9999 mem: new alloc: 1232
9999 mem: storing 1232 in location 1027
 109 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1027 is 1232
9999 mem: skipping refcount at 1232
9999 mem: location 1233 is 0
9999 mem: location 1234 is 0
9999 mem: location 1027 is 1232
9999 mem: skipping refcount at 1232
9998 run: address to copy is 1233
9999 mem: storing 1233 in location 1028
 109 run: *len:address:number <- copy 0
9999 mem: location 1028 is 1233
9999 mem: storing 0 in location 1233
 109 run: s:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1027 is 1232
9999 mem: skipping refcount at 1232
9999 mem: location 1233 is 0
9999 mem: location 1234 is 0
9999 mem: location 1027 is 1232
9999 mem: skipping refcount at 1232
9998 run: address to copy is 1234
9999 mem: storing 1234 in location 1029
 109 run: *s <- new character:type, capacity
9999 mem: location 1026 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 1235
9999 mem: storing 30 in location 1236
9999 mem: location 1029 is 1234
9999 mem: storing 1235 in location 1234
 109 run: reply result
9999 mem: location 1027 is 1232
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1232
9999 mem: storing 1232 in location 1145
 108 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1146
 108 run: done?:boolean <- equal n, 0
9999 mem: location 1141 is 5
9999 mem: storing 0 in location 1147
 108 run: jump-if done?, 
9999 mem: location 1147 is 0
9998 run: jump-if fell through
 108 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1141 is 5
9999 mem: storing 0 in location 1141
9999 mem: storing 5 in location 1148
 108 run: c:character <- add digit-base, digit
9999 mem: location 1146 is 48
9999 mem: location 1148 is 5
9999 mem: storing 53 in location 1149
 108 run: tmp:address:shared:buffer <- append_2 tmp, c
9999 mem: location 1145 is 1232
9999 mem: location 1149 is 53
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 109 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1232 in location 1194
 109 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 53 in location 1195
 109 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1232
9999 mem: skipping refcount at 1232
9999 mem: location 1233 is 0
9999 mem: location 1234 is 1235
9999 mem: location 1194 is 1232
9999 mem: skipping refcount at 1232
9998 run: address to copy is 1233
9999 mem: storing 1233 in location 1196
 109 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 53
9999 mem: storing 0 in location 1197
 109 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 109 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1232
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 110 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1232 in location 1003
 110 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1232
9999 mem: skipping refcount at 1232
9999 mem: location 1233 is 0
9999 mem: location 1234 is 1235
9999 mem: location 1003 is 1232
9999 mem: skipping refcount at 1232
9998 run: address to copy is 1233
9998 run: its type is number
9999 mem: location 1233 is 0
9999 mem: storing 0 in location 1004
 110 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1232
9999 mem: skipping refcount at 1232
9999 mem: location 1233 is 0
9999 mem: location 1234 is 1235
9999 mem: location 1003 is 1232
9999 mem: skipping refcount at 1232
9998 run: address to copy is 1234
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1234 is 1235
9999 mem: storing 1235 in location 1005
 110 run: capacity:number <- length *s
9999 mem: location 1005 is 1235
9999 mem: skipping refcount at 1235
9999 mem: storing 30 in location 1006
 110 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 0
9999 mem: location 1006 is 30
9999 mem: storing 0 in location 1007
 110 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 109 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 109 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1232
9999 mem: skipping refcount at 1232
9999 mem: location 1233 is 0
9999 mem: location 1234 is 1235
9999 mem: location 1194 is 1232
9999 mem: skipping refcount at 1232
9998 run: address to copy is 1234
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1234 is 1235
9999 mem: storing 1235 in location 1200
 109 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1235
9999 mem: skipping refcount at 1235
9999 mem: location 1196 is 1233
9999 mem: location 1233 is 0
9999 mem: storing 1237 in location 1201
 109 run: *dest <- copy c
9999 mem: location 1195 is 53
9999 mem: location 1201 is 1237
9999 mem: storing 53 in location 1237
 109 run: *len <- add *len, 1
9999 mem: location 1196 is 1233
9999 mem: location 1233 is 0
9999 mem: location 1196 is 1233
9999 mem: storing 1 in location 1233
 109 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1232
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1232
9999 mem: storing 1232 in location 1145
 108 run: jump 
9998 run: jumping to instruction 17
 108 run: done?:boolean <- equal n, 0
9999 mem: location 1141 is 0
9999 mem: storing 1 in location 1147
 108 run: jump-if done?, 
9999 mem: location 1147 is 1
9998 run: jumping to instruction 23
 108 run: jump-unless negate-result:boolean, 
9999 mem: location 1143 is 0
9998 run: jumping to instruction 27
 108 run: len:number <- get *tmp, length:offset
9999 mem: location 1145 is 1232
9999 mem: skipping refcount at 1232
9999 mem: location 1233 is 1
9999 mem: location 1234 is 1235
9999 mem: location 1145 is 1232
9999 mem: skipping refcount at 1232
9998 run: address to copy is 1233
9998 run: its type is number
9999 mem: location 1233 is 1
9999 mem: storing 1 in location 1150
 108 run: buf:address:shared:array:character <- get *tmp, data:offset
9999 mem: location 1145 is 1232
9999 mem: skipping refcount at 1232
9999 mem: location 1233 is 1
9999 mem: location 1234 is 1235
9999 mem: location 1145 is 1232
9999 mem: skipping refcount at 1232
9998 run: address to copy is 1234
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1234 is 1235
9999 mem: storing 1235 in location 1151
 108 run: result <- new character:type, len
9999 mem: location 1150 is 1
9999 mem: array size is 1
9999 mem: allocating size 3
9999 mem: new alloc: 1267
9999 mem: storing 1 in location 1268
9999 mem: storing 1267 in location 1142
 108 run: i:number <- subtract len, 1
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1152
 108 run: j:number <- copy 0
9999 mem: storing 0 in location 1153
 108 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1152 is 0
9999 mem: storing 0 in location 1147
 108 run: jump-if done?, 
9999 mem: location 1147 is 0
9998 run: jump-if fell through
 108 run: src:character <- index *buf, i
9999 mem: location 1151 is 1235
9999 mem: skipping refcount at 1235
9998 run: base address is 1236
9999 mem: location 1152 is 0
9998 run: address to copy is 1237
9998 run: its type is character
9999 mem: location 1237 is 53
9999 mem: storing 53 in location 1154
 108 run: dest:address:character <- index-address *result, j
9999 mem: location 1142 is 1267
9999 mem: skipping refcount at 1267
9999 mem: location 1153 is 0
9999 mem: storing 1269 in location 1155
 108 run: *dest <- copy src
9999 mem: location 1154 is 53
9999 mem: location 1155 is 1269
9999 mem: storing 53 in location 1269
 108 run: i <- subtract i, 1
9999 mem: location 1152 is 0
9999 mem: storing -1 in location 1152
 108 run: j <- add j, 1
9999 mem: location 1153 is 0
9999 mem: storing 1 in location 1153
 108 run: jump 
9998 run: jumping to instruction 34
 108 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1152 is -1
9999 mem: storing 1 in location 1147
 108 run: jump-if done?, 
9999 mem: location 1147 is 1
9998 run: jumping to instruction 42
 108 run: reply result:address:shared:array:character
9999 mem: location 1142 is 1267
9999 abandon: saving in free-list of size 18
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1267
9999 mem: storing 1267 in location 1133
 107 run: len:number <- length *text
9999 mem: location 1133 is 1267
9999 mem: skipping refcount at 1267
9999 mem: storing 1 in location 1134
 107 run: i:number <- copy 0
9999 mem: storing 0 in location 1135
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 0
9999 mem: location 1134 is 1
9999 mem: storing 0 in location 1136
 107 run: jump-if done?, 
9999 mem: location 1136 is 0
9998 run: jump-if fell through
 107 run: c:character <- index *text, i
9999 mem: location 1133 is 1267
9999 mem: skipping refcount at 1267
9998 run: base address is 1268
9999 mem: location 1135 is 0
9998 run: address to copy is 1269
9998 run: its type is character
9999 mem: location 1269 is 53
9999 mem: storing 53 in location 1137
 107 run: buf <- append_2 buf, c
9999 mem: location 1131 is 1030
9999 mem: location 1137 is 53
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 108 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 108 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 53 in location 1195
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 5
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 53
9999 mem: storing 0 in location 1197
 108 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 109 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 109 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 5
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 5
9999 mem: storing 5 in location 1004
 109 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 5
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 109 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 5
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 109 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 108 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 108 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 5
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 5
9999 mem: storing 1040 in location 1201
 108 run: *dest <- copy c
9999 mem: location 1195 is 53
9999 mem: location 1201 is 1040
9999 mem: storing 53 in location 1040
 108 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 5
9999 mem: location 1196 is 1031
9999 mem: storing 6 in location 1031
 108 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1131
 107 run: i <- add i, 1
9999 mem: location 1135 is 0
9999 mem: storing 1 in location 1135
 107 run: jump 
9998 run: jumping to instruction 7
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 1
9999 mem: location 1134 is 1
9999 mem: storing 1 in location 1136
 107 run: jump-if done?, 
9999 mem: location 1136 is 1
9998 run: jumping to instruction 13
 107 run: reply buf:address:shared:buffer
9999 mem: location 1131 is 1030
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1223
 106 run: next:address:shared:list:_elem <- rest_3 in
9999 mem: location 1222 is 1011
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 107 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1011 in location 1208
 107 run: result <- get *in, next:offset
9999 mem: location 1208 is 1011
9999 mem: skipping refcount at 1011
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1012 is 5
9999 mem: location 1013 is 1008
9999 mem: location 1208 is 1011
9999 mem: skipping refcount at 1011
9999 type: type deduced to be number$
9998 run: address to copy is 1013
9998 run: its type is <address : <shared : <list : <number : <>>>>>
9999 mem: location 1013 is 1008
9999 mem: storing 1008 in location 1209
 107 run: reply result:address:shared:list:_elem/contained-in:in
9999 mem: location 1209 is 1008
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1008
9999 mem: storing 1008 in location 1225
 106 run: nextn:number <- copy next
9999 mem: location 1225 is 1008
9999 mem: storing 1008 in location 1226
 106 run: jump-if next, 1:offset
9999 mem: location 1225 is 1008
9998 run: jumping to instruction 14
 106 run: space:character <- copy 32/space
9999 mem: storing 32 in location 1227
 106 run: buf <- append_2 buf, space:character
9999 mem: location 1223 is 1030
9999 mem: location 1227 is 32
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 107 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 107 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1195
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 6
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 32
9999 mem: storing 0 in location 1197
 107 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 108 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 108 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 6
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 6
9999 mem: storing 6 in location 1004
 108 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 6
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 108 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 6
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 108 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 107 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 107 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 6
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 6
9999 mem: storing 1041 in location 1201
 107 run: *dest <- copy c
9999 mem: location 1195 is 32
9999 mem: location 1201 is 1041
9999 mem: storing 32 in location 1041
 107 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 6
9999 mem: location 1196 is 1031
9999 mem: storing 7 in location 1031
 107 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1223
 106 run: s:address:shared:array:character <- new [-> ]
9999 mem: storing 1270 in location 1228
 106 run: n:number <- length *s
9999 mem: location 1228 is 1270
9999 mem: skipping refcount at 1270
9999 mem: storing 3 in location 1229
 106 run: buf <- append_7 buf, s
9999 mem: location 1223 is 1030
9999 mem: location 1228 is 1270
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
 107 run: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1131
 107 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1270 in location 1132
 107 run: text:address:shared:array:character <- to-text x
9999 mem: location 1132 is 1270
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: allocating size 4
9999 abandon: picking up space from free-list of size 4
 108 run: x:address:shared:array:character <- next-ingredient-without-typechecking 
9999 mem: storing 1270 in location 1218
 108 run: reply x
9999 mem: location 1218 is 1270
9999 abandon: saving in free-list of size 4
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1270
9999 mem: storing 1270 in location 1133
 107 run: len:number <- length *text
9999 mem: location 1133 is 1270
9999 mem: skipping refcount at 1270
9999 mem: storing 3 in location 1134
 107 run: i:number <- copy 0
9999 mem: storing 0 in location 1135
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 0
9999 mem: location 1134 is 3
9999 mem: storing 0 in location 1136
 107 run: jump-if done?, 
9999 mem: location 1136 is 0
9998 run: jump-if fell through
 107 run: c:character <- index *text, i
9999 mem: location 1133 is 1270
9999 mem: skipping refcount at 1270
9998 run: base address is 1271
9999 mem: location 1135 is 0
9998 run: address to copy is 1272
9998 run: its type is character
9999 mem: location 1272 is 45
9999 mem: storing 45 in location 1137
 107 run: buf <- append_2 buf, c
9999 mem: location 1131 is 1030
9999 mem: location 1137 is 45
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 108 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 108 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 45 in location 1195
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 7
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 45
9999 mem: storing 0 in location 1197
 108 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 8
9990 schedule: buffer-full?/append_2/append_7/to-buffer_2/to-buffer_2/to-text-line_3/run1001/scenario-stash-on-list-converts-to-text
 109 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 109 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 109 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 7
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 7
9999 mem: storing 7 in location 1004
 109 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 7
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 109 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 7
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 109 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 108 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 108 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 7
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 7
9999 mem: storing 1042 in location 1201
 108 run: *dest <- copy c
9999 mem: location 1195 is 45
9999 mem: location 1201 is 1042
9999 mem: storing 45 in location 1042
 108 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 7
9999 mem: location 1196 is 1031
9999 mem: storing 8 in location 1031
 108 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1131
 107 run: i <- add i, 1
9999 mem: location 1135 is 0
9999 mem: storing 1 in location 1135
 107 run: jump 
9998 run: jumping to instruction 7
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 1
9999 mem: location 1134 is 3
9999 mem: storing 0 in location 1136
 107 run: jump-if done?, 
9999 mem: location 1136 is 0
9998 run: jump-if fell through
 107 run: c:character <- index *text, i
9999 mem: location 1133 is 1270
9999 mem: skipping refcount at 1270
9998 run: base address is 1271
9999 mem: location 1135 is 1
9998 run: address to copy is 1273
9998 run: its type is character
9999 mem: location 1273 is 62
9999 mem: storing 62 in location 1137
 107 run: buf <- append_2 buf, c
9999 mem: location 1131 is 1030
9999 mem: location 1137 is 62
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 108 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 108 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 62 in location 1195
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 8
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 62
9999 mem: storing 0 in location 1197
 108 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 109 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 109 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 8
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 8
9999 mem: storing 8 in location 1004
 109 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 8
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 109 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 8
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 109 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 108 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 108 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 8
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 8
9999 mem: storing 1043 in location 1201
 108 run: *dest <- copy c
9999 mem: location 1195 is 62
9999 mem: location 1201 is 1043
9999 mem: storing 62 in location 1043
 108 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 8
9999 mem: location 1196 is 1031
9999 mem: storing 9 in location 1031
 108 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1131
 107 run: i <- add i, 1
9999 mem: location 1135 is 1
9999 mem: storing 2 in location 1135
 107 run: jump 
9998 run: jumping to instruction 7
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 2
9999 mem: location 1134 is 3
9999 mem: storing 0 in location 1136
 107 run: jump-if done?, 
9999 mem: location 1136 is 0
9998 run: jump-if fell through
 107 run: c:character <- index *text, i
9999 mem: location 1133 is 1270
9999 mem: skipping refcount at 1270
9998 run: base address is 1271
9999 mem: location 1135 is 2
9998 run: address to copy is 1274
9998 run: its type is character
9999 mem: location 1274 is 32
9999 mem: storing 32 in location 1137
 107 run: buf <- append_2 buf, c
9999 mem: location 1131 is 1030
9999 mem: location 1137 is 32
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 108 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 108 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 32 in location 1195
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 9
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 32
9999 mem: storing 0 in location 1197
 108 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 109 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 109 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 9
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 9
9999 mem: storing 9 in location 1004
 109 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 9
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 109 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 9
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 109 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 108 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 108 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 9
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 9
9999 mem: storing 1044 in location 1201
 108 run: *dest <- copy c
9999 mem: location 1195 is 32
9999 mem: location 1201 is 1044
9999 mem: storing 32 in location 1044
 108 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 9
9999 mem: location 1196 is 1031
9999 mem: storing 10 in location 1031
 108 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1131
 107 run: i <- add i, 1
9999 mem: location 1135 is 2
9999 mem: storing 3 in location 1135
 107 run: jump 
9998 run: jumping to instruction 7
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 3
9999 mem: location 1134 is 3
9999 mem: storing 1 in location 1136
 107 run: jump-if done?, 
9999 mem: location 1136 is 1
9998 run: jumping to instruction 13
 107 run: reply buf:address:shared:buffer
9999 mem: location 1131 is 1030
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1223
 106 run: remaining:number, optional-ingredient-found?:boolean <- next-ingredient 
9999 mem: storing 5 in location 1230
9999 mem: storing 1 in location 1231
 106 run: jump-if optional-ingredient-found?, 
9999 mem: location 1231 is 1
9998 run: jumping to instruction 24
 106 run: jump-unless remaining, 
9999 mem: location 1230 is 5
9998 run: jump-unless fell through
 106 run: remaining <- subtract remaining, 1
9999 mem: location 1230 is 5
9999 mem: storing 4 in location 1230
 106 run: buf <- to-buffer_2 next, buf, remaining
9999 mem: location 1225 is 1008
9999 mem: location 1223 is 1030
9999 mem: location 1230 is 4
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 11
9999 mem: allocating size 13
9999 mem: new alloc: 1275
9999 mem: storing 11 in location 1276
 107 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1278
 107 run: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1279
 107 run: jump-if in, 
9999 mem: location 1278 is 1008
9998 run: jumping to instruction 7
 107 run: val:_elem <- get *in, value:offset
9999 mem: location 1278 is 1008
9999 mem: skipping refcount at 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 4
9999 mem: location 1010 is 0
9999 mem: location 1278 is 1008
9999 mem: skipping refcount at 1008
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 4
9999 mem: storing 4 in location 1280
 107 run: buf <- append_6 buf, val
9999 mem: location 1279 is 1030
9999 mem: location 1280 is 4
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: allocating size 10
9999 abandon: picking up space from free-list of size 10
 108 run: buf:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1131
 108 run: x:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1132
 108 run: text:address:shared:array:character <- to-text_2 x
9999 mem: location 1132 is 4
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
9999 mem: allocating size 18
9999 abandon: picking up space from free-list of size 18
 109 run: n:number <- next-ingredient-without-typechecking 
9999 mem: storing 4 in location 1141
 109 run: jump-if n, 
9999 mem: location 1141 is 4
9998 run: jumping to instruction 6
 109 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1143
 109 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1141 is 4
9999 mem: storing 0 in location 1144
 109 run: jump-unless negative?, 
9999 mem: location 1144 is 0
9998 run: jumping to instruction 13
 109 run: tmp:address:shared:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: allocating size 7
9999 abandon: picking up space from free-list of size 7
 110 run: capacity:number <- next-ingredient-without-typechecking 
9999 mem: storing 30 in location 1026
 110 run: result <- new buffer:type
9999 mem: allocating size 3
9999 mem: new alloc: 1288
9999 mem: storing 1288 in location 1027
 110 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1027 is 1288
9999 mem: skipping refcount at 1288
9999 mem: location 1289 is 0
9999 mem: location 1290 is 0
9999 mem: location 1027 is 1288
9999 mem: skipping refcount at 1288
9998 run: address to copy is 1289
9999 mem: storing 1289 in location 1028
 110 run: *len:address:number <- copy 0
9999 mem: location 1028 is 1289
9999 mem: storing 0 in location 1289
 110 run: s:address:address:shared:array:character <- get-address *result, data:offset
9999 mem: location 1027 is 1288
9999 mem: skipping refcount at 1288
9999 mem: location 1289 is 0
9999 mem: location 1290 is 0
9999 mem: location 1027 is 1288
9999 mem: skipping refcount at 1288
9998 run: address to copy is 1290
9999 mem: storing 1290 in location 1029
 110 run: *s <- new character:type, capacity
9999 mem: location 1026 is 30
9999 mem: array size is 30
9999 mem: allocating size 32
9999 mem: new alloc: 1291
9999 mem: storing 30 in location 1292
9999 mem: location 1029 is 1290
9999 mem: storing 1291 in location 1290
 110 run: reply result
9999 mem: location 1027 is 1288
9999 abandon: saving in free-list of size 7
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1288
9999 mem: storing 1288 in location 1145
 109 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1146
 109 run: done?:boolean <- equal n, 0
9999 mem: location 1141 is 4
9999 mem: storing 0 in location 1147
 109 run: jump-if done?, 
9999 mem: location 1147 is 0
9998 run: jump-if fell through
 109 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1141 is 4
9999 mem: storing 0 in location 1141
9999 mem: storing 4 in location 1148
 109 run: c:character <- add digit-base, digit
9999 mem: location 1146 is 48
9999 mem: location 1148 is 4
9999 mem: storing 52 in location 1149
 109 run: tmp:address:shared:buffer <- append_2 tmp, c
9999 mem: location 1145 is 1288
9999 mem: location 1149 is 52
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 110 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1288 in location 1194
 110 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 52 in location 1195
 110 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1288
9999 mem: skipping refcount at 1288
9999 mem: location 1289 is 0
9999 mem: location 1290 is 1291
9999 mem: location 1194 is 1288
9999 mem: skipping refcount at 1288
9998 run: address to copy is 1289
9999 mem: storing 1289 in location 1196
 110 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 52
9999 mem: storing 0 in location 1197
 110 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 110 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1288
9999 trace: incrementing callstack depth to 10
 111 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 111 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1288 in location 1003
 111 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1288
9999 mem: skipping refcount at 1288
9999 mem: location 1289 is 0
9999 mem: location 1290 is 1291
9999 mem: location 1003 is 1288
9999 mem: skipping refcount at 1288
9998 run: address to copy is 1289
9998 run: its type is number
9999 mem: location 1289 is 0
9999 mem: storing 0 in location 1004
 111 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1288
9999 mem: skipping refcount at 1288
9999 mem: location 1289 is 0
9999 mem: location 1290 is 1291
9999 mem: location 1003 is 1288
9999 mem: skipping refcount at 1288
9998 run: address to copy is 1290
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1290 is 1291
9999 mem: storing 1291 in location 1005
 111 run: capacity:number <- length *s
9999 mem: location 1005 is 1291
9999 mem: skipping refcount at 1291
9999 mem: storing 30 in location 1006
 111 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 0
9999 mem: location 1006 is 30
9999 mem: storing 0 in location 1007
 111 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 10
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 110 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 110 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1288
9999 mem: skipping refcount at 1288
9999 mem: location 1289 is 0
9999 mem: location 1290 is 1291
9999 mem: location 1194 is 1288
9999 mem: skipping refcount at 1288
9998 run: address to copy is 1290
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1290 is 1291
9999 mem: storing 1291 in location 1200
 110 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1291
9999 mem: skipping refcount at 1291
9999 mem: location 1196 is 1289
9999 mem: location 1289 is 0
9999 mem: storing 1293 in location 1201
 110 run: *dest <- copy c
9999 mem: location 1195 is 52
9999 mem: location 1201 is 1293
9999 mem: storing 52 in location 1293
 110 run: *len <- add *len, 1
9999 mem: location 1196 is 1289
9999 mem: location 1289 is 0
9999 mem: location 1196 is 1289
9999 mem: storing 1 in location 1289
 110 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1288
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 1288
9999 mem: storing 1288 in location 1145
 109 run: jump 
9998 run: jumping to instruction 17
 109 run: done?:boolean <- equal n, 0
9999 mem: location 1141 is 0
9999 mem: storing 1 in location 1147
 109 run: jump-if done?, 
9999 mem: location 1147 is 1
9998 run: jumping to instruction 23
 109 run: jump-unless negate-result:boolean, 
9999 mem: location 1143 is 0
9998 run: jumping to instruction 27
 109 run: len:number <- get *tmp, length:offset
9999 mem: location 1145 is 1288
9999 mem: skipping refcount at 1288
9999 mem: location 1289 is 1
9999 mem: location 1290 is 1291
9999 mem: location 1145 is 1288
9999 mem: skipping refcount at 1288
9998 run: address to copy is 1289
9998 run: its type is number
9999 mem: location 1289 is 1
9999 mem: storing 1 in location 1150
 109 run: buf:address:shared:array:character <- get *tmp, data:offset
9999 mem: location 1145 is 1288
9999 mem: skipping refcount at 1288
9999 mem: location 1289 is 1
9999 mem: location 1290 is 1291
9999 mem: location 1145 is 1288
9999 mem: skipping refcount at 1288
9998 run: address to copy is 1290
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1290 is 1291
9999 mem: storing 1291 in location 1151
 109 run: result <- new character:type, len
9999 mem: location 1150 is 1
9999 mem: array size is 1
9999 mem: allocating size 3
9999 mem: new alloc: 1323
9999 mem: storing 1 in location 1324
9999 mem: storing 1323 in location 1142
 109 run: i:number <- subtract len, 1
9999 mem: location 1150 is 1
9999 mem: storing 0 in location 1152
 109 run: j:number <- copy 0
9999 mem: storing 0 in location 1153
 109 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1152 is 0
9999 mem: storing 0 in location 1147
 109 run: jump-if done?, 
9999 mem: location 1147 is 0
9998 run: jump-if fell through
 109 run: src:character <- index *buf, i
9999 mem: location 1151 is 1291
9999 mem: skipping refcount at 1291
9998 run: base address is 1292
9999 mem: location 1152 is 0
9998 run: address to copy is 1293
9998 run: its type is character
9999 mem: location 1293 is 52
9999 mem: storing 52 in location 1154
 109 run: dest:address:character <- index-address *result, j
9999 mem: location 1142 is 1323
9999 mem: skipping refcount at 1323
9999 mem: location 1153 is 0
9999 mem: storing 1325 in location 1155
 109 run: *dest <- copy src
9999 mem: location 1154 is 52
9999 mem: location 1155 is 1325
9999 mem: storing 52 in location 1325
 109 run: i <- subtract i, 1
9999 mem: location 1152 is 0
9999 mem: storing -1 in location 1152
 109 run: j <- add j, 1
9999 mem: location 1153 is 0
9999 mem: storing 1 in location 1153
 109 run: jump 
9998 run: jumping to instruction 34
 109 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1152 is -1
9999 mem: storing 1 in location 1147
 109 run: jump-if done?, 
9999 mem: location 1147 is 1
9998 run: jumping to instruction 42
 109 run: reply result:address:shared:array:character
9999 mem: location 1142 is 1323
9999 abandon: saving in free-list of size 18
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1323
9999 mem: storing 1323 in location 1133
 108 run: len:number <- length *text
9999 mem: location 1133 is 1323
9999 mem: skipping refcount at 1323
9999 mem: storing 1 in location 1134
 108 run: i:number <- copy 0
9999 mem: storing 0 in location 1135
 108 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 0
9999 mem: location 1134 is 1
9999 mem: storing 0 in location 1136
 108 run: jump-if done?, 
9999 mem: location 1136 is 0
9998 run: jump-if fell through
 108 run: c:character <- index *text, i
9999 mem: location 1133 is 1323
9999 mem: skipping refcount at 1323
9998 run: base address is 1324
9999 mem: location 1135 is 0
9998 run: address to copy is 1325
9998 run: its type is character
9999 mem: location 1325 is 52
9999 mem: storing 52 in location 1137
 108 run: buf <- append_2 buf, c
9999 mem: location 1131 is 1030
9999 mem: location 1137 is 52
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 109 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 109 run: c:character <- next-ingredient-without-typechecking 
9999 mem: storing 52 in location 1195
 109 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 10
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9999 mem: storing 1031 in location 1196
 109 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1195 is 52
9999 mem: storing 0 in location 1197
 109 run: jump-unless backspace?, 
9999 mem: location 1197 is 0
9998 run: jumping to instruction 12
 109 run: full?:boolean <- buffer-full? in
9999 mem: location 1194 is 1030
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: allocating size 8
9999 abandon: picking up space from free-list of size 8
 110 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1003
 110 run: len:number <- get *in, length:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 10
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 10
9999 mem: storing 10 in location 1004
 110 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 10
9999 mem: location 1032 is 1033
9999 mem: location 1003 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1005
 110 run: capacity:number <- length *s
9999 mem: location 1005 is 1033
9999 mem: skipping refcount at 1033
9999 mem: storing 80 in location 1006
 110 run: result <- greater-or-equal len, capacity
9999 mem: location 1004 is 10
9999 mem: location 1006 is 80
9999 mem: storing 0 in location 1007
 110 run: reply result:boolean
9999 mem: location 1007 is 0
9999 abandon: saving in free-list of size 8
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 0
9999 mem: storing 0 in location 1199
 109 run: jump-unless full?, 
9999 mem: location 1199 is 0
9998 run: jumping to instruction 17
 109 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 10
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1200
 109 run: dest:address:character <- index-address *s, *len
9999 mem: location 1200 is 1033
9999 mem: skipping refcount at 1033
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 10
9999 mem: storing 1045 in location 1201
 109 run: *dest <- copy c
9999 mem: location 1195 is 52
9999 mem: location 1201 is 1045
9999 mem: storing 52 in location 1045
 109 run: *len <- add *len, 1
9999 mem: location 1196 is 1031
9999 mem: location 1031 is 10
9999 mem: location 1196 is 1031
9999 mem: storing 11 in location 1031
 109 run: reply in:address:shared:buffer
9999 mem: location 1194 is 1030
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1131
 108 run: i <- add i, 1
9999 mem: location 1135 is 0
9999 mem: storing 1 in location 1135
 108 run: jump 
9998 run: jumping to instruction 7
 108 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1135 is 1
9999 mem: location 1134 is 1
9999 mem: storing 1 in location 1136
 108 run: jump-if done?, 
9999 mem: location 1136 is 1
9998 run: jumping to instruction 13
 108 run: reply buf:address:shared:buffer
9999 mem: location 1131 is 1030
9999 abandon: saving in free-list of size 10
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1279
 107 run: next:address:shared:list:_elem <- rest_3 in
9999 mem: location 1278 is 1008
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: allocating size 5
9999 abandon: picking up space from free-list of size 5
 108 run: in:address:shared:list:_elem <- next-ingredient-without-typechecking 
9999 mem: storing 1008 in location 1208
 108 run: result <- get *in, next:offset
9999 mem: location 1208 is 1008
9999 mem: skipping refcount at 1008
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 4
9999 mem: location 1010 is 0
9999 mem: location 1208 is 1008
9999 mem: skipping refcount at 1008
9999 type: type deduced to be number$
9998 run: address to copy is 1010
9998 run: its type is <address : <shared : <list : <number : <>>>>>
9999 mem: location 1010 is 0
9999 mem: storing 0 in location 1209
 108 run: reply result:address:shared:list:_elem/contained-in:in
9999 mem: location 1209 is 0
9999 abandon: saving in free-list of size 5
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1281
 107 run: nextn:number <- copy next
9999 mem: location 1281 is 0
9999 mem: storing 0 in location 1282
 107 run: jump-if next, 1:offset
9999 mem: location 1281 is 0
9998 run: jump-if fell through
 107 run: reply buf:address:shared:buffer
9999 mem: location 1279 is 1030
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1223
 106 run: reply buf:address:shared:buffer
9999 mem: location 1223 is 1030
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1119
 105 run: reply buf:address:shared:buffer
9999 mem: location 1119 is 1030
9999 abandon: saving in free-list of size 13
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1030
9999 mem: storing 1030 in location 1021
 104 run: result <- buffer-to-array buf
9999 mem: location 1021 is 1030
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:shared:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: allocating size 11
9999 abandon: picking up space from free-list of size 11
 105 run: in:address:shared:buffer <- next-ingredient-without-typechecking 
9999 mem: storing 1030 in location 1194
 105 run: jump-if in, 
9999 mem: location 1194 is 1030
9998 run: jumping to instruction 5
 105 run: len:number <- get *in, length:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 11
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1031
9998 run: its type is number
9999 mem: location 1031 is 11
9999 mem: storing 11 in location 1195
 105 run: s:address:shared:array:character <- get *in, data:offset
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9999 mem: location 1031 is 11
9999 mem: location 1032 is 1033
9999 mem: location 1194 is 1030
9999 mem: skipping refcount at 1030
9998 run: address to copy is 1032
9998 run: its type is <address : <shared : <array : <character : <>>>>>
9999 mem: location 1032 is 1033
9999 mem: storing 1033 in location 1196
 105 run: result <- new character:type, len
9999 mem: location 1195 is 11
9999 mem: array size is 11
9999 mem: allocating size 13
9999 abandon: picking up space from free-list of size 13
9999 mem: storing 1115 in location 1197
 105 run: i:number <- copy 0
9999 mem: storing 0 in location 1198
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 0
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 0
9998 run: address to copy is 1035
9998 run: its type is character
9999 mem: location 1035 is 54
9999 mem: storing 54 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 0
9999 mem: storing 1117 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 54
9999 mem: location 1201 is 1117
9999 mem: storing 54 in location 1117
 105 run: i <- add i, 1
9999 mem: location 1198 is 0
9999 mem: storing 1 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 1
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 1
9998 run: address to copy is 1036
9998 run: its type is character
9999 mem: location 1036 is 32
9999 mem: storing 32 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 1
9999 mem: storing 1118 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1118
9999 mem: storing 32 in location 1118
 105 run: i <- add i, 1
9999 mem: location 1198 is 1
9999 mem: storing 2 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 2
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 2
9998 run: address to copy is 1037
9998 run: its type is character
9999 mem: location 1037 is 45
9999 mem: storing 45 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 2
9999 mem: storing 1119 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 45
9999 mem: location 1201 is 1119
9999 mem: storing 45 in location 1119
 105 run: i <- add i, 1
9999 mem: location 1198 is 2
9999 mem: storing 3 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 3
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 3
9998 run: address to copy is 1038
9998 run: its type is character
9999 mem: location 1038 is 62
9999 mem: storing 62 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 3
9999 mem: storing 1120 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 62
9999 mem: location 1201 is 1120
9999 mem: storing 62 in location 1120
 105 run: i <- add i, 1
9999 mem: location 1198 is 3
9999 mem: storing 4 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 4
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 4
9998 run: address to copy is 1039
9998 run: its type is character
9999 mem: location 1039 is 32
9999 mem: storing 32 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 4
9999 mem: storing 1121 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1121
9999 mem: storing 32 in location 1121
 105 run: i <- add i, 1
9999 mem: location 1198 is 4
9999 mem: storing 5 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 5
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 5
9998 run: address to copy is 1040
9998 run: its type is character
9999 mem: location 1040 is 53
9999 mem: storing 53 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 5
9999 mem: storing 1122 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 53
9999 mem: location 1201 is 1122
9999 mem: storing 53 in location 1122
 105 run: i <- add i, 1
9999 mem: location 1198 is 5
9999 mem: storing 6 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 6
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 6
9998 run: address to copy is 1041
9998 run: its type is character
9999 mem: location 1041 is 32
9999 mem: storing 32 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 6
9999 mem: storing 1123 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1123
9999 mem: storing 32 in location 1123
 105 run: i <- add i, 1
9999 mem: location 1198 is 6
9999 mem: storing 7 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 7
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 7
9998 run: address to copy is 1042
9998 run: its type is character
9999 mem: location 1042 is 45
9999 mem: storing 45 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 7
9999 mem: storing 1124 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 45
9999 mem: location 1201 is 1124
9999 mem: storing 45 in location 1124
 105 run: i <- add i, 1
9999 mem: location 1198 is 7
9999 mem: storing 8 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 8
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 8
9998 run: address to copy is 1043
9998 run: its type is character
9999 mem: location 1043 is 62
9999 mem: storing 62 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 8
9999 mem: storing 1125 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 62
9999 mem: location 1201 is 1125
9999 mem: storing 62 in location 1125
 105 run: i <- add i, 1
9999 mem: location 1198 is 8
9999 mem: storing 9 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 9
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 9
9998 run: address to copy is 1044
9998 run: its type is character
9999 mem: location 1044 is 32
9999 mem: storing 32 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 9
9999 mem: storing 1126 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 32
9999 mem: location 1201 is 1126
9999 mem: storing 32 in location 1126
 105 run: i <- add i, 1
9999 mem: location 1198 is 9
9999 mem: storing 10 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 10
9999 mem: location 1195 is 11
9999 mem: storing 0 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1196 is 1033
9999 mem: skipping refcount at 1033
9998 run: base address is 1034
9999 mem: location 1198 is 10
9998 run: address to copy is 1045
9998 run: its type is character
9999 mem: location 1045 is 52
9999 mem: storing 52 in location 1200
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1197 is 1115
9999 mem: skipping refcount at 1115
9999 mem: location 1198 is 10
9999 mem: storing 1127 in location 1201
 105 run: *dest <- copy src
9999 mem: location 1200 is 52
9999 mem: location 1201 is 1127
9999 mem: storing 52 in location 1127
 105 run: i <- add i, 1
9999 mem: location 1198 is 10
9999 mem: storing 11 in location 1198
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1198 is 11
9999 mem: location 1195 is 11
9999 mem: storing 1 in location 1199
 105 run: jump-if done?, 
9999 mem: location 1199 is 1
9998 run: jumping to instruction 18
 105 run: reply result:address:shared:array:character
9999 mem: location 1197 is 1115
9999 abandon: saving in free-list of size 11
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1115
9999 mem: storing 1115 in location 1022
 104 run: reply result:address:shared:array:character
9999 mem: location 1022 is 1115
9999 abandon: saving in free-list of size 6
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1115
9999 mem: storing 1115 in location 2
 103 run: stash [foo foo], stash_0_1:address:shared:array:character
9999 mem: location 2 is 1115
   2 app: foo foo 6 -> 5 -> 4 
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: trace-should-contain [
    app: foo foo 6 -> 5 -> 4
  ]
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
