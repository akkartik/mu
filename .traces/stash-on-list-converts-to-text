9991 parse: --- defining scenario-stash-on-list-converts-to-text
9993 parse: instruction: run
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    x:address:list:number <- push 4, 0\n    x <- push 5, x\n    stash [foo foo], x\n  ": "literal-string"}
9992 load: after rewriting: run [
    x:address:list:number <- push 4, 0
    x <- push 5, x
    stash [foo foo], x
  ]
9993 parse: instruction: trace-should-contain
9993 parse:   number of ingredients: 1
9993 parse:   ingredient: {"\n    app: foo foo 5 -> 4\n  ": "literal-string"}
9992 load: after rewriting: trace-should-contain [
    app: foo foo 5 -> 4
  ]
9999 parse: recipe scenario-stash-on-list-converts-to-text has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- deduce types for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- resolve ambiguous calls for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- compute instruction operations for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- transform braces for recipe scenario-stash-on-list-converts-to-text
9992 transform: run ...
9992 transform: trace-should-contain ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- transform names for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- perform checks for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- convert 'new' to 'allocate' for recipe scenario-stash-on-list-converts-to-text
9991 transform: --- parsing any uninitialized reagents as integers
9999 trace: new routine; incrementing callstack depth to 1
9999 new: routine allocated memory from 1000 to 101000
9990 schedule: scenario-stash-on-list-converts-to-text
 102 run: run [
    x:address:list:number <- push 4, 0
    x <- push 5, x
    stash [foo foo], x
  ]
9991 parse: --- defining run1001
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"4": "literal"}
9993 parse:   ingredient: {"0": "literal"}
9993 parse:   product: {"x": <"address" : <"list" : <"number" : <>>>>}
9992 load: after rewriting: x:address:list:number <- push 4, 0
9993 parse: instruction: push
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"5": "literal"}
9993 parse:   ingredient: {"x": <>}
9993 parse:   product: {"x": <>}
9992 load: after rewriting: x <- push 5, x
9993 parse: instruction: stash
9993 parse:   number of ingredients: 2
9993 parse:   ingredient: {"foo foo": "literal-string"}
9993 parse:   ingredient: {"x": <>}
9992 load: after rewriting: stash [foo foo], x
9999 parse: recipe run1001 has a header
9990 transform: === transform_all()
9991 transform: --- fill in reply ingredients from header for recipe run1001
9991 transform: --- deduce types for recipe run1001
9992 transform: x => <address : <list : <number : <>>>>
9992 transform: x <= <address : <list : <number : <>>>>
9992 transform: x <= <address : <list : <number : <>>>>
9992 transform: x <= <address : <list : <number : <>>>>
9992 transform: stash_0_1 => <address : <array : <character : <>>>>
9991 transform: --- resolve ambiguous calls for recipe run1001
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9993 transform: strict match: ingredient 0
9993 transform: non-strict match: ingredient 1
9993 transform: mismatch: product 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 104
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: mismatch: product 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 3
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 232 push
9993 transform: switching push to push_5
9993 transform: compute type names: push_5
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"result": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of result is <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: x:_elem <- next-ingredient 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: in:address:list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: result <- new {(list _elem): type}
9994 transform:     checking {"(list _elem)": "type"}: "type"
9993 transform: type of (list _elem) is "type"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: val:address:_elem <- get-address *result, value:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": <"address" : <"_elem" : <>>>}: <"address" : <"_elem" : <>>>
9993 transform: type of val is <"address" : <"_elem" : <>>>
9993 transform:   instruction: *val <- copy x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"val": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"_elem" : <>>>
9993 transform:   instruction: next:address:address:list:_elem <- get-address *result, next:offset
9994 transform:     checking {"result": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"next": <"address" : <"address" : <"list" : <"_elem" : <>>>>>}: <"address" : <"address" : <"list" : <"_elem" : <>>>>>
9993 transform: type of next is <"address" : <"address" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: *next <- copy in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"next": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"address" : <"list" : <"_elem" : <>>>>>
9993 transform:   instruction: reply result
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9993 transform: adding mapping from _elem to "literal"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'in:address:list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'result <- new {(list _elem): type}'
9993 transform: replacing in ingredient {(list _elem): type}
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: _elem => "number"
9993 transform: replacing in instruction 'val:address:_elem <- get-address *result, value:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:address:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <number : <>>>
9993 transform: replacing in instruction '*val <- copy x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient *val
9993 transform: _elem => "number"
9993 transform:   after: <address : <number : <>>>
9993 transform: replacing in instruction 'next:address:address:list:_elem <- get-address *result, next:offset'
9993 transform: replacing in ingredient *result
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient next:address:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <address : <list : <number : <>>>>>
9993 transform: replacing in instruction '*next <- copy in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient *next
9993 transform: _elem => "number"
9993 transform:   after: <address : <address : <list : <number : <>>>>>
9993 transform: replacing in instruction 'reply result'
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9992 transform: transforming new specialization: push_5
9991 transform: --- checking reply instructions against header for push_5
9991 transform: --- fill in reply ingredients from header for recipe push_5
9991 transform: --- deduce types for recipe push_5
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: x => number
9992 transform: in => <address : <list : <number : <>>>>
9992 transform: result => <address : <list : <number : <>>>>
9992 transform: val => <address : <number : <>>>
9992 transform: next => <address : <address : <list : <number : <>>>>>
9991 transform: --- deduce types from header for push_5
9993 transform: type of x is number
9993 transform: type of in is <address : <list : <number : <>>>>
9993 transform: type of result is <address : <list : <number : <>>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: x:_elem <- next-ingredient 
9993 transform:   product: x: number -- {"x": "number"}
9992 transform: instruction: in:address:list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <list : <number : <>>>> -- {"in": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: result <- new {(list _elem): type}
9993 transform:   product: result: <address : <list : <number : <>>>> -- {"result": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: val:address:_elem <- get-address *result, value:offset
9993 transform:   product: val: <address : <number : <>>> -- {"val": <"address" : <"number" : <>>>}
9992 transform: instruction: *val <- copy x
9993 transform:   product: val: <address : <number : <>>> -- {"val": <"address" : <"number" : <>>>, "lookup": <>}
9992 transform: instruction: next:address:address:list:_elem <- get-address *result, next:offset
9993 transform:   product: next: <address : <address : <list : <number : <>>>>> -- {"next": <"address" : <"address" : <"list" : <"number" : <>>>>>}
9992 transform: instruction: *next <- copy in
9993 transform:   product: next: <address : <address : <list : <number : <>>>>> -- {"next": <"address" : <"address" : <"list" : <"number" : <>>>>>, "lookup": <>}
9992 transform: instruction: reply result
9991 transform: --- resolve ambiguous calls for recipe push_5
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9991 transform: --- compute instruction operations for recipe push_5
9991 transform: --- transform braces for recipe push_5
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: new ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: get-address ...
9992 transform: copy ...
9992 transform: reply ...
9991 transform: --- collect surrounding spaces for recipe push_5
9991 transform: --- transform names for recipe push_5
9993 name: assign x 1
9993 name: assign in 2
9993 name: assign result 3
9993 name: element value of type list is at offset 0
9993 name: assign val 4
9993 name: element next of type list is at offset 1
9993 name: assign next 5
9991 transform: --- perform checks for recipe push_5
9991 transform: --- convert 'new' to 'allocate' for recipe push_5
9992 new: size of "location" is 1
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9992 new: size of <"list" : <"number" : <>>> is 2
9991 transform: --- checking reply instructions against header for push_5
9992 transform: new specialization: push_5
9992 transform: instruction push
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 6: 100
9992 transform: instruction to-text
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 1
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2
9992 transform: final score: 105
9992 transform: matches
9992 transform: found variant to specialize: 235 to-text_3
9993 transform: switching to-text to to-text_4
9993 transform: compute type names: to-text_4
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"result": <"address" : <"array" : <"character" : <>>>>}: <"address" : <"array" : <"character" : <>>>>
9993 transform: type of result is <"address" : <"array" : <"character" : <>>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: in:address:list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: buf:address:buffer <- new-buffer 80
9994 transform:     checking {"80": "literal"}: "literal"
9993 transform: type of 80 is "literal"
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform: type of buf is <"address" : <"buffer" : <>>>
9993 transform:   instruction: buf <- to-buffer in, buf
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: result <- buffer-to-array buf
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:array:character
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'in:address:list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'buf:address:buffer <- new-buffer 80'
9993 transform: replacing in ingredient 80
9993 transform:   after: ?0
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'buf <- to-buffer in, buf'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'result <- buffer-to-array buf'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient result
9993 transform:   after: <address : <array : <character : <>>>>
9992 transform: transforming new specialization: to-text_4
9991 transform: --- checking reply instructions against header for to-text_4
9991 transform: --- fill in reply ingredients from header for recipe to-text_4
9991 transform: --- deduce types for recipe to-text_4
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: in => <address : <list : <number : <>>>>
9992 transform: buf => <address : <buffer : <>>>
9992 transform: result => <address : <array : <character : <>>>>
9991 transform: --- deduce types from header for to-text_4
9993 transform: type of in is <address : <list : <number : <>>>>
9993 transform: type of result is <address : <array : <character : <>>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: in:address:list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <list : <number : <>>>> -- {"in": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: buf:address:buffer <- new-buffer 80
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: buf <- to-buffer in, buf
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: result <- buffer-to-array buf
9993 transform:   product: result: <address : <array : <character : <>>>> -- {"result": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: reply result:address:array:character
9991 transform: --- resolve ambiguous calls for recipe to-text_4
9992 transform: instruction new-buffer
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 0: 100
9992 transform: instruction to-buffer
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 106
9992 transform: matches
9992 transform: found variant to specialize: 236 to-buffer
9993 transform: switching to-buffer to to-buffer_2
9993 transform: compute type names: to-buffer_2
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform: type of buf is <"address" : <"buffer" : <>>>
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: in:address:list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: buf:address:buffer <- next-ingredient 
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: {
9993 transform:   instruction: break-if in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: $print [000], 10/newline
9994 transform:     checking {"000": "literal-string"}: "literal-string"
9993 transform: type of 000 is "literal-string"
9994 transform:     checking {"10": "literal", "newline": <>}: "literal"
9993 transform: type of 10 is "literal"
9993 transform:   instruction: buf <- append buf, 48/0
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"48": "literal", "0": <>}: "literal"
9993 transform: type of 48 is "literal"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: reply 
9993 transform:   instruction: }
9993 transform:   instruction: val:_elem <- get *in, value:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"value": "offset"}: "offset"
9994 transform:     checking {"val": "_elem"}: "_elem"
9993 transform: type of val is "_elem"
9993 transform:   instruction: buf <- append buf, val
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"val": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: next:address:list:_elem <- rest in
9994 transform:     checking {"in": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"next": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of next is <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: nextn:number <- copy next
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"nextn": "number"}: "number"
9993 transform: type of nextn is "number"
9993 transform:   instruction: jump-if next, 1:offset
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"1": "offset"}: "offset"
9993 transform:   instruction: reply 
9993 transform:   instruction: space:character <- copy 32/space
9994 transform:     checking {"32": "literal", "space": <>}: "literal"
9993 transform: type of 32 is "literal"
9994 transform:     checking {"space": "character"}: "character"
9993 transform: type of space is "character"
9993 transform:   instruction: buf <- append buf, space:character
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"space": "character"}: "character"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: s:address:array:character <- new [-> ]
9994 transform:     checking {"-> ": "literal-string"}: "literal-string"
9993 transform: type of ->  is "literal-string"
9994 transform:     checking {"s": <"address" : <"array" : <"character" : <>>>>}: <"address" : <"array" : <"character" : <>>>>
9993 transform: type of s is <"address" : <"array" : <"character" : <>>>>
9993 transform:   instruction: n:number <- length *s
9994 transform:     checking {"s": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"n": "number"}: "number"
9993 transform: type of n is "number"
9993 transform:   instruction: buf <- append buf, s
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"s": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: buf <- to-buffer next, buf
9994 transform:     checking {"next": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'in:address:list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'buf:address:buffer <- next-ingredient '
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'break-if in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction '$print [000], 10/newline'
9993 transform: replacing in ingredient [000]
9993 transform:   after: ?0
9993 transform: replacing in ingredient 10/newline
9993 transform:   after: ?0
9993 transform: replacing in instruction 'buf <- append buf, 48/0'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient 48/0
9993 transform:   after: ?0
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction '}'
9993 transform: replacing in instruction 'val:_elem <- get *in, value:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient value:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient val:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'buf <- append buf, val'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient val
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'next:address:list:_elem <- rest in'
9993 transform: replacing in ingredient in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient next:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'nextn:number <- copy next'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient nextn:number
9993 transform:   after: number
9993 transform: replacing in instruction 'jump-if next, 1:offset'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient 1:offset
9993 transform:   after: ?0
9993 transform: replacing in instruction 'reply '
9993 transform: replacing in instruction 'space:character <- copy 32/space'
9993 transform: replacing in ingredient 32/space
9993 transform:   after: ?0
9993 transform: replacing in ingredient space:character
9993 transform:   after: character
9993 transform: replacing in instruction 'buf <- append buf, space:character'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient space:character
9993 transform:   after: character
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 's:address:array:character <- new [-> ]'
9993 transform: replacing in ingredient [-> ]
9993 transform:   after: ?0
9993 transform: replacing in ingredient s:address:array:character
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'n:number <- length *s'
9993 transform: replacing in ingredient *s
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient n:number
9993 transform:   after: number
9993 transform: replacing in instruction 'buf <- append buf, s'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient s
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'buf <- to-buffer next, buf'
9993 transform: replacing in ingredient next
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9992 transform: transforming new specialization: to-buffer_2
9991 transform: --- checking reply instructions against header for to-buffer_2
9991 transform: --- fill in reply ingredients from header for recipe to-buffer_2
9991 transform: --- deduce types for recipe to-buffer_2
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: in => <address : <list : <number : <>>>>
9992 transform: buf => <address : <buffer : <>>>
9992 transform: val => number
9992 transform: next => <address : <list : <number : <>>>>
9992 transform: nextn => number
9992 transform: space => character
9992 transform: s => <address : <array : <character : <>>>>
9992 transform: n => number
9991 transform: --- deduce types from header for to-buffer_2
9993 transform: type of in is <address : <list : <number : <>>>>
9993 transform: type of buf is <address : <buffer : <>>>
9993 transform: type of buf is <address : <buffer : <>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: in:address:list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <list : <number : <>>>> -- {"in": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: buf:address:buffer <- next-ingredient 
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: {
9992 transform: instruction: break-if in
9992 transform: instruction: $print [000], 10/newline
9992 transform: instruction: buf <- append buf, 48/0
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: reply buf:address:buffer
9992 transform: instruction: }
9992 transform: instruction: val:_elem <- get *in, value:offset
9993 transform:   product: val: number -- {"val": "number"}
9992 transform: instruction: buf <- append buf, val
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: next:address:list:_elem <- rest in
9993 transform:   product: next: <address : <list : <number : <>>>> -- {"next": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: nextn:number <- copy next
9993 transform:   product: nextn: number -- {"nextn": "number"}
9992 transform: instruction: jump-if next, 1:offset
9992 transform: instruction: reply buf:address:buffer
9992 transform: instruction: space:character <- copy 32/space
9993 transform:   product: space: character -- {"space": "character"}
9992 transform: instruction: buf <- append buf, space:character
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: s:address:array:character <- new [-> ]
9993 transform:   product: s: <address : <array : <character : <>>>> -- {"s": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: n:number <- length *s
9993 transform:   product: n: number -- {"n": "number"}
9992 transform: instruction: buf <- append buf, s
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: buf <- to-buffer next, buf
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: reply buf:address:buffer
9991 transform: --- resolve ambiguous calls for recipe to-buffer_2
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 1: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 104
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 3
9993 transform: mismatch: ingredient 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 4
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 206 append
9993 transform: switching append to append_6
9993 transform: compute type names: append_6
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform: type of buf is <"address" : <"buffer" : <>>>
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: buf:address:buffer <- next-ingredient 
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: x:_elem <- next-ingredient 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: text:address:array:character <- to-text x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"text": <"address" : <"array" : <"character" : <>>>>}: <"address" : <"array" : <"character" : <>>>>
9993 transform: type of text is <"address" : <"array" : <"character" : <>>>>
9993 transform:   instruction: len:number <- length *text
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"len": "number"}: "number"
9993 transform: type of len is "number"
9993 transform:   instruction: i:number <- copy 0
9994 transform:     checking {"0": "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {"i": "number"}: "number"
9993 transform: type of i is "number"
9993 transform:   instruction: {
9993 transform:   instruction: done?:boolean <- greater-or-equal i, len
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"len": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"done?": "boolean"}: "boolean"
9993 transform: type of done? is "boolean"
9993 transform:   instruction: break-if done?
9994 transform:     checking {"done?": <>}: <>
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: c:character <- index *text, i
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"c": "character"}: "character"
9993 transform: type of c is "character"
9993 transform:   instruction: buf <- append buf, c
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"c": <>}: <>
9994 transform:     deducing type to "character"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: i <- add i, 1
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"1": "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9993 transform:   instruction: loop 
9993 transform:   instruction: }
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'buf:address:buffer <- next-ingredient '
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in instruction 'text:address:array:character <- to-text x'
9993 transform: replacing in ingredient x
9993 transform: _elem => "number"
9993 transform:   after: number
9993 transform: replacing in ingredient text:address:array:character
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'len:number <- length *text'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient len:number
9993 transform:   after: number
9993 transform: replacing in instruction 'i:number <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in ingredient i:number
9993 transform:   after: number
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'done?:boolean <- greater-or-equal i, len'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient len
9993 transform:   after: number
9993 transform: replacing in ingredient done?:boolean
9993 transform:   after: boolean
9993 transform: replacing in instruction 'break-if done?'
9993 transform: replacing in ingredient done?
9993 transform:   after: boolean
9993 transform: replacing in instruction 'c:character <- index *text, i'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient c:character
9993 transform:   after: character
9993 transform: replacing in instruction 'buf <- append buf, c'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient c
9993 transform:   after: character
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'i <- add i, 1'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient 1
9993 transform:   after: ?0
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in instruction 'loop '
9993 transform: replacing in instruction '}'
9992 transform: transforming new specialization: append_6
9991 transform: --- checking reply instructions against header for append_6
9991 transform: --- fill in reply ingredients from header for recipe append_6
9991 transform: --- deduce types for recipe append_6
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: buf => <address : <buffer : <>>>
9992 transform: x => number
9992 transform: text => <address : <array : <character : <>>>>
9992 transform: len => number
9992 transform: i => number
9992 transform: done? => boolean
9992 transform: c => character
9991 transform: --- deduce types from header for append_6
9993 transform: type of buf is <address : <buffer : <>>>
9993 transform: type of x is number
9993 transform: type of buf is <address : <buffer : <>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: buf:address:buffer <- next-ingredient 
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: x:_elem <- next-ingredient 
9993 transform:   product: x: number -- {"x": "number"}
9992 transform: instruction: text:address:array:character <- to-text x
9993 transform:   product: text: <address : <array : <character : <>>>> -- {"text": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: len:number <- length *text
9993 transform:   product: len: number -- {"len": "number"}
9992 transform: instruction: i:number <- copy 0
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: {
9992 transform: instruction: done?:boolean <- greater-or-equal i, len
9993 transform:   product: done?: boolean -- {"done?": "boolean"}
9992 transform: instruction: break-if done?
9992 transform: instruction: c:character <- index *text, i
9993 transform:   product: c: character -- {"c": "character"}
9992 transform: instruction: buf <- append buf, c
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: i <- add i, 1
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: loop 
9992 transform: instruction: }
9992 transform: instruction: reply buf:address:buffer
9991 transform: --- resolve ambiguous calls for recipe append_6
9992 transform: instruction to-text
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 1: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 1: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 7: -1
9991 transform: --- compute instruction operations for recipe append_6
9991 transform: --- transform braces for recipe append_6
9993 transform: append_6: push (open, 6)
9993 transform: push (close, 13)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: to-text ...
9992 transform: length ...
9992 transform: copy ...
9992 transform: greater-or-equal ...
9992 transform: jump-if done?, 4:offset
9992 transform: index ...
9992 transform: append ...
9992 transform: add ...
9992 transform: jump -6:offset
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe append_6
9991 transform: --- transform names for recipe append_6
9993 name: assign buf 1
9993 name: assign x 2
9993 name: assign text 3
9993 name: assign len 4
9993 name: assign i 5
9993 name: assign done? 6
9993 name: assign c 7
9991 transform: --- perform checks for recipe append_6
9991 transform: --- convert 'new' to 'allocate' for recipe append_6
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for append_6
9992 transform: new specialization: append_6
9992 transform: instruction rest
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 104
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 234 rest
9993 transform: switching rest to rest_3
9993 transform: compute type names: rest_3
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of in is <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"result": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform: type of result is <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: in:address:list:_elem <- next-ingredient 
9994 transform:     checking {"in": <"address" : <"list" : <"_elem" : <>>>>}: <"address" : <"list" : <"_elem" : <>>>>
9993 transform:   instruction: result <- get *in, next:offset
9994 transform:     checking {"in": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9994 transform:     checking {"next": "offset"}: "offset"
9994 transform:     checking {"result": <>}: <>
9994 transform:     deducing type to <"address" : <"list" : <"_elem" : <>>>>
9993 transform: adding mapping from _elem to "number"
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient result:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'in:address:list:_elem <- next-ingredient '
9993 transform: replacing in ingredient in:address:list:_elem
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in instruction 'result <- get *in, next:offset'
9993 transform: replacing in ingredient *in
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9993 transform: replacing in ingredient next:offset
9993 transform:   after: ?0
9993 transform: replacing in ingredient result
9993 transform: _elem => "number"
9993 transform:   after: <address : <list : <number : <>>>>
9992 transform: transforming new specialization: rest_3
9991 transform: --- checking reply instructions against header for rest_3
9991 transform: --- fill in reply ingredients from header for recipe rest_3
9991 transform: --- deduce types for recipe rest_3
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: in => <address : <list : <number : <>>>>
9992 transform: result => <address : <list : <number : <>>>>
9991 transform: --- deduce types from header for rest_3
9993 transform: type of in is <address : <list : <number : <>>>>
9993 transform: type of result is <address : <list : <number : <>>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: in:address:list:_elem <- next-ingredient 
9993 transform:   product: in: <address : <list : <number : <>>>> -- {"in": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: result <- get *in, next:offset
9993 transform:   product: result: <address : <list : <number : <>>>> -- {"result": <"address" : <"list" : <"number" : <>>>>}
9992 transform: instruction: reply result:address:list:_elem
9991 transform: --- resolve ambiguous calls for recipe rest_3
9991 transform: --- compute instruction operations for recipe rest_3
9991 transform: --- transform braces for recipe rest_3
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: get ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe rest_3
9991 transform: --- transform names for recipe rest_3
9993 name: assign in 1
9993 name: element next of type list is at offset 1
9993 name: assign result 2
9991 transform: --- perform checks for recipe rest_3
9991 transform: --- convert 'new' to 'allocate' for recipe rest_3
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for rest_3
9992 transform: new specialization: rest_3
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 1: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 7: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 7: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9992 transform: final score: 104
9992 transform: matches
9992 transform: checking shape-shifting variant 1
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 2
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 3
9993 transform: mismatch: ingredient 0
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 4
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: checking shape-shifting variant 7
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: found variant to specialize: 206 append
9993 transform: switching append to append_7
9993 transform: compute type names: append_7
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform: type of buf is <"address" : <"buffer" : <>>>
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform: type of x is "_elem"
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9994 transform:     checking {"location": "type"}: "type"
9993 transform: type of location is "type"
9994 transform:     checking {"number-of-locals": "literal"}: "literal"
9993 transform: type of number-of-locals is "literal"
9994 transform:     checking {"default-space": <"address" : <"array" : <"location" : <>>>>}: <"address" : <"array" : <"location" : <>>>>
9993 transform: type of default-space is <"address" : <"array" : <"location" : <>>>>
9993 transform:   instruction: buf:address:buffer <- next-ingredient 
9994 transform:     checking {"buf": <"address" : <"buffer" : <>>>}: <"address" : <"buffer" : <>>>
9993 transform:   instruction: x:_elem <- next-ingredient 
9994 transform:     checking {"x": "_elem"}: "_elem"
9993 transform:   instruction: text:address:array:character <- to-text x
9994 transform:     checking {"x": <>}: <>
9994 transform:     deducing type to "_elem"
9994 transform:     checking {"text": <"address" : <"array" : <"character" : <>>>>}: <"address" : <"array" : <"character" : <>>>>
9993 transform: type of text is <"address" : <"array" : <"character" : <>>>>
9993 transform:   instruction: len:number <- length *text
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"len": "number"}: "number"
9993 transform: type of len is "number"
9993 transform:   instruction: i:number <- copy 0
9994 transform:     checking {"0": "literal"}: "literal"
9993 transform: type of 0 is "literal"
9994 transform:     checking {"i": "number"}: "number"
9993 transform: type of i is "number"
9993 transform:   instruction: {
9993 transform:   instruction: done?:boolean <- greater-or-equal i, len
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"len": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"done?": "boolean"}: "boolean"
9993 transform: type of done? is "boolean"
9993 transform:   instruction: break-if done?
9994 transform:     checking {"done?": <>}: <>
9994 transform:     deducing type to "boolean"
9993 transform:   instruction: c:character <- index *text, i
9994 transform:     checking {"text": <>, "lookup": <>}: <>
9994 transform:     deducing type to <"address" : <"array" : <"character" : <>>>>
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"c": "character"}: "character"
9993 transform: type of c is "character"
9993 transform:   instruction: buf <- append buf, c
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9994 transform:     checking {"c": <>}: <>
9994 transform:     deducing type to "character"
9994 transform:     checking {"buf": <>}: <>
9994 transform:     deducing type to <"address" : <"buffer" : <>>>
9993 transform:   instruction: i <- add i, 1
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9994 transform:     checking {"1": "literal"}: "literal"
9993 transform: type of 1 is "literal"
9994 transform:     checking {"i": <>}: <>
9994 transform:     deducing type to "number"
9993 transform:   instruction: loop 
9993 transform:   instruction: }
9993 transform: adding mapping from _elem to <"address" : <"array" : <"character" : <>>>>
9993 transform: replacing in recipe header ingredients
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => <"address" : <"array" : <"character" : <>>>>
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in recipe header products
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'default-space:address:array:location <- new location:type, number-of-locals:literal'
9993 transform: replacing in ingredient location:type
9993 transform:   after: ?0
9993 transform: replacing in ingredient number-of-locals:literal
9993 transform:   after: ?0
9993 transform: replacing in ingredient default-space:address:array:location
9993 transform:   after: <address : <array : <number : <>>>>
9993 transform: replacing in instruction 'buf:address:buffer <- next-ingredient '
9993 transform: replacing in ingredient buf:address:buffer
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'x:_elem <- next-ingredient '
9993 transform: replacing in ingredient x:_elem
9993 transform: _elem => <"address" : <"array" : <"character" : <>>>>
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'text:address:array:character <- to-text x'
9993 transform: replacing in ingredient x
9993 transform: _elem => <"address" : <"array" : <"character" : <>>>>
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient text:address:array:character
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in instruction 'len:number <- length *text'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient len:number
9993 transform:   after: number
9993 transform: replacing in instruction 'i:number <- copy 0'
9993 transform: replacing in ingredient 0
9993 transform:   after: ?0
9993 transform: replacing in ingredient i:number
9993 transform:   after: number
9993 transform: replacing in instruction '{'
9993 transform: replacing in instruction 'done?:boolean <- greater-or-equal i, len'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient len
9993 transform:   after: number
9993 transform: replacing in ingredient done?:boolean
9993 transform:   after: boolean
9993 transform: replacing in instruction 'break-if done?'
9993 transform: replacing in ingredient done?
9993 transform:   after: boolean
9993 transform: replacing in instruction 'c:character <- index *text, i'
9993 transform: replacing in ingredient *text
9993 transform:   after: <address : <array : <character : <>>>>
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient c:character
9993 transform:   after: character
9993 transform: replacing in instruction 'buf <- append buf, c'
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in ingredient c
9993 transform:   after: character
9993 transform: replacing in ingredient buf
9993 transform:   after: <address : <buffer : <>>>
9993 transform: replacing in instruction 'i <- add i, 1'
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in ingredient 1
9993 transform:   after: ?0
9993 transform: replacing in ingredient i
9993 transform:   after: number
9993 transform: replacing in instruction 'loop '
9993 transform: replacing in instruction '}'
9992 transform: transforming new specialization: append_7
9991 transform: --- checking reply instructions against header for append_7
9991 transform: --- fill in reply ingredients from header for recipe append_7
9991 transform: --- deduce types for recipe append_7
9992 transform: default-space => <address : <array : <number : <>>>>
9992 transform: buf => <address : <buffer : <>>>
9992 transform: x => <address : <array : <character : <>>>>
9992 transform: text => <address : <array : <character : <>>>>
9992 transform: len => number
9992 transform: i => number
9992 transform: done? => boolean
9992 transform: c => character
9991 transform: --- deduce types from header for append_7
9993 transform: type of buf is <address : <buffer : <>>>
9993 transform: type of x is <address : <array : <character : <>>>>
9993 transform: type of buf is <address : <buffer : <>>>
9992 transform: instruction: default-space:address:array:location <- new location:type, number-of-locals:literal
9993 transform:   product: default-space: <address : <array : <number : <>>>> -- {"default-space": <"address" : <"array" : <"location" : <>>>>}
9992 transform: instruction: buf:address:buffer <- next-ingredient 
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: x:_elem <- next-ingredient 
9993 transform:   product: x: <address : <array : <character : <>>>> -- {"x": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: text:address:array:character <- to-text x
9993 transform:   product: text: <address : <array : <character : <>>>> -- {"text": <"address" : <"array" : <"character" : <>>>>}
9992 transform: instruction: len:number <- length *text
9993 transform:   product: len: number -- {"len": "number"}
9992 transform: instruction: i:number <- copy 0
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: {
9992 transform: instruction: done?:boolean <- greater-or-equal i, len
9993 transform:   product: done?: boolean -- {"done?": "boolean"}
9992 transform: instruction: break-if done?
9992 transform: instruction: c:character <- index *text, i
9993 transform:   product: c: character -- {"c": "character"}
9992 transform: instruction: buf <- append buf, c
9993 transform:   product: buf: <address : <buffer : <>>> -- {"buf": <"address" : <"buffer" : <>>>}
9992 transform: instruction: i <- add i, 1
9993 transform:   product: i: number -- {"i": "number"}
9992 transform: instruction: loop 
9992 transform: instruction: }
9992 transform: instruction: reply buf:address:buffer
9991 transform: --- resolve ambiguous calls for recipe append_7
9992 transform: instruction to-text
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 0: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 1: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: instruction copy
9993 transform: too few ingredients
9992 transform: checking variant 0: -1
9992 transform: no variant found; searching for variant with suitable type ingredients
9992 transform: checking shape-shifting variant 0
9993 transform: no type ingredients
9992 transform: final score: -1
9992 transform: instruction append
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 0: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 1: 100
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 2: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 3: -1
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 4: -1
9992 transform: checking variant 5: -1
9992 transform: checking variant 6: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 7: -1
9993 transform: strict match: ingredient 0
9993 transform: mismatch: ingredient 1
9992 transform: checking variant 8: -1
9991 transform: --- compute instruction operations for recipe append_7
9991 transform: --- transform braces for recipe append_7
9993 transform: append_7: push (open, 6)
9993 transform: push (close, 13)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: to-text ...
9992 transform: length ...
9992 transform: copy ...
9992 transform: greater-or-equal ...
9992 transform: jump-if done?, 4:offset
9992 transform: index ...
9992 transform: append ...
9992 transform: add ...
9992 transform: jump -6:offset
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe append_7
9991 transform: --- transform names for recipe append_7
9993 name: assign buf 1
9993 name: assign x 2
9993 name: assign text 3
9993 name: assign len 4
9993 name: assign i 5
9993 name: assign done? 6
9993 name: assign c 7
9991 transform: --- perform checks for recipe append_7
9991 transform: --- convert 'new' to 'allocate' for recipe append_7
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for append_7
9992 transform: new specialization: append_7
9992 transform: instruction to-buffer
9993 transform: mismatch: ingredient 0
9993 transform: mismatch: ingredient 0
9992 transform: checking variant 0: -1
9992 transform: checking variant 1: -1
9993 transform: strict match: ingredient 0
9993 transform: strict match: ingredient 1
9993 transform: strict match: product 0
9992 transform: checking variant 2: 100
9991 transform: --- compute instruction operations for recipe to-buffer_2
9991 transform: --- transform braces for recipe to-buffer_2
9993 transform: to-buffer_2: push (open, 3)
9993 transform: push (close, 8)
9992 transform: local-scope ...
9992 transform:  ...
9992 transform:  ...
9992 transform: jump-if in, 3:offset
9992 transform: $print ...
9992 transform: append ...
9992 transform: reply ...
9992 transform: get ...
9992 transform: append ...
9992 transform: rest ...
9992 transform: copy ...
9992 transform: reply-unless ...
9992 transform:  ...
9992 transform: copy ...
9992 transform: append ...
9992 transform: new ...
9992 transform: length ...
9992 transform: append ...
9992 transform: to-buffer ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe to-buffer_2
9991 transform: --- transform names for recipe to-buffer_2
9993 name: assign in 1
9993 name: assign buf 2
9993 name: element value of type list is at offset 0
9993 name: assign val 3
9993 name: assign next 4
9993 name: assign nextn 5
9993 name: assign space 6
9993 name: assign s 7
9993 name: assign n 8
9991 transform: --- perform checks for recipe to-buffer_2
9991 transform: --- convert 'new' to 'allocate' for recipe to-buffer_2
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for to-buffer_2
9992 transform: new specialization: to-buffer_2
9992 transform: instruction buffer-to-array
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9993 transform: strict match: ingredient 0
9993 transform: strict match: product 0
9992 transform: checking variant 0: 100
9991 transform: --- compute instruction operations for recipe to-text_4
9991 transform: --- transform braces for recipe to-text_4
9992 transform: local-scope ...
9992 transform:  ...
9992 transform: new-buffer ...
9992 transform: to-buffer ...
9992 transform: buffer-to-array ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe to-text_4
9991 transform: --- transform names for recipe to-text_4
9993 name: assign in 1
9993 name: assign buf 2
9993 name: assign result 3
9991 transform: --- perform checks for recipe to-text_4
9991 transform: --- convert 'new' to 'allocate' for recipe to-text_4
9992 new: size of "location" is 1
9991 transform: --- checking reply instructions against header for to-text_4
9992 transform: new specialization: to-text_4
9991 transform: --- compute instruction operations for recipe run1001
9991 transform: --- transform braces for recipe run1001
9992 transform: push ...
9992 transform: push ...
9992 transform:  ...
9992 transform: stash ...
9992 transform:  ...
9991 transform: --- collect surrounding spaces for recipe run1001
9991 transform: --- transform names for recipe run1001
9993 name: assign x 1
9993 name: assign stash_0_1 2
9991 transform: --- perform checks for recipe run1001
9991 transform: --- convert 'new' to 'allocate' for recipe run1001
9991 transform: --- parsing any uninitialized reagents as integers
9998 trace: run: incrementing callstack depth to 2
 103 run: x:address:list:number <- push_5 4, 0
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
9999 mem: new alloc: 1000
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1002
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 0 in location 1003
 104 run: result <- new {(list _elem): type}
9999 mem: new alloc: 1007
9999 mem: storing 1007 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 0
9999 mem: location 1008 is 0
9999 mem: location 1004 is 1007
9998 run: address to copy is 1007
9999 mem: storing 1007 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 4
9999 mem: location 1005 is 1007
9999 mem: storing 4 in location 1007
 104 run: next:address:address:list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 0
9999 mem: location 1004 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9999 mem: storing 1008 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 0
9999 mem: location 1006 is 1008
9999 mem: storing 0 in location 1008
 104 run: reply result
9999 mem: location 1004 is 1007
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1
 103 run: x <- push_5 5, x
9999 mem: location 1 is 1007
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 104 run: x:_elem <- next-ingredient 
9999 mem: storing 5 in location 1002
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1003
 104 run: result <- new {(list _elem): type}
9999 mem: new alloc: 1009
9999 mem: storing 1009 in location 1004
 104 run: val:address:_elem <- get-address *result, value:offset
9999 mem: location 1004 is 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 0
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1009
9998 run: address to copy is 1009
9999 mem: storing 1009 in location 1005
 104 run: *val <- copy x
9999 mem: location 1002 is 5
9999 mem: location 1005 is 1009
9999 mem: storing 5 in location 1009
 104 run: next:address:address:list:_elem <- get-address *result, next:offset
9999 mem: location 1004 is 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 5
9999 mem: location 1010 is 0
9999 mem: location 1004 is 1009
9999 type: type deduced to be number$
9998 run: address to copy is 1010
9999 mem: storing 1010 in location 1006
 104 run: *next <- copy in
9999 mem: location 1003 is 1007
9999 mem: location 1006 is 1010
9999 mem: storing 1007 in location 1010
 104 run: reply result
9999 mem: location 1004 is 1009
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1009
9999 mem: storing 1009 in location 1
 103 run: stash_0_1:address:array:character <- to-text_4 x
9999 mem: location 1 is 1009
9999 trace: incrementing callstack depth to 3
 104 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 4
9999 mem: new alloc: 1011
 104 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1009 in location 1013
 104 run: buf:address:buffer <- new-buffer 80
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
9999 mem: new alloc: 1016
 105 run: capacity:number <- next-ingredient 
9999 mem: storing 80 in location 1018
 105 run: result <- new buffer:type
9999 mem: new alloc: 1022
9999 mem: storing 1022 in location 1019
 105 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1019 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1019 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1020
 105 run: *len:address:number <- copy 0
9999 mem: location 1020 is 1022
9999 mem: storing 0 in location 1022
 105 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1019 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 0
9999 mem: location 1019 is 1022
9998 run: address to copy is 1023
9999 mem: storing 1023 in location 1021
 105 run: *s <- new character:type, capacity
9999 mem: location 1018 is 80
9999 mem: array size is 80
9999 mem: new alloc: 1024
9999 mem: location 1021 is 1023
9999 mem: storing 1024 in location 1023
 105 run: reply result
9999 mem: location 1019 is 1022
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1014
 104 run: buf <- to-buffer_2 in, buf
9999 mem: location 1013 is 1009
9999 mem: location 1014 is 1022
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1105
 105 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1009 in location 1107
 105 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1108
 105 run: jump-if in, 
9999 mem: location 1107 is 1009
9998 run: jumping to instruction 8
 105 run: val:_elem <- get *in, value:offset
9999 mem: location 1107 is 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 5
9999 mem: location 1010 is 1007
9999 mem: location 1107 is 1009
9998 run: address to copy is 1009
9998 run: its type is number
9999 mem: location 1009 is 5
9999 mem: storing 5 in location 1109
 105 run: buf <- append_6 buf, val
9999 mem: location 1108 is 1022
9999 mem: location 1109 is 5
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
9999 mem: new alloc: 1115
 106 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1117
 106 run: x:_elem <- next-ingredient 
9999 mem: storing 5 in location 1118
 106 run: text:address:array:character <- to-text_2 x
9999 mem: location 1118 is 5
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
9999 mem: new alloc: 1124
 107 run: n:number <- next-ingredient 
9999 mem: storing 5 in location 1126
 107 run: jump-if n, 
9999 mem: location 1126 is 5
9998 run: jumping to instruction 6
 107 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1128
 107 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1126 is 5
9999 mem: storing 0 in location 1129
 107 run: jump-unless negative?, 
9999 mem: location 1129 is 0
9998 run: jumping to instruction 13
 107 run: tmp:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 108 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 1018
 108 run: result <- new buffer:type
9999 mem: new alloc: 1141
9999 mem: storing 1141 in location 1019
 108 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1019 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 0
9999 mem: location 1019 is 1141
9998 run: address to copy is 1141
9999 mem: storing 1141 in location 1020
 108 run: *len:address:number <- copy 0
9999 mem: location 1020 is 1141
9999 mem: storing 0 in location 1141
 108 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1019 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 0
9999 mem: location 1019 is 1141
9998 run: address to copy is 1142
9999 mem: storing 1142 in location 1021
 108 run: *s <- new character:type, capacity
9999 mem: location 1018 is 30
9999 mem: array size is 30
9999 mem: new alloc: 1143
9999 mem: location 1021 is 1142
9999 mem: storing 1143 in location 1142
 108 run: reply result
9999 mem: location 1019 is 1141
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1141
9999 mem: storing 1141 in location 1130
 107 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1131
 107 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 5
9999 mem: storing 0 in location 1132
 107 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 107 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1126 is 5
9999 mem: storing 0 in location 1126
9999 mem: storing 5 in location 1133
 107 run: c:character <- add digit-base, digit
9999 mem: location 1131 is 48
9999 mem: location 1133 is 5
9999 mem: storing 53 in location 1134
 107 run: tmp:address:buffer <- append_2 tmp, c
9999 mem: location 1130 is 1141
9999 mem: location 1134 is 53
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1174
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1141 in location 1176
 108 run: c:character <- next-ingredient 
9999 mem: storing 53 in location 1177
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 1143
9999 mem: location 1176 is 1141
9998 run: address to copy is 1141
9999 mem: storing 1141 in location 1178
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 53
9999 mem: storing 0 in location 1179
 108 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1141
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1141 in location 1002
 109 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 1143
9999 mem: location 1002 is 1141
9998 run: address to copy is 1141
9998 run: its type is number
9999 mem: location 1141 is 0
9999 mem: storing 0 in location 1003
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 1143
9999 mem: location 1002 is 1141
9998 run: address to copy is 1142
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1142 is 1143
9999 mem: storing 1143 in location 1004
 109 run: capacity:number <- length *s
9999 mem: location 1004 is 1143
9999 mem: storing 30 in location 1005
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 109 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 108 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1142 is 1143
9999 mem: location 1176 is 1141
9998 run: address to copy is 1142
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1142 is 1143
9999 mem: storing 1143 in location 1182
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1143
9999 mem: location 1178 is 1141
9999 mem: location 1141 is 0
9999 mem: storing 1144 in location 1183
 108 run: *dest <- copy c
9999 mem: location 1177 is 53
9999 mem: location 1183 is 1144
9999 mem: storing 53 in location 1144
 108 run: *len <- add *len, 1
9999 mem: location 1178 is 1141
9999 mem: location 1141 is 0
9999 mem: location 1178 is 1141
9999 mem: storing 1 in location 1141
 108 run: reply in:address:buffer
9999 mem: location 1176 is 1141
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1141
9999 mem: storing 1141 in location 1130
 107 run: jump 
9998 run: jumping to instruction 17
 107 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 0
9999 mem: storing 1 in location 1132
 107 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 23
 107 run: jump-unless negate-result:boolean, 
9999 mem: location 1128 is 0
9998 run: jumping to instruction 27
 107 run: len:number <- get *tmp, length:offset
9999 mem: location 1130 is 1141
9999 mem: location 1141 is 1
9999 mem: location 1142 is 1143
9999 mem: location 1130 is 1141
9998 run: address to copy is 1141
9998 run: its type is number
9999 mem: location 1141 is 1
9999 mem: storing 1 in location 1135
 107 run: buf:address:array:character <- get *tmp, data:offset
9999 mem: location 1130 is 1141
9999 mem: location 1141 is 1
9999 mem: location 1142 is 1143
9999 mem: location 1130 is 1141
9998 run: address to copy is 1142
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1142 is 1143
9999 mem: storing 1143 in location 1136
 107 run: result <- new character:type, len
9999 mem: location 1135 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1184
9999 mem: storing 1184 in location 1127
 107 run: i:number <- subtract len, 1
9999 mem: location 1135 is 1
9999 mem: storing 0 in location 1137
 107 run: j:number <- copy 0
9999 mem: storing 0 in location 1138
 107 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is 0
9999 mem: storing 0 in location 1132
 107 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 107 run: src:character <- index *buf, i
9999 mem: location 1136 is 1143
9999 mem: location 1137 is 0
9998 run: address to copy is 1144
9998 run: its type is character
9999 mem: location 1144 is 53
9999 mem: storing 53 in location 1139
 107 run: dest:address:character <- index-address *result, j
9999 mem: location 1127 is 1184
9999 mem: location 1138 is 0
9999 mem: storing 1185 in location 1140
 107 run: *dest <- copy src
9999 mem: location 1139 is 53
9999 mem: location 1140 is 1185
9999 mem: storing 53 in location 1185
 107 run: i <- subtract i, 1
9999 mem: location 1137 is 0
9999 mem: storing -1 in location 1137
 107 run: j <- add j, 1
9999 mem: location 1138 is 0
9999 mem: storing 1 in location 1138
 107 run: jump 
9998 run: jumping to instruction 34
 107 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is -1
9999 mem: storing 1 in location 1132
 107 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 42
 107 run: reply result:address:array:character
9999 mem: location 1127 is 1184
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1184
9999 mem: storing 1184 in location 1119
 106 run: len:number <- length *text
9999 mem: location 1119 is 1184
9999 mem: storing 1 in location 1120
 106 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 1
9999 mem: storing 0 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1119 is 1184
9999 mem: location 1121 is 0
9998 run: address to copy is 1185
9998 run: its type is character
9999 mem: location 1185 is 53
9999 mem: storing 53 in location 1123
 106 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1022
9999 mem: location 1123 is 53
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1176
 107 run: c:character <- next-ingredient 
9999 mem: storing 53 in location 1177
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1024
9999 mem: location 1176 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1178
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 53
9999 mem: storing 0 in location 1179
 107 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1022
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1002
 108 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1022
9998 run: its type is number
9999 mem: location 1022 is 0
9999 mem: storing 0 in location 1003
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1004
 108 run: capacity:number <- length *s
9999 mem: location 1004 is 1024
9999 mem: storing 80 in location 1005
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 108 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 107 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1023 is 1024
9999 mem: location 1176 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1182
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1024
9999 mem: location 1178 is 1022
9999 mem: location 1022 is 0
9999 mem: storing 1025 in location 1183
 107 run: *dest <- copy c
9999 mem: location 1177 is 53
9999 mem: location 1183 is 1025
9999 mem: storing 53 in location 1025
 107 run: *len <- add *len, 1
9999 mem: location 1178 is 1022
9999 mem: location 1022 is 0
9999 mem: location 1178 is 1022
9999 mem: storing 1 in location 1022
 107 run: reply in:address:buffer
9999 mem: location 1176 is 1022
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1117
 106 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 1
9999 mem: storing 1 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 106 run: reply buf:address:buffer
9999 mem: location 1117 is 1022
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1108
 105 run: next:address:list:_elem <- rest_3 in
9999 mem: location 1107 is 1009
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
9999 mem: new alloc: 1186
 106 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1009 in location 1188
 106 run: result <- get *in, next:offset
9999 mem: location 1188 is 1009
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1009 is 5
9999 mem: location 1010 is 1007
9999 mem: location 1188 is 1009
9999 type: type deduced to be number$
9998 run: address to copy is 1010
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1010 is 1007
9999 mem: storing 1007 in location 1189
 106 run: reply result:address:list:_elem
9999 mem: location 1189 is 1007
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1007
9999 mem: storing 1007 in location 1110
 105 run: nextn:number <- copy next
9999 mem: location 1110 is 1007
9999 mem: storing 1007 in location 1111
 105 run: jump-if next, 1:offset
9999 mem: location 1110 is 1007
9998 run: jumping to instruction 15
 105 run: space:character <- copy 32/space
9999 mem: storing 32 in location 1112
 105 run: buf <- append_2 buf, space:character
9999 mem: location 1108 is 1022
9999 mem: location 1112 is 32
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 106 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1176
 106 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 106 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1022
9999 mem: location 1022 is 1
9999 mem: location 1023 is 1024
9999 mem: location 1176 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1178
 106 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 106 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 106 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1022
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1002
 107 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 1
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1022
9998 run: its type is number
9999 mem: location 1022 is 1
9999 mem: storing 1 in location 1003
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 1
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1004
 107 run: capacity:number <- length *s
9999 mem: location 1004 is 1024
9999 mem: storing 80 in location 1005
 107 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 1
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 107 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 106 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 106 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1022
9999 mem: location 1022 is 1
9999 mem: location 1023 is 1024
9999 mem: location 1176 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1182
 106 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1024
9999 mem: location 1178 is 1022
9999 mem: location 1022 is 1
9999 mem: storing 1026 in location 1183
 106 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1026
9999 mem: storing 32 in location 1026
 106 run: *len <- add *len, 1
9999 mem: location 1178 is 1022
9999 mem: location 1022 is 1
9999 mem: location 1178 is 1022
9999 mem: storing 2 in location 1022
 106 run: reply in:address:buffer
9999 mem: location 1176 is 1022
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1108
 105 run: s:address:array:character <- new [-> ]
9999 mem: storing 1190 in location 1113
 105 run: n:number <- length *s
9999 mem: location 1113 is 1190
9999 mem: storing 3 in location 1114
 105 run: buf <- append_7 buf, s
9999 mem: location 1108 is 1022
9999 mem: location 1113 is 1190
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 106 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1117
 106 run: x:_elem <- next-ingredient 
9999 mem: storing 1190 in location 1118
 106 run: text:address:array:character <- to-text x
9999 mem: location 1118 is 1190
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 2
9999 mem: new alloc: 1194
 107 run: x:address:array:character <- next-ingredient 
9999 mem: storing 1190 in location 1196
 107 run: reply x
9999 mem: location 1196 is 1190
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1190
9999 mem: storing 1190 in location 1119
 106 run: len:number <- length *text
9999 mem: location 1119 is 1190
9999 mem: storing 3 in location 1120
 106 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1119 is 1190
9999 mem: location 1121 is 0
9998 run: address to copy is 1191
9998 run: its type is character
9999 mem: location 1191 is 45
9999 mem: storing 45 in location 1123
 106 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1022
9999 mem: location 1123 is 45
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1176
 107 run: c:character <- next-ingredient 
9999 mem: storing 45 in location 1177
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1022
9999 mem: location 1022 is 2
9999 mem: location 1023 is 1024
9999 mem: location 1176 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1178
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 45
9999 mem: storing 0 in location 1179
 107 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1022
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1002
 108 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 2
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1022
9998 run: its type is number
9999 mem: location 1022 is 2
9999 mem: storing 2 in location 1003
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 2
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1004
 108 run: capacity:number <- length *s
9999 mem: location 1004 is 1024
9999 mem: storing 80 in location 1005
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 2
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 108 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 107 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1022
9999 mem: location 1022 is 2
9999 mem: location 1023 is 1024
9999 mem: location 1176 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1182
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1024
9999 mem: location 1178 is 1022
9999 mem: location 1022 is 2
9999 mem: storing 1027 in location 1183
 107 run: *dest <- copy c
9999 mem: location 1177 is 45
9999 mem: location 1183 is 1027
9999 mem: storing 45 in location 1027
 107 run: *len <- add *len, 1
9999 mem: location 1178 is 1022
9999 mem: location 1022 is 2
9999 mem: location 1178 is 1022
9999 mem: storing 3 in location 1022
 107 run: reply in:address:buffer
9999 mem: location 1176 is 1022
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1117
 106 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1119 is 1190
9999 mem: location 1121 is 1
9998 run: address to copy is 1192
9998 run: its type is character
9999 mem: location 1192 is 62
9999 mem: storing 62 in location 1123
 106 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1022
9999 mem: location 1123 is 62
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1176
 107 run: c:character <- next-ingredient 
9999 mem: storing 62 in location 1177
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1022
9999 mem: location 1022 is 3
9999 mem: location 1023 is 1024
9999 mem: location 1176 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1178
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 62
9999 mem: storing 0 in location 1179
 107 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1022
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1002
 108 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 3
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1022
9998 run: its type is number
9999 mem: location 1022 is 3
9999 mem: storing 3 in location 1003
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 3
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1004
 108 run: capacity:number <- length *s
9999 mem: location 1004 is 1024
9999 mem: storing 80 in location 1005
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 3
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 108 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 107 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1022
9999 mem: location 1022 is 3
9999 mem: location 1023 is 1024
9999 mem: location 1176 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1182
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1024
9999 mem: location 1178 is 1022
9999 mem: location 1022 is 3
9999 mem: storing 1028 in location 1183
 107 run: *dest <- copy c
9999 mem: location 1177 is 62
9999 mem: location 1183 is 1028
9999 mem: storing 62 in location 1028
 107 run: *len <- add *len, 1
9999 mem: location 1178 is 1022
9999 mem: location 1022 is 3
9999 mem: location 1178 is 1022
9999 mem: storing 4 in location 1022
 107 run: reply in:address:buffer
9999 mem: location 1176 is 1022
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1117
 106 run: i <- add i, 1
9999 mem: location 1121 is 1
9999 mem: storing 2 in location 1121
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 2
9999 mem: location 1120 is 3
9999 mem: storing 0 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 106 run: c:character <- index *text, i
9999 mem: location 1119 is 1190
9999 mem: location 1121 is 2
9998 run: address to copy is 1193
9998 run: its type is character
9999 mem: location 1193 is 32
9999 mem: storing 32 in location 1123
 106 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1022
9999 mem: location 1123 is 32
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 107 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1176
 107 run: c:character <- next-ingredient 
9999 mem: storing 32 in location 1177
 107 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1176 is 1022
9999 mem: location 1022 is 4
9999 mem: location 1023 is 1024
9999 mem: location 1176 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1178
 107 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1177 is 32
9999 mem: storing 0 in location 1179
 107 run: jump-unless backspace?, 
9999 mem: location 1179 is 0
9998 run: jumping to instruction 12
 107 run: full?:boolean <- buffer-full? in
9999 mem: location 1176 is 1022
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1002
 108 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 4
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1022
9998 run: its type is number
9999 mem: location 1022 is 4
9999 mem: storing 4 in location 1003
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 4
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1004
 108 run: capacity:number <- length *s
9999 mem: location 1004 is 1024
9999 mem: storing 80 in location 1005
 108 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 4
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 108 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 0
9999 mem: storing 0 in location 1181
 107 run: jump-unless full?, 
9999 mem: location 1181 is 0
9998 run: jumping to instruction 17
 107 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1176 is 1022
9999 mem: location 1022 is 4
9999 mem: location 1023 is 1024
9999 mem: location 1176 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1182
 107 run: dest:address:character <- index-address *s, *len
9999 mem: location 1182 is 1024
9999 mem: location 1178 is 1022
9999 mem: location 1022 is 4
9999 mem: storing 1029 in location 1183
 107 run: *dest <- copy c
9999 mem: location 1177 is 32
9999 mem: location 1183 is 1029
9999 mem: storing 32 in location 1029
 107 run: *len <- add *len, 1
9999 mem: location 1178 is 1022
9999 mem: location 1022 is 4
9999 mem: location 1178 is 1022
9999 mem: storing 5 in location 1022
 107 run: reply in:address:buffer
9999 mem: location 1176 is 1022
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1117
 106 run: i <- add i, 1
9999 mem: location 1121 is 2
9999 mem: storing 3 in location 1121
 106 run: jump 
9998 run: jumping to instruction 7
 106 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 3
9999 mem: location 1120 is 3
9999 mem: storing 1 in location 1122
 106 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 106 run: reply buf:address:buffer
9999 mem: location 1117 is 1022
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1108
 105 run: buf <- to-buffer_2 next, buf
9999 mem: location 1110 is 1007
9999 mem: location 1108 is 1022
9999 trace: incrementing callstack depth to 5
 106 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 106 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1176
 106 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1177
 106 run: jump-if in, 
9999 mem: location 1176 is 1007
9998 run: jumping to instruction 8
 106 run: val:_elem <- get *in, value:offset
9999 mem: location 1176 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 0
9999 mem: location 1176 is 1007
9998 run: address to copy is 1007
9998 run: its type is number
9999 mem: location 1007 is 4
9999 mem: storing 4 in location 1178
 106 run: buf <- append_6 buf, val
9999 mem: location 1177 is 1022
9999 mem: location 1178 is 4
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 8
 107 run: buf:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1117
 107 run: x:_elem <- next-ingredient 
9999 mem: storing 4 in location 1118
 107 run: text:address:array:character <- to-text_2 x
9999 mem: location 1118 is 4
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 16
 108 run: n:number <- next-ingredient 
9999 mem: storing 4 in location 1126
 108 run: jump-if n, 
9999 mem: location 1126 is 4
9998 run: jumping to instruction 6
 108 run: negate-result:boolean <- copy 0
9999 mem: storing 0 in location 1128
 108 run: negative?:boolean <- lesser-than n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1129
 108 run: jump-unless negative?, 
9999 mem: location 1129 is 0
9998 run: jumping to instruction 13
 108 run: tmp:address:buffer <- new-buffer 30
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 5
 109 run: capacity:number <- next-ingredient 
9999 mem: storing 30 in location 1018
 109 run: result <- new buffer:type
9999 mem: new alloc: 1197
9999 mem: storing 1197 in location 1019
 109 run: len:address:number <- get-address *result, length:offset
9999 mem: location 1019 is 1197
9999 mem: location 1197 is 0
9999 mem: location 1198 is 0
9999 mem: location 1019 is 1197
9998 run: address to copy is 1197
9999 mem: storing 1197 in location 1020
 109 run: *len:address:number <- copy 0
9999 mem: location 1020 is 1197
9999 mem: storing 0 in location 1197
 109 run: s:address:address:array:character <- get-address *result, data:offset
9999 mem: location 1019 is 1197
9999 mem: location 1197 is 0
9999 mem: location 1198 is 0
9999 mem: location 1019 is 1197
9998 run: address to copy is 1198
9999 mem: storing 1198 in location 1021
 109 run: *s <- new character:type, capacity
9999 mem: location 1018 is 30
9999 mem: array size is 30
9999 mem: new alloc: 1199
9999 mem: location 1021 is 1198
9999 mem: storing 1199 in location 1198
 109 run: reply result
9999 mem: location 1019 is 1197
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1197
9999 mem: storing 1197 in location 1130
 108 run: digit-base:number <- copy 48
9999 mem: storing 48 in location 1131
 108 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1132
 108 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 108 run: n, digit:number <- divide-with-remainder n, 10
9999 mem: location 1126 is 4
9999 mem: storing 0 in location 1126
9999 mem: storing 4 in location 1133
 108 run: c:character <- add digit-base, digit
9999 mem: location 1131 is 48
9999 mem: location 1133 is 4
9999 mem: storing 52 in location 1134
 108 run: tmp:address:buffer <- append_2 tmp, c
9999 mem: location 1130 is 1197
9999 mem: location 1134 is 52
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
9999 mem: new alloc: 1230
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1197 in location 1232
 109 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1233
 109 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1232 is 1197
9999 mem: location 1197 is 0
9999 mem: location 1198 is 1199
9999 mem: location 1232 is 1197
9998 run: address to copy is 1197
9999 mem: storing 1197 in location 1234
 109 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1233 is 52
9999 mem: storing 0 in location 1235
 109 run: jump-unless backspace?, 
9999 mem: location 1235 is 0
9998 run: jumping to instruction 12
 109 run: full?:boolean <- buffer-full? in
9999 mem: location 1232 is 1197
9999 trace: incrementing callstack depth to 9
 110 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 110 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1197 in location 1002
 110 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1197
9999 mem: location 1197 is 0
9999 mem: location 1198 is 1199
9999 mem: location 1002 is 1197
9998 run: address to copy is 1197
9998 run: its type is number
9999 mem: location 1197 is 0
9999 mem: storing 0 in location 1003
 110 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1197
9999 mem: location 1197 is 0
9999 mem: location 1198 is 1199
9999 mem: location 1002 is 1197
9998 run: address to copy is 1198
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1198 is 1199
9999 mem: storing 1199 in location 1004
 110 run: capacity:number <- length *s
9999 mem: location 1004 is 1199
9999 mem: storing 30 in location 1005
 110 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 0
9999 mem: location 1005 is 30
9999 mem: storing 0 in location 1006
 110 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 9
9998 run: result 0 is 0
9999 mem: storing 0 in location 1237
 109 run: jump-unless full?, 
9999 mem: location 1237 is 0
9998 run: jumping to instruction 17
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1232 is 1197
9999 mem: location 1197 is 0
9999 mem: location 1198 is 1199
9999 mem: location 1232 is 1197
9998 run: address to copy is 1198
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1198 is 1199
9999 mem: storing 1199 in location 1238
 109 run: dest:address:character <- index-address *s, *len
9999 mem: location 1238 is 1199
9999 mem: location 1234 is 1197
9999 mem: location 1197 is 0
9999 mem: storing 1200 in location 1239
 109 run: *dest <- copy c
9999 mem: location 1233 is 52
9999 mem: location 1239 is 1200
9999 mem: storing 52 in location 1200
 109 run: *len <- add *len, 1
9999 mem: location 1234 is 1197
9999 mem: location 1197 is 0
9999 mem: location 1234 is 1197
9999 mem: storing 1 in location 1197
 109 run: reply in:address:buffer
9999 mem: location 1232 is 1197
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 1197
9999 mem: storing 1197 in location 1130
 108 run: jump 
9998 run: jumping to instruction 17
 108 run: done?:boolean <- equal n, 0
9999 mem: location 1126 is 0
9999 mem: storing 1 in location 1132
 108 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 23
 108 run: jump-unless negate-result:boolean, 
9999 mem: location 1128 is 0
9998 run: jumping to instruction 27
 108 run: len:number <- get *tmp, length:offset
9999 mem: location 1130 is 1197
9999 mem: location 1197 is 1
9999 mem: location 1198 is 1199
9999 mem: location 1130 is 1197
9998 run: address to copy is 1197
9998 run: its type is number
9999 mem: location 1197 is 1
9999 mem: storing 1 in location 1135
 108 run: buf:address:array:character <- get *tmp, data:offset
9999 mem: location 1130 is 1197
9999 mem: location 1197 is 1
9999 mem: location 1198 is 1199
9999 mem: location 1130 is 1197
9998 run: address to copy is 1198
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1198 is 1199
9999 mem: storing 1199 in location 1136
 108 run: result <- new character:type, len
9999 mem: location 1135 is 1
9999 mem: array size is 1
9999 mem: new alloc: 1240
9999 mem: storing 1240 in location 1127
 108 run: i:number <- subtract len, 1
9999 mem: location 1135 is 1
9999 mem: storing 0 in location 1137
 108 run: j:number <- copy 0
9999 mem: storing 0 in location 1138
 108 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is 0
9999 mem: storing 0 in location 1132
 108 run: jump-if done?, 
9999 mem: location 1132 is 0
9998 run: jump-if fell through
 108 run: src:character <- index *buf, i
9999 mem: location 1136 is 1199
9999 mem: location 1137 is 0
9998 run: address to copy is 1200
9998 run: its type is character
9999 mem: location 1200 is 52
9999 mem: storing 52 in location 1139
 108 run: dest:address:character <- index-address *result, j
9999 mem: location 1127 is 1240
9999 mem: location 1138 is 0
9999 mem: storing 1241 in location 1140
 108 run: *dest <- copy src
9999 mem: location 1139 is 52
9999 mem: location 1140 is 1241
9999 mem: storing 52 in location 1241
 108 run: i <- subtract i, 1
9999 mem: location 1137 is 0
9999 mem: storing -1 in location 1137
 108 run: j <- add j, 1
9999 mem: location 1138 is 0
9999 mem: storing 1 in location 1138
 108 run: jump 
9998 run: jumping to instruction 34
 108 run: done?:boolean <- lesser-than i, 0
9999 mem: location 1137 is -1
9999 mem: storing 1 in location 1132
 108 run: jump-if done?, 
9999 mem: location 1132 is 1
9998 run: jumping to instruction 42
 108 run: reply result:address:array:character
9999 mem: location 1127 is 1240
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1240
9999 mem: storing 1240 in location 1119
 107 run: len:number <- length *text
9999 mem: location 1119 is 1240
9999 mem: storing 1 in location 1120
 107 run: i:number <- copy 0
9999 mem: storing 0 in location 1121
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 0
9999 mem: location 1120 is 1
9999 mem: storing 0 in location 1122
 107 run: jump-if done?, 
9999 mem: location 1122 is 0
9998 run: jump-if fell through
 107 run: c:character <- index *text, i
9999 mem: location 1119 is 1240
9999 mem: location 1121 is 0
9998 run: address to copy is 1241
9998 run: its type is character
9999 mem: location 1241 is 52
9999 mem: storing 52 in location 1123
 107 run: buf <- append_2 buf, c
9999 mem: location 1117 is 1022
9999 mem: location 1123 is 52
9999 trace: incrementing callstack depth to 7
 108 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 108 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1232
 108 run: c:character <- next-ingredient 
9999 mem: storing 52 in location 1233
 108 run: len:address:number <- get-address *in, length:offset
9999 mem: location 1232 is 1022
9999 mem: location 1022 is 5
9999 mem: location 1023 is 1024
9999 mem: location 1232 is 1022
9998 run: address to copy is 1022
9999 mem: storing 1022 in location 1234
 108 run: backspace?:boolean <- equal c, 8/backspace
9999 mem: location 1233 is 52
9999 mem: storing 0 in location 1235
 108 run: jump-unless backspace?, 
9999 mem: location 1235 is 0
9998 run: jumping to instruction 12
 108 run: full?:boolean <- buffer-full? in
9999 mem: location 1232 is 1022
9999 trace: incrementing callstack depth to 8
 109 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 6
 109 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1002
 109 run: len:number <- get *in, length:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 5
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1022
9998 run: its type is number
9999 mem: location 1022 is 5
9999 mem: storing 5 in location 1003
 109 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1002 is 1022
9999 mem: location 1022 is 5
9999 mem: location 1023 is 1024
9999 mem: location 1002 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1004
 109 run: capacity:number <- length *s
9999 mem: location 1004 is 1024
9999 mem: storing 80 in location 1005
 109 run: result <- greater-or-equal len, capacity
9999 mem: location 1003 is 5
9999 mem: location 1005 is 80
9999 mem: storing 0 in location 1006
 109 run: reply result:boolean
9999 mem: location 1006 is 0
9999 trace: reply: decrementing callstack depth from 8
9998 run: result 0 is 0
9999 mem: storing 0 in location 1237
 108 run: jump-unless full?, 
9999 mem: location 1237 is 0
9998 run: jumping to instruction 17
 108 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1232 is 1022
9999 mem: location 1022 is 5
9999 mem: location 1023 is 1024
9999 mem: location 1232 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1238
 108 run: dest:address:character <- index-address *s, *len
9999 mem: location 1238 is 1024
9999 mem: location 1234 is 1022
9999 mem: location 1022 is 5
9999 mem: storing 1030 in location 1239
 108 run: *dest <- copy c
9999 mem: location 1233 is 52
9999 mem: location 1239 is 1030
9999 mem: storing 52 in location 1030
 108 run: *len <- add *len, 1
9999 mem: location 1234 is 1022
9999 mem: location 1022 is 5
9999 mem: location 1234 is 1022
9999 mem: storing 6 in location 1022
 108 run: reply in:address:buffer
9999 mem: location 1232 is 1022
9999 trace: reply: decrementing callstack depth from 7
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1117
 107 run: i <- add i, 1
9999 mem: location 1121 is 0
9999 mem: storing 1 in location 1121
 107 run: jump 
9998 run: jumping to instruction 7
 107 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1121 is 1
9999 mem: location 1120 is 1
9999 mem: storing 1 in location 1122
 107 run: jump-if done?, 
9999 mem: location 1122 is 1
9998 run: jumping to instruction 13
 107 run: reply buf:address:buffer
9999 mem: location 1117 is 1022
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1177
 106 run: next:address:list:_elem <- rest_3 in
9999 mem: location 1176 is 1007
9999 trace: incrementing callstack depth to 6
 107 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 3
 107 run: in:address:list:_elem <- next-ingredient 
9999 mem: storing 1007 in location 1188
 107 run: result <- get *in, next:offset
9999 mem: location 1188 is 1007
9999 type: checking size of type ingredient

9999 type: type deduced to be number$
9999 mem: location 1007 is 4
9999 mem: location 1008 is 0
9999 mem: location 1188 is 1007
9999 type: type deduced to be number$
9998 run: address to copy is 1008
9998 run: its type is <address : <list : <number : <>>>>
9999 mem: location 1008 is 0
9999 mem: storing 0 in location 1189
 107 run: reply result:address:list:_elem
9999 mem: location 1189 is 0
9999 trace: reply: decrementing callstack depth from 6
9998 run: result 0 is 0
9999 mem: storing 0 in location 1179
 106 run: nextn:number <- copy next
9999 mem: location 1179 is 0
9999 mem: storing 0 in location 1180
 106 run: jump-if next, 1:offset
9999 mem: location 1179 is 0
9998 run: jump-if fell through
 106 run: reply buf:address:buffer
9999 mem: location 1177 is 1022
9999 trace: reply: decrementing callstack depth from 5
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1108
 105 run: reply buf:address:buffer
9999 mem: location 1108 is 1022
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1022
9999 mem: storing 1022 in location 1014
 104 run: result <- buffer-to-array buf
9999 mem: location 1014 is 1022
9999 trace: incrementing callstack depth to 4
 105 run: default-space:address:array:location <- new location:type, number-of-locals:literal
9999 mem: array size is 9
 105 run: in:address:buffer <- next-ingredient 
9999 mem: storing 1022 in location 1107
 105 run: jump-if in, 
9999 mem: location 1107 is 1022
9998 run: jumping to instruction 5
 105 run: len:number <- get *in, length:offset
9999 mem: location 1107 is 1022
9999 mem: location 1022 is 6
9999 mem: location 1023 is 1024
9999 mem: location 1107 is 1022
9998 run: address to copy is 1022
9998 run: its type is number
9999 mem: location 1022 is 6
9999 mem: storing 6 in location 1108
 105 run: s:address:array:character <- get *in, data:offset
9999 mem: location 1107 is 1022
9999 mem: location 1022 is 6
9999 mem: location 1023 is 1024
9999 mem: location 1107 is 1022
9998 run: address to copy is 1023
9998 run: its type is <address : <array : <character : <>>>>
9999 mem: location 1023 is 1024
9999 mem: storing 1024 in location 1109
 105 run: result <- new character:type, len
9999 mem: location 1108 is 6
9999 mem: array size is 6
9999 mem: storing 1000 in location 1110
 105 run: i:number <- copy 0
9999 mem: storing 0 in location 1111
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1111 is 0
9999 mem: location 1108 is 6
9999 mem: storing 0 in location 1112
 105 run: jump-if done?, 
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1109 is 1024
9999 mem: location 1111 is 0
9998 run: address to copy is 1025
9998 run: its type is character
9999 mem: location 1025 is 53
9999 mem: storing 53 in location 1113
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1110 is 1000
9999 mem: location 1111 is 0
9999 mem: storing 1001 in location 1114
 105 run: *dest <- copy src
9999 mem: location 1113 is 53
9999 mem: location 1114 is 1001
9999 mem: storing 53 in location 1001
 105 run: i <- add i, 1
9999 mem: location 1111 is 0
9999 mem: storing 1 in location 1111
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1111 is 1
9999 mem: location 1108 is 6
9999 mem: storing 0 in location 1112
 105 run: jump-if done?, 
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1109 is 1024
9999 mem: location 1111 is 1
9998 run: address to copy is 1026
9998 run: its type is character
9999 mem: location 1026 is 32
9999 mem: storing 32 in location 1113
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1110 is 1000
9999 mem: location 1111 is 1
9999 mem: storing 1002 in location 1114
 105 run: *dest <- copy src
9999 mem: location 1113 is 32
9999 mem: location 1114 is 1002
9999 mem: storing 32 in location 1002
 105 run: i <- add i, 1
9999 mem: location 1111 is 1
9999 mem: storing 2 in location 1111
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1111 is 2
9999 mem: location 1108 is 6
9999 mem: storing 0 in location 1112
 105 run: jump-if done?, 
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1109 is 1024
9999 mem: location 1111 is 2
9998 run: address to copy is 1027
9998 run: its type is character
9999 mem: location 1027 is 45
9999 mem: storing 45 in location 1113
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1110 is 1000
9999 mem: location 1111 is 2
9999 mem: storing 1003 in location 1114
 105 run: *dest <- copy src
9999 mem: location 1113 is 45
9999 mem: location 1114 is 1003
9999 mem: storing 45 in location 1003
 105 run: i <- add i, 1
9999 mem: location 1111 is 2
9999 mem: storing 3 in location 1111
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1111 is 3
9999 mem: location 1108 is 6
9999 mem: storing 0 in location 1112
 105 run: jump-if done?, 
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1109 is 1024
9999 mem: location 1111 is 3
9998 run: address to copy is 1028
9998 run: its type is character
9999 mem: location 1028 is 62
9999 mem: storing 62 in location 1113
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1110 is 1000
9999 mem: location 1111 is 3
9999 mem: storing 1004 in location 1114
 105 run: *dest <- copy src
9999 mem: location 1113 is 62
9999 mem: location 1114 is 1004
9999 mem: storing 62 in location 1004
 105 run: i <- add i, 1
9999 mem: location 1111 is 3
9999 mem: storing 4 in location 1111
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1111 is 4
9999 mem: location 1108 is 6
9999 mem: storing 0 in location 1112
 105 run: jump-if done?, 
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1109 is 1024
9999 mem: location 1111 is 4
9998 run: address to copy is 1029
9998 run: its type is character
9999 mem: location 1029 is 32
9999 mem: storing 32 in location 1113
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1110 is 1000
9999 mem: location 1111 is 4
9999 mem: storing 1005 in location 1114
 105 run: *dest <- copy src
9999 mem: location 1113 is 32
9999 mem: location 1114 is 1005
9999 mem: storing 32 in location 1005
 105 run: i <- add i, 1
9999 mem: location 1111 is 4
9999 mem: storing 5 in location 1111
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1111 is 5
9999 mem: location 1108 is 6
9999 mem: storing 0 in location 1112
 105 run: jump-if done?, 
9999 mem: location 1112 is 0
9998 run: jump-if fell through
 105 run: src:character <- index *s, i
9999 mem: location 1109 is 1024
9999 mem: location 1111 is 5
9998 run: address to copy is 1030
9998 run: its type is character
9999 mem: location 1030 is 52
9999 mem: storing 52 in location 1113
 105 run: dest:address:character <- index-address *result, i
9999 mem: location 1110 is 1000
9999 mem: location 1111 is 5
9999 mem: storing 1006 in location 1114
 105 run: *dest <- copy src
9999 mem: location 1113 is 52
9999 mem: location 1114 is 1006
9999 mem: storing 52 in location 1006
 105 run: i <- add i, 1
9999 mem: location 1111 is 5
9999 mem: storing 6 in location 1111
 105 run: jump 
9998 run: jumping to instruction 11
 105 run: done?:boolean <- greater-or-equal i, len
9999 mem: location 1111 is 6
9999 mem: location 1108 is 6
9999 mem: storing 1 in location 1112
 105 run: jump-if done?, 
9999 mem: location 1112 is 1
9998 run: jumping to instruction 18
 105 run: reply result:address:array:character
9999 mem: location 1110 is 1000
9999 trace: reply: decrementing callstack depth from 4
9998 run: result 0 is 1000
9999 mem: storing 1000 in location 1015
 104 run: reply result:address:array:character
9999 mem: location 1015 is 1000
9999 trace: reply: decrementing callstack depth from 3
9998 run: result 0 is 1000
9999 mem: storing 1000 in location 2
 103 run: stash [foo foo], stash_0_1:address:array:character
9999 mem: location 2 is 1000
   2 app: foo foo 5 -> 4
 103 run: reply 
9999 trace: reply: decrementing callstack depth from 2
 102 run: trace-should-contain [
    app: foo foo 5 -> 4
  ]
 102 run: reply 
9999 trace: reply: decrementing callstack depth from 1
