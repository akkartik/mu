c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((0 space-address) (names init-counter)) <- ((next-input))) -- nil
c{0: 2 (((y integer) (space 1)) <- ((add)) ((y integer) (space 1)) ((1 literal))) -- nil
c{0: 3 (((y integer)) <- ((copy)) ((34 literal))) -- nil
c{0: 4 (((reply)) ((y integer) (space 1))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((0 space-address) (names init-counter)) <- ((next-input)))
c{1: 2 ✓ (((y integer) (space 1)) <- ((add)) ((y integer) (space 1)) ((1 literal)))
c{1: 3 ✓ (((y integer)) <- ((copy)) ((34 literal)))
c{1: 4 ✓ (((reply)) ((y integer) (space 1)))
c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) -- nil
c{0: 1 (((x integer)) <- ((copy)) ((23 literal))) -- nil
c{0: 2 (((y integer)) <- ((copy)) ((3 literal))) -- nil
c{0: 3 (((reply)) ((default-space space-address))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
c{1: 1 ✓ (((x integer)) <- ((copy)) ((23 literal)))
c{1: 2 ✓ (((y integer)) <- ((copy)) ((3 literal)))
c{1: 3 ✓ (((reply)) ((default-space space-address)))
c{0: 0 (((1 space-address) (names init-counter)) <- ((init-counter))) -- nil
c{0: 1 (((2 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter))) -- nil
c{0: 2 (((3 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter))) -- nil
c{1: 0 ✓ (((1 space-address) (names init-counter)) <- ((init-counter)))
c{1: 1 ✓ (((2 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter)))
c{1: 2 ✓ (((3 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter)))
-: next-space-generator of increment-counter is init-counter
cn0: convert-names in increment-counter
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((0 space-address) (names init-counter)) <- ((next-input))) nil nil
cn0: checking oarg ((0 space-address) (names init-counter))
maybe-add: ((0 space-address) (names init-counter))
cn0: (((y integer) (space 1)) <- ((add)) ((y integer) (space 1)) ((1 literal))) nil nil
cn0: checking arg ((y integer) (space 1))
maybe-add: ((y integer) (space 1))
cn0: checking arg ((1 literal))
cn0: checking oarg ((y integer) (space 1))
maybe-add: ((y integer) (space 1))
cn0: (((y integer)) <- ((copy)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: checking oarg ((y integer))
maybe-add: ((y integer))
cn0: location for oarg ((y integer)): 1
cn0: (((reply)) ((y integer) (space 1))) ((y 1)) nil
cn0: checking arg ((y integer) (space 1))
maybe-add: ((y integer) (space 1))
cn0: convert-names in init-counter
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((30 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((x integer)) <- ((copy)) ((23 literal))) nil nil
cn0: checking arg ((23 literal))
cn0: checking oarg ((x integer))
maybe-add: ((x integer))
cn0: location for oarg ((x integer)): 1
cn0: (((y integer)) <- ((copy)) ((3 literal))) ((x 1)) nil
cn0: checking arg ((3 literal))
cn0: checking oarg ((y integer))
maybe-add: ((y integer))
cn0: location for oarg ((y integer)): 2
cn0: (((reply)) ((default-space space-address))) ((x 1) (y 2)) nil
cn0: checking arg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: convert-names in main
cn0: (((1 space-address) (names init-counter)) <- ((init-counter))) nil nil
cn0: checking oarg ((1 space-address) (names init-counter))
maybe-add: ((1 space-address) (names init-counter))
cn0: (((2 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter))) nil nil
cn0: checking arg ((1 space-address) (names init-counter))
maybe-add: ((1 space-address) (names init-counter))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((3 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter))) nil nil
cn0: checking arg ((1 space-address) (names init-counter))
maybe-add: ((1 space-address) (names init-counter))
cn0: checking oarg ((3 integer))
maybe-add: ((3 integer))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((0 space-address) (names init-counter)) <- ((next-input)))
cn1: (((2 integer) (space 1)) <- ((add)) ((2 integer) (space 1)) ((1 literal)))
cn1: (((1 integer)) <- ((copy)) ((34 literal)))
cn1: (((reply)) ((2 integer) (space 1)))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
cn1: (((1 integer)) <- ((copy)) ((23 literal)))
cn1: (((2 integer)) <- ((copy)) ((3 literal)))
cn1: (((reply)) ((default-space space-address)))
cn1: (((1 space-address) (names init-counter)) <- ((init-counter)))
cn1: (((2 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter)))
cn1: (((3 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter)))
schedule: main
run: main 0: (((1 space-address) (names init-counter)) <- ((init-counter)))
run: init-counter/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-counter/main 0: 1000 => ((default-space space-address))
run: init-counter/main 1: (((1 integer)) <- ((copy)) ((23 literal)))
run: init-counter/main 1: 23 => ((1 integer))
mem: ((1 integer)): 1002 <= 23
run: init-counter/main 2: (((2 integer)) <- ((copy)) ((3 literal)))
run: init-counter/main 2: 3 => ((2 integer))
mem: ((2 integer)): 1003 <= 3
run: init-counter/main 3: (((reply)) ((default-space space-address)))
run: main 0: 1000 => ((1 space-address) (names init-counter))
mem: ((1 space-address) (names init-counter)): 1 <= 1000
run: main 1: (((2 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter)))
mem: ((1 space-address) (names init-counter)) => 1000
run: increment-counter/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: increment-counter/main 0: 1031 => ((default-space space-address))
run: increment-counter/main 1: (((0 space-address) (names init-counter)) <- ((next-input)))
arg: nil 0 (1000)
run: increment-counter/main 1: 1000 => ((0 space-address) (names init-counter))
mem: ((0 space-address) (names init-counter)): 1032 <= 1000
run: increment-counter/main 2: (((2 integer) (space 1)) <- ((add)) ((2 integer) (space 1)) ((1 literal)))
mem: ((2 integer) (space 1)) => 3
run: increment-counter/main 2: 4 => ((2 integer) (space 1))
mem: ((2 integer) (space 1)): 1003 <= 4
run: increment-counter/main 3: (((1 integer)) <- ((copy)) ((34 literal)))
run: increment-counter/main 3: 34 => ((1 integer))
mem: ((1 integer)): 1033 <= 34
run: increment-counter/main 4: (((reply)) ((2 integer) (space 1)))
mem: ((2 integer) (space 1)) => 4
run: main 1: 4 => ((2 integer))
mem: ((2 integer)): 2 <= 4
run: main 2: (((3 integer)) <- ((increment-counter)) ((1 space-address) (names init-counter)))
mem: ((1 space-address) (names init-counter)) => 1000
run: increment-counter/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: increment-counter/main 0: 1062 => ((default-space space-address))
run: increment-counter/main 1: (((0 space-address) (names init-counter)) <- ((next-input)))
arg: nil 0 (1000)
run: increment-counter/main 1: 1000 => ((0 space-address) (names init-counter))
mem: ((0 space-address) (names init-counter)): 1063 <= 1000
run: increment-counter/main 2: (((2 integer) (space 1)) <- ((add)) ((2 integer) (space 1)) ((1 literal)))
mem: ((2 integer) (space 1)) => 4
run: increment-counter/main 2: 5 => ((2 integer) (space 1))
mem: ((2 integer) (space 1)): 1003 <= 5
run: increment-counter/main 3: (((1 integer)) <- ((copy)) ((34 literal)))
run: increment-counter/main 3: 34 => ((1 integer))
mem: ((1 integer)): 1064 <= 34
run: increment-counter/main 4: (((reply)) ((2 integer) (space 1)))
mem: ((2 integer) (space 1)) => 5
run: main 2: 5 => ((3 integer))
mem: ((3 integer)): 3 <= 5
schedule: done with routine nil
