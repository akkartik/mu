c{0: 0 (((sleep)) ((for-some-cycles literal)) ((1 literal))) -- nil
c{0: 1 (((1 integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 2 (((1 integer)) <- ((copy)) ((0 literal))) -- nil
c{1: 0 ✓ (((sleep)) ((for-some-cycles literal)) ((1 literal)))
c{1: 1 ✓ (((1 integer)) <- ((copy)) ((0 literal)))
c{1: 2 ✓ (((1 integer)) <- ((copy)) ((0 literal)))
c{0: 0 (((2 integer)) <- ((copy)) ((0 literal))) -- nil
c{0: 1 (((2 integer)) <- ((copy)) ((0 literal))) -- nil
c{1: 0 ✓ (((2 integer)) <- ((copy)) ((0 literal)))
c{1: 1 ✓ (((2 integer)) <- ((copy)) ((0 literal)))
cn0: convert-names in f1
cn0: (((sleep)) ((for-some-cycles literal)) ((1 literal))) nil nil
cn0: checking arg ((for-some-cycles literal))
cn0: checking arg ((1 literal))
cn0: (((1 integer)) <- ((copy)) ((0 literal))) nil nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((1 integer)) <- ((copy)) ((0 literal))) nil nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: convert-names in f2
cn0: (((2 integer)) <- ((copy)) ((0 literal))) nil nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((2 integer)) <- ((copy)) ((0 literal))) nil nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn1: (((sleep)) ((for-some-cycles literal)) ((1 literal)))
cn1: (((1 integer)) <- ((copy)) ((0 literal)))
cn1: (((1 integer)) <- ((copy)) ((0 literal)))
cn1: (((2 integer)) <- ((copy)) ((0 literal)))
cn1: (((2 integer)) <- ((copy)) ((0 literal)))
schedule: f1
run: f1 0: (((sleep)) ((for-some-cycles literal)) ((1 literal)))
run: f1 0: sleeping until 2
schedule: pushing f1 to sleep queue
schedule: f2
run: f2 0: (((2 integer)) <- ((copy)) ((0 literal)))
run: f2 0: 0 => ((2 integer))
mem: ((2 integer)): 2 <= 0
run: f2 1: (((2 integer)) <- ((copy)) ((0 literal)))
run: f2 1: 0 => ((2 integer))
mem: ((2 integer)): 2 <= 0
schedule: done with routine nil
schedule: waking up f1
schedule: f1
run: f1 1: (((1 integer)) <- ((copy)) ((0 literal)))
run: f1 1: 0 => ((1 integer))
mem: ((1 integer)): 1 <= 0
run: f1 2: (((1 integer)) <- ((copy)) ((0 literal)))
run: f1 2: 0 => ((1 integer))
mem: ((1 integer)): 1 <= 0
schedule: done with routine nil
