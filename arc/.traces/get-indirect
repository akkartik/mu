c{0: 0 (((1 integer)) <- ((copy)) ((34 literal))) -- nil
c{0: 1 (((2 boolean)) <- ((copy)) ((nil literal))) -- nil
c{0: 2 (((3 integer-boolean-pair-address)) <- ((copy)) ((1 literal))) -- nil
c{0: 3 (((4 boolean)) <- ((get)) ((3 integer-boolean-pair-address) (deref)) ((1 offset))) -- nil
c{0: 4 (((5 integer)) <- ((get)) ((3 integer-boolean-pair-address) (deref)) ((0 offset))) -- nil
c{1: 0 ✓ (((1 integer)) <- ((copy)) ((34 literal)))
c{1: 1 ✓ (((2 boolean)) <- ((copy)) ((nil literal)))
c{1: 2 ✓ (((3 integer-boolean-pair-address)) <- ((copy)) ((1 literal)))
c{1: 3 ✓ (((4 boolean)) <- ((get)) ((3 integer-boolean-pair-address) (deref)) ((1 offset)))
c{1: 4 ✓ (((5 integer)) <- ((get)) ((3 integer-boolean-pair-address) (deref)) ((0 offset)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((copy)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 boolean)) <- ((copy)) ((nil literal))) nil nil
cn0: checking arg ((nil literal))
cn0: checking oarg ((2 boolean))
maybe-add: ((2 boolean))
cn0: (((3 integer-boolean-pair-address)) <- ((copy)) ((1 literal))) nil nil
cn0: checking arg ((1 literal))
cn0: checking oarg ((3 integer-boolean-pair-address))
maybe-add: ((3 integer-boolean-pair-address))
cn0: (((4 boolean)) <- ((get)) ((3 integer-boolean-pair-address) (deref)) ((1 offset))) nil nil
cn0: field-access 1 in 3integer-boolean-pair-addressderef of type integer-boolean-pair
cn0: checking arg ((3 integer-boolean-pair-address) (deref))
maybe-add: ((3 integer-boolean-pair-address) (deref))
cn0: checking arg ((1 offset))
cn0: checking oarg ((4 boolean))
maybe-add: ((4 boolean))
cn0: (((5 integer)) <- ((get)) ((3 integer-boolean-pair-address) (deref)) ((0 offset))) nil nil
cn0: field-access 0 in 3integer-boolean-pair-addressderef of type integer-boolean-pair
cn0: checking arg ((3 integer-boolean-pair-address) (deref))
maybe-add: ((3 integer-boolean-pair-address) (deref))
cn0: checking arg ((0 offset))
cn0: checking oarg ((5 integer))
maybe-add: ((5 integer))
cn1: (((1 integer)) <- ((copy)) ((34 literal)))
cn1: (((2 boolean)) <- ((copy)) ((nil literal)))
cn1: (((3 integer-boolean-pair-address)) <- ((copy)) ((1 literal)))
cn1: (((4 boolean)) <- ((get)) ((3 integer-boolean-pair-address) (deref)) ((1 offset)))
cn1: (((5 integer)) <- ((get)) ((3 integer-boolean-pair-address) (deref)) ((0 offset)))
schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((34 literal)))
run: main 0: 34 => ((1 integer))
mem: ((1 integer)): 1 <= 34
run: main 1: (((2 boolean)) <- ((copy)) ((nil literal)))
run: main 1: nil => ((2 boolean))
mem: ((2 boolean)): 2 <= nil
run: main 2: (((3 integer-boolean-pair-address)) <- ((copy)) ((1 literal)))
run: main 2: 1 => ((3 integer-boolean-pair-address))
mem: ((3 integer-boolean-pair-address)): 3 <= 1
run: main 3: (((4 boolean)) <- ((get)) ((3 integer-boolean-pair-address) (deref)) ((1 offset)))
mem: ((2 boolean) (raw)) => nil
run: main 3: nil => ((4 boolean))
mem: ((4 boolean)): 4 <= nil
run: main 4: (((5 integer)) <- ((get)) ((3 integer-boolean-pair-address) (deref)) ((0 offset)))
mem: ((1 integer) (raw)) => 34
run: main 4: 34 => ((5 integer))
mem: ((5 integer)): 5 <= 34
schedule: done with routine nil
