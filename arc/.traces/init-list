c{0: 0 (((1 integer)) <- ((init-list)) ((3 literal)) ((4 literal)) ((5 literal))) -- nil
c{1: 0 âœ“ (((1 integer)) <- ((init-list)) ((3 literal)) ((4 literal)) ((5 literal)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((init-list)) ((3 literal)) ((4 literal)) ((5 literal))) nil nil
cn0: checking arg ((3 literal))
cn0: checking arg ((4 literal))
cn0: checking arg ((5 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn1: (((1 integer)) <- ((init-list)) ((3 literal)) ((4 literal)) ((5 literal)))
schedule: main
run: main 0: (((1 integer)) <- ((init-list)) ((3 literal)) ((4 literal)) ((5 literal)))
run: init-list/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-list/main 0: 1000 => ((default-space space-address))
run: init-list/main 1: (((1 list-address)) <- ((new)) ((list literal)))
run: init-list/main 1: 1031 => ((1 list-address))
mem: ((1 list-address)): 1002 <= 1031
run: init-list/main 2: (((2 list-address)) <- ((copy)) ((1 list-address)))
mem: ((1 list-address)) => 1031
run: init-list/main 2: 1031 => ((2 list-address))
mem: ((2 list-address)): 1003 <= 1031
run: init-list/main 3: (((3 integer)) ((4 boolean)) <- ((next-input)))
arg: nil 0 (3 4 5)
run: init-list/main 3: 3 => ((3 integer))
mem: ((3 integer)): 1004 <= 3
run: init-list/main 3: t => ((4 boolean))
mem: ((4 boolean)): 1005 <= t
run: init-list/main 4: (((jump-unless)) ((4 boolean)) ((6 offset)))
mem: ((4 boolean)) => t
run: init-list/main 5: (((5 list-address-address)) <- ((get-address)) ((2 list-address) (deref)) ((1 offset)))
run: init-list/main 5: 1033 => ((5 list-address-address))
mem: ((5 list-address-address)): 1006 <= 1033
run: init-list/main 6: (((5 list-address-address) (deref)) <- ((new)) ((list literal)))
run: init-list/main 6: 1034 => ((5 list-address-address) (deref))
mem: ((5 list-address-address) (deref)): 1033 <= 1034
run: init-list/main 7: (((2 list-address)) <- ((list-next)) ((2 list-address)))
mem: ((2 list-address)) => 1031
run: list-next/init-list/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: list-next/init-list/main 0: 1037 => ((default-space space-address))
run: list-next/init-list/main 1: (((1 list-address)) <- ((next-input)))
arg: nil 0 (1031)
run: list-next/init-list/main 1: 1031 => ((1 list-address))
mem: ((1 list-address)): 1039 <= 1031
run: list-next/init-list/main 2: (((2 list-address)) <- ((get)) ((1 list-address) (deref)) ((1 offset)))
mem: ((1033 list-address) (raw)) => 1034
run: list-next/init-list/main 2: 1034 => ((2 list-address))
mem: ((2 list-address)): 1040 <= 1034
run: list-next/init-list/main 3: (((reply)) ((2 list-address)))
mem: ((2 list-address)) => 1034
run: init-list/main 7: 1034 => ((2 list-address))
mem: ((2 list-address)): 1003 <= 1034
run: init-list/main 8: (((6 tagged-value-address)) <- ((list-value-address)) ((2 list-address)))
mem: ((2 list-address)) => 1034
run: list-value-address/init-list/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: list-value-address/init-list/main 0: 1068 => ((default-space space-address))
run: list-value-address/init-list/main 1: (((1 list-address)) <- ((next-input)))
arg: nil 0 (1034)
run: list-value-address/init-list/main 1: 1034 => ((1 list-address))
mem: ((1 list-address)): 1070 <= 1034
run: list-value-address/init-list/main 2: (((2 tagged-value-address)) <- ((get-address)) ((1 list-address) (deref)) ((0 offset)))
run: list-value-address/init-list/main 2: 1034 => ((2 tagged-value-address))
mem: ((2 tagged-value-address)): 1071 <= 1034
run: list-value-address/init-list/main 3: (((reply)) ((2 tagged-value-address)))
mem: ((2 tagged-value-address)) => 1034
run: init-list/main 8: 1034 => ((6 tagged-value-address))
mem: ((6 tagged-value-address)): 1007 <= 1034
run: init-list/main 9: (((6 tagged-value-address) (deref)) <- ((save-type)) ((3 integer)))
mem: ((3 integer)) => 3
run: init-list/main 9: #(tagged record (integer 3)) => ((6 tagged-value-address) (deref))
mem: ((6 tagged-value-address) (deref)): 1034 <= integer
mem: ((6 tagged-value-address) (deref)): 1035 <= 3
run: init-list/main 10: (((jump)) ((-8 offset)))
run: init-list/main 3: (((3 integer)) ((4 boolean)) <- ((next-input)))
arg: nil 1 (3 4 5)
run: init-list/main 3: 4 => ((3 integer))
mem: ((3 integer)): 1004 <= 4
run: init-list/main 3: t => ((4 boolean))
mem: ((4 boolean)): 1005 <= t
run: init-list/main 4: (((jump-unless)) ((4 boolean)) ((6 offset)))
mem: ((4 boolean)) => t
run: init-list/main 5: (((5 list-address-address)) <- ((get-address)) ((2 list-address) (deref)) ((1 offset)))
run: init-list/main 5: 1036 => ((5 list-address-address))
mem: ((5 list-address-address)): 1006 <= 1036
run: init-list/main 6: (((5 list-address-address) (deref)) <- ((new)) ((list literal)))
run: init-list/main 6: 1099 => ((5 list-address-address) (deref))
mem: ((5 list-address-address) (deref)): 1036 <= 1099
run: init-list/main 7: (((2 list-address)) <- ((list-next)) ((2 list-address)))
mem: ((2 list-address)) => 1034
run: list-next/init-list/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: list-next/init-list/main 0: 1102 => ((default-space space-address))
run: list-next/init-list/main 1: (((1 list-address)) <- ((next-input)))
arg: nil 0 (1034)
run: list-next/init-list/main 1: 1034 => ((1 list-address))
mem: ((1 list-address)): 1104 <= 1034
run: list-next/init-list/main 2: (((2 list-address)) <- ((get)) ((1 list-address) (deref)) ((1 offset)))
mem: ((1036 list-address) (raw)) => 1099
run: list-next/init-list/main 2: 1099 => ((2 list-address))
mem: ((2 list-address)): 1105 <= 1099
run: list-next/init-list/main 3: (((reply)) ((2 list-address)))
mem: ((2 list-address)) => 1099
run: init-list/main 7: 1099 => ((2 list-address))
mem: ((2 list-address)): 1003 <= 1099
run: init-list/main 8: (((6 tagged-value-address)) <- ((list-value-address)) ((2 list-address)))
mem: ((2 list-address)) => 1099
run: list-value-address/init-list/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: list-value-address/init-list/main 0: 1133 => ((default-space space-address))
run: list-value-address/init-list/main 1: (((1 list-address)) <- ((next-input)))
arg: nil 0 (1099)
run: list-value-address/init-list/main 1: 1099 => ((1 list-address))
mem: ((1 list-address)): 1135 <= 1099
run: list-value-address/init-list/main 2: (((2 tagged-value-address)) <- ((get-address)) ((1 list-address) (deref)) ((0 offset)))
run: list-value-address/init-list/main 2: 1099 => ((2 tagged-value-address))
mem: ((2 tagged-value-address)): 1136 <= 1099
run: list-value-address/init-list/main 3: (((reply)) ((2 tagged-value-address)))
mem: ((2 tagged-value-address)) => 1099
run: init-list/main 8: 1099 => ((6 tagged-value-address))
mem: ((6 tagged-value-address)): 1007 <= 1099
run: init-list/main 9: (((6 tagged-value-address) (deref)) <- ((save-type)) ((3 integer)))
mem: ((3 integer)) => 4
run: init-list/main 9: #(tagged record (integer 4)) => ((6 tagged-value-address) (deref))
mem: ((6 tagged-value-address) (deref)): 1099 <= integer
mem: ((6 tagged-value-address) (deref)): 1100 <= 4
run: init-list/main 10: (((jump)) ((-8 offset)))
run: init-list/main 3: (((3 integer)) ((4 boolean)) <- ((next-input)))
arg: nil 2 (3 4 5)
run: init-list/main 3: 5 => ((3 integer))
mem: ((3 integer)): 1004 <= 5
run: init-list/main 3: t => ((4 boolean))
mem: ((4 boolean)): 1005 <= t
run: init-list/main 4: (((jump-unless)) ((4 boolean)) ((6 offset)))
mem: ((4 boolean)) => t
run: init-list/main 5: (((5 list-address-address)) <- ((get-address)) ((2 list-address) (deref)) ((1 offset)))
run: init-list/main 5: 1101 => ((5 list-address-address))
mem: ((5 list-address-address)): 1006 <= 1101
run: init-list/main 6: (((5 list-address-address) (deref)) <- ((new)) ((list literal)))
run: init-list/main 6: 1164 => ((5 list-address-address) (deref))
mem: ((5 list-address-address) (deref)): 1101 <= 1164
run: init-list/main 7: (((2 list-address)) <- ((list-next)) ((2 list-address)))
mem: ((2 list-address)) => 1099
run: list-next/init-list/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: list-next/init-list/main 0: 1167 => ((default-space space-address))
run: list-next/init-list/main 1: (((1 list-address)) <- ((next-input)))
arg: nil 0 (1099)
run: list-next/init-list/main 1: 1099 => ((1 list-address))
mem: ((1 list-address)): 1169 <= 1099
run: list-next/init-list/main 2: (((2 list-address)) <- ((get)) ((1 list-address) (deref)) ((1 offset)))
mem: ((1101 list-address) (raw)) => 1164
run: list-next/init-list/main 2: 1164 => ((2 list-address))
mem: ((2 list-address)): 1170 <= 1164
run: list-next/init-list/main 3: (((reply)) ((2 list-address)))
mem: ((2 list-address)) => 1164
run: init-list/main 7: 1164 => ((2 list-address))
mem: ((2 list-address)): 1003 <= 1164
run: init-list/main 8: (((6 tagged-value-address)) <- ((list-value-address)) ((2 list-address)))
mem: ((2 list-address)) => 1164
run: list-value-address/init-list/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: list-value-address/init-list/main 0: 1198 => ((default-space space-address))
run: list-value-address/init-list/main 1: (((1 list-address)) <- ((next-input)))
arg: nil 0 (1164)
run: list-value-address/init-list/main 1: 1164 => ((1 list-address))
mem: ((1 list-address)): 1200 <= 1164
run: list-value-address/init-list/main 2: (((2 tagged-value-address)) <- ((get-address)) ((1 list-address) (deref)) ((0 offset)))
run: list-value-address/init-list/main 2: 1164 => ((2 tagged-value-address))
mem: ((2 tagged-value-address)): 1201 <= 1164
run: list-value-address/init-list/main 3: (((reply)) ((2 tagged-value-address)))
mem: ((2 tagged-value-address)) => 1164
run: init-list/main 8: 1164 => ((6 tagged-value-address))
mem: ((6 tagged-value-address)): 1007 <= 1164
run: init-list/main 9: (((6 tagged-value-address) (deref)) <- ((save-type)) ((3 integer)))
mem: ((3 integer)) => 5
run: init-list/main 9: #(tagged record (integer 5)) => ((6 tagged-value-address) (deref))
mem: ((6 tagged-value-address) (deref)): 1164 <= integer
mem: ((6 tagged-value-address) (deref)): 1165 <= 5
run: init-list/main 10: (((jump)) ((-8 offset)))
run: init-list/main 3: (((3 integer)) ((4 boolean)) <- ((next-input)))
arg: nil 3 (3 4 5)
run: init-list/main 3: nil => ((3 integer))
mem: ((3 integer)): 1004 <= nil
run: init-list/main 3: nil => ((4 boolean))
mem: ((4 boolean)): 1005 <= nil
run: init-list/main 4: (((jump-unless)) ((4 boolean)) ((6 offset)))
mem: ((4 boolean)) => nil
run: init-list/main 11: (((1 list-address)) <- ((list-next)) ((1 list-address)))
mem: ((1 list-address)) => 1031
run: list-next/init-list/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: list-next/init-list/main 0: 1229 => ((default-space space-address))
run: list-next/init-list/main 1: (((1 list-address)) <- ((next-input)))
arg: nil 0 (1031)
run: list-next/init-list/main 1: 1031 => ((1 list-address))
mem: ((1 list-address)): 1231 <= 1031
run: list-next/init-list/main 2: (((2 list-address)) <- ((get)) ((1 list-address) (deref)) ((1 offset)))
mem: ((1033 list-address) (raw)) => 1034
run: list-next/init-list/main 2: 1034 => ((2 list-address))
mem: ((2 list-address)): 1232 <= 1034
run: list-next/init-list/main 3: (((reply)) ((2 list-address)))
mem: ((2 list-address)) => 1034
run: init-list/main 11: 1034 => ((1 list-address))
mem: ((1 list-address)): 1002 <= 1034
run: init-list/main 12: (((reply)) ((1 list-address)))
mem: ((1 list-address)) => 1034
run: main 0: 1034 => ((1 integer))
mem: ((1 integer)): 1 <= 1034
schedule: done with routine nil
