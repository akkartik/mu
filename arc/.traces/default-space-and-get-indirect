c{0: 0 (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal))) -- nil
c{0: 1 (((1 integer-boolean-pair-address)) <- ((new)) ((integer-boolean-pair literal))) -- nil
c{0: 2 (((2 integer-address)) <- ((get-address)) ((1 integer-boolean-pair-address) (deref)) ((0 offset))) -- nil
c{0: 3 (((2 integer-address) (deref)) <- ((copy)) ((34 literal))) -- nil
c{0: 4 (((3 integer) (raw)) <- ((get)) ((1 integer-boolean-pair-address) (deref)) ((0 offset))) -- nil
c{1: 0 ✓ (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal)))
c{1: 1 ✓ (((1 integer-boolean-pair-address)) <- ((new)) ((integer-boolean-pair literal)))
c{1: 2 ✓ (((2 integer-address)) <- ((get-address)) ((1 integer-boolean-pair-address) (deref)) ((0 offset)))
c{1: 3 ✓ (((2 integer-address) (deref)) <- ((copy)) ((34 literal)))
c{1: 4 ✓ (((3 integer) (raw)) <- ((get)) ((1 integer-boolean-pair-address) (deref)) ((0 offset)))
cn0: convert-names in main
cn0: (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal))) nil nil
cn0: checking arg ((space literal))
cn0: checking arg ((5 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((1 integer-boolean-pair-address)) <- ((new)) ((integer-boolean-pair literal))) nil nil
cn0: checking arg ((integer-boolean-pair literal))
cn0: checking oarg ((1 integer-boolean-pair-address))
maybe-add: ((1 integer-boolean-pair-address))
cn0: (((2 integer-address)) <- ((get-address)) ((1 integer-boolean-pair-address) (deref)) ((0 offset))) nil nil
cn0: field-access 0 in 1integer-boolean-pair-addressderef of type integer-boolean-pair
cn0: checking arg ((1 integer-boolean-pair-address) (deref))
maybe-add: ((1 integer-boolean-pair-address) (deref))
cn0: checking arg ((0 offset))
cn0: checking oarg ((2 integer-address))
maybe-add: ((2 integer-address))
cn0: (((2 integer-address) (deref)) <- ((copy)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: checking oarg ((2 integer-address) (deref))
maybe-add: ((2 integer-address) (deref))
cn0: (((3 integer) (raw)) <- ((get)) ((1 integer-boolean-pair-address) (deref)) ((0 offset))) nil nil
cn0: field-access 0 in 1integer-boolean-pair-addressderef of type integer-boolean-pair
cn0: checking arg ((1 integer-boolean-pair-address) (deref))
maybe-add: ((1 integer-boolean-pair-address) (deref))
cn0: checking arg ((0 offset))
cn0: checking oarg ((3 integer) (raw))
maybe-add: ((3 integer) (raw))
cn1: (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal)))
cn1: (((1 integer-boolean-pair-address)) <- ((new)) ((integer-boolean-pair literal)))
cn1: (((2 integer-address)) <- ((get-address)) ((1 integer-boolean-pair-address) (deref)) ((0 offset)))
cn1: (((2 integer-address) (deref)) <- ((copy)) ((34 literal)))
cn1: (((3 integer) (raw)) <- ((get)) ((1 integer-boolean-pair-address) (deref)) ((0 offset)))
schedule: main
run: main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((5 literal)))
run: main 0: 1000 => ((default-space space-address))
run: main 1: (((1 integer-boolean-pair-address)) <- ((new)) ((integer-boolean-pair literal)))
run: main 1: 1006 => ((1 integer-boolean-pair-address))
mem: ((1 integer-boolean-pair-address)): 1002 <= 1006
run: main 2: (((2 integer-address)) <- ((get-address)) ((1 integer-boolean-pair-address) (deref)) ((0 offset)))
run: main 2: 1006 => ((2 integer-address))
mem: ((2 integer-address)): 1003 <= 1006
run: main 3: (((2 integer-address) (deref)) <- ((copy)) ((34 literal)))
run: main 3: 34 => ((2 integer-address) (deref))
mem: ((2 integer-address) (deref)): 1006 <= 34
run: main 4: (((3 integer) (raw)) <- ((get)) ((1 integer-boolean-pair-address) (deref)) ((0 offset)))
mem: ((1006 integer) (raw)) => 34
run: main 4: 34 => ((3 integer) (raw))
mem: ((3 integer) (raw)): 3 <= 34
schedule: done with routine nil
