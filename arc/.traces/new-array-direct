c{0: 0 (((1 integer)) <- ((copy)) ((5 literal))) -- nil
c{0: 1 (((2 type-array-address)) <- ((new)) ((type-array literal)) ((1 integer))) -- nil
c{1: 0 âœ“ (((1 integer)) <- ((copy)) ((5 literal)))
c{1: 1 âœ“ (((2 type-array-address)) <- ((new)) ((type-array literal)) ((1 integer)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((copy)) ((5 literal))) nil nil
cn0: checking arg ((5 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 type-array-address)) <- ((new)) ((type-array literal)) ((1 integer))) nil nil
cn0: checking arg ((type-array literal))
cn0: checking arg ((1 integer))
maybe-add: ((1 integer))
cn0: checking oarg ((2 type-array-address))
maybe-add: ((2 type-array-address))
cn1: (((1 integer)) <- ((copy)) ((5 literal)))
cn1: (((2 type-array-address)) <- ((new)) ((type-array literal)) ((1 integer)))
schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((5 literal)))
run: main 0: 5 => ((1 integer))
mem: ((1 integer)): 1 <= 5
run: main 1: (((2 type-array-address)) <- ((new)) ((type-array literal)) ((1 integer)))
mem: ((1 integer)) => 5
run: main 1: 1000 => ((2 type-array-address))
mem: ((2 type-array-address)): 2 <= 1000
schedule: done with routine nil
