c{0: 0 (((1 integer)) <- ((copy)) ((2 literal))) -- nil
c{0: 1 (((2 integer)) <- ((copy)) ((23 literal))) -- nil
c{0: 2 (((3 integer)) <- ((copy)) ((24 literal))) -- nil
c{0: 3 (((4 integer)) <- ((index)) ((1 integer-array)) ((2 literal))) -- nil
c{1: 0 ✓ (((1 integer)) <- ((copy)) ((2 literal)))
c{1: 1 ✓ (((2 integer)) <- ((copy)) ((23 literal)))
c{1: 2 ✓ (((3 integer)) <- ((copy)) ((24 literal)))
c{1: 3 ✓ (((4 integer)) <- ((index)) ((1 integer-array)) ((2 literal)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((copy)) ((2 literal))) nil nil
cn0: checking arg ((2 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 integer)) <- ((copy)) ((23 literal))) nil nil
cn0: checking arg ((23 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((3 integer)) <- ((copy)) ((24 literal))) nil nil
cn0: checking arg ((24 literal))
cn0: checking oarg ((3 integer))
maybe-add: ((3 integer))
cn0: (((4 integer)) <- ((index)) ((1 integer-array)) ((2 literal))) nil nil
cn0: checking arg ((1 integer-array))
maybe-add: ((1 integer-array))
cn0: checking arg ((2 literal))
cn0: checking oarg ((4 integer))
maybe-add: ((4 integer))
cn1: (((1 integer)) <- ((copy)) ((2 literal)))
cn1: (((2 integer)) <- ((copy)) ((23 literal)))
cn1: (((3 integer)) <- ((copy)) ((24 literal)))
cn1: (((4 integer)) <- ((index)) ((1 integer-array)) ((2 literal)))
schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((2 literal)))
run: main 0: 2 => ((1 integer))
mem: ((1 integer)): 1 <= 2
run: main 1: (((2 integer)) <- ((copy)) ((23 literal)))
run: main 1: 23 => ((2 integer))
mem: ((2 integer)): 2 <= 23
run: main 2: (((3 integer)) <- ((copy)) ((24 literal)))
run: main 2: 24 => ((3 integer))
mem: ((3 integer)): 3 <= 24
run: main 3: (((4 integer)) <- ((index)) ((1 integer-array)) ((2 literal)))
array-len: ((1 integer-array))
mem: ((1 integer)) => 2
-: die: 2 is out of bounds of array 1integer-array
schedule: done with dead routine main
