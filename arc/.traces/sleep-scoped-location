c{0: 0 (((10 integer)) <- ((copy)) ((5 literal))) -- nil
c{0: 1 (((default-space space-address)) <- ((copy)) ((10 literal))) -- nil
c{0: 2 (((1 integer)) <- ((copy)) ((23 literal))) -- nil
c{0: 3 (((sleep)) ((until-location-changes literal)) ((1 integer))) -- nil
c{0: 4 (((2 integer)) <- ((add)) ((1 integer)) ((1 literal))) -- nil
c{1: 0 ✓ (((10 integer)) <- ((copy)) ((5 literal)))
c{1: 1 ✓ (((default-space space-address)) <- ((copy)) ((10 literal)))
c{1: 2 ✓ (((1 integer)) <- ((copy)) ((23 literal)))
c{1: 3 ✓ (((sleep)) ((until-location-changes literal)) ((1 integer)))
c{1: 4 ✓ (((2 integer)) <- ((add)) ((1 integer)) ((1 literal)))
c{0: 0 (((sleep)) ((for-some-cycles literal)) ((30 literal))) -- nil
c{0: 1 (((12 integer)) <- ((copy)) ((3 literal))) -- nil
c{1: 0 ✓ (((sleep)) ((for-some-cycles literal)) ((30 literal)))
c{1: 1 ✓ (((12 integer)) <- ((copy)) ((3 literal)))
cn0: convert-names in f1
cn0: (((10 integer)) <- ((copy)) ((5 literal))) nil nil
cn0: checking arg ((5 literal))
cn0: checking oarg ((10 integer))
maybe-add: ((10 integer))
cn0: (((default-space space-address)) <- ((copy)) ((10 literal))) nil nil
cn0: checking arg ((10 literal))
cn0: checking oarg ((default-space space-address))
maybe-add: ((default-space space-address))
cn0: (((1 integer)) <- ((copy)) ((23 literal))) nil nil
cn0: checking arg ((23 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((sleep)) ((until-location-changes literal)) ((1 integer))) nil nil
cn0: checking arg ((until-location-changes literal))
cn0: checking arg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 integer)) <- ((add)) ((1 integer)) ((1 literal))) nil nil
cn0: checking arg ((1 integer))
maybe-add: ((1 integer))
cn0: checking arg ((1 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: convert-names in f2
cn0: (((sleep)) ((for-some-cycles literal)) ((30 literal))) nil nil
cn0: checking arg ((for-some-cycles literal))
cn0: checking arg ((30 literal))
cn0: (((12 integer)) <- ((copy)) ((3 literal))) nil nil
cn0: checking arg ((3 literal))
cn0: checking oarg ((12 integer))
maybe-add: ((12 integer))
cn1: (((10 integer)) <- ((copy)) ((5 literal)))
cn1: (((default-space space-address)) <- ((copy)) ((10 literal)))
cn1: (((1 integer)) <- ((copy)) ((23 literal)))
cn1: (((sleep)) ((until-location-changes literal)) ((1 integer)))
cn1: (((2 integer)) <- ((add)) ((1 integer)) ((1 literal)))
cn1: (((sleep)) ((for-some-cycles literal)) ((30 literal)))
cn1: (((12 integer)) <- ((copy)) ((3 literal)))
schedule: f1
run: f1 0: (((10 integer)) <- ((copy)) ((5 literal)))
run: f1 0: 5 => ((10 integer))
mem: ((10 integer)): 10 <= 5
run: f1 1: (((default-space space-address)) <- ((copy)) ((10 literal)))
run: f1 1: 10 => ((default-space space-address))
run: f1 2: (((1 integer)) <- ((copy)) ((23 literal)))
run: f1 2: 23 => ((1 integer))
mem: ((1 integer)): 12 <= 23
run: f1 3: (((sleep)) ((until-location-changes literal)) ((1 integer)))
mem: ((1 integer)) => 23
schedule: pushing f1 to sleep queue
schedule: f2
run: f2 0: (((sleep)) ((for-some-cycles literal)) ((30 literal)))
run: f2 0: sleeping until 35
schedule: pushing f2 to sleep queue
schedule: skipping to cycle 36
schedule: waking up f2
schedule: f2
run: f2 1: (((12 integer)) <- ((copy)) ((3 literal)))
run: f2 1: 3 => ((12 integer))
mem: ((12 integer)): 12 <= 3
schedule: done with routine nil
schedule: waking up f1
schedule: f1
run: f1 4: (((2 integer)) <- ((add)) ((1 integer)) ((1 literal)))
mem: ((1 integer)) => 3
run: f1 4: 4 => ((2 integer))
mem: ((2 integer)): 13 <= 4
schedule: done with routine nil
