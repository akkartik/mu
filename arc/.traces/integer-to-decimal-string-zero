c{0: 0 (((1 string-address) (raw)) <- ((integer-to-decimal-string)) ((0 literal))) -- nil
c{1: 0 âœ“ (((1 string-address) (raw)) <- ((integer-to-decimal-string)) ((0 literal)))
cn0: convert-names in main
cn0: (((1 string-address) (raw)) <- ((integer-to-decimal-string)) ((0 literal))) nil nil
cn0: checking arg ((0 literal))
cn0: checking oarg ((1 string-address) (raw))
maybe-add: ((1 string-address) (raw))
cn1: (((1 string-address) (raw)) <- ((integer-to-decimal-string)) ((0 literal)))
schedule: main
run: main 0: (((1 string-address) (raw)) <- ((integer-to-decimal-string)) ((0 literal)))
run: integer-to-decimal-string/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: integer-to-decimal-string/main 0: 1000 => ((default-space space-address))
run: integer-to-decimal-string/main 1: (((1 integer)) <- ((next-input)))
arg: nil 0 (0)
run: integer-to-decimal-string/main 1: 0 => ((1 integer))
mem: ((1 integer)): 1002 <= 0
run: integer-to-decimal-string/main 2: (((2 boolean)) <- ((equal)) ((1 integer)) ((0 literal)))
mem: ((1 integer)) => 0
run: integer-to-decimal-string/main 2: t => ((2 boolean))
mem: ((2 boolean)): 1003 <= t
run: integer-to-decimal-string/main 3: (((jump-unless)) ((2 boolean)) ((2 offset)))
mem: ((2 boolean)) => t
run: integer-to-decimal-string/main 4: (((3 string-address)) <- ((new)) 0)
run: integer-to-decimal-string/main 4: 1031 => ((3 string-address))
mem: ((3 string-address)): 1004 <= 1031
run: integer-to-decimal-string/main 5: (((reply)) ((3 string-address)))
mem: ((3 string-address)) => 1031
run: main 0: 1031 => ((1 string-address) (raw))
mem: ((1 string-address) (raw)): 1 <= 1031
schedule: done with routine nil
