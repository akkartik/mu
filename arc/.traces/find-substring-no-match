c{0: 0 (((1 string-address)) <- ((new)) abc) -- nil
c{0: 1 (((2 string-address)) <- ((new)) bd) -- nil
c{0: 2 (((3 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal))) -- nil
c{1: 0 ✓ (((1 string-address)) <- ((new)) abc)
c{1: 1 ✓ (((2 string-address)) <- ((new)) bd)
c{1: 2 ✓ (((3 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal)))
cn0: convert-names in main
cn0: (((1 string-address)) <- ((new)) abc) nil nil
cn0: checking arg abc
cn0: checking oarg ((1 string-address))
maybe-add: ((1 string-address))
cn0: (((2 string-address)) <- ((new)) bd) nil nil
cn0: checking arg bd
cn0: checking oarg ((2 string-address))
maybe-add: ((2 string-address))
cn0: (((3 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal))) nil nil
cn0: checking arg ((1 string-address))
maybe-add: ((1 string-address))
cn0: checking arg ((2 string-address))
maybe-add: ((2 string-address))
cn0: checking arg ((0 literal))
cn0: checking oarg ((3 integer))
maybe-add: ((3 integer))
cn1: (((1 string-address)) <- ((new)) abc)
cn1: (((2 string-address)) <- ((new)) bd)
cn1: (((3 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal)))
schedule: main
run: main 0: (((1 string-address)) <- ((new)) abc)
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 string-address)) <- ((new)) bd)
run: main 1: 1004 => ((2 string-address))
mem: ((2 string-address)): 2 <= 1004
run: main 2: (((3 integer)) <- ((find-substring)) ((1 string-address)) ((2 string-address)) ((0 literal)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1004
run: find-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-substring/main 0: 1007 => ((default-space space-address))
run: find-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1004 0)
run: find-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1009 <= 1000
run: find-substring/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1004 0)
run: find-substring/main 2: 1004 => ((2 string-address))
mem: ((2 string-address)): 1010 <= 1004
run: find-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 1004 0)
run: find-substring/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1011 <= 0
run: find-substring/main 4: (((4 character)) <- ((index)) ((2 string-address) (deref)) ((0 literal)))
array-len: ((1004 string) (raw))
mem: ((1004 integer) (raw)) => 2
mem: ((1005 byte) (raw)) => b
run: find-substring/main 4: #\b => ((4 character))
mem: ((4 character)): 1012 <= #\b
run: find-substring/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 3
run: find-substring/main 5: 3 => ((5 integer))
mem: ((5 integer)): 1013 <= 3
run: find-substring/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 3
run: find-substring/main 6: nil => ((6 boolean))
mem: ((6 boolean)): 1014 <= nil
run: find-substring/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: find-substring/main 8: (((7 boolean)) <- ((match-at)) ((1 string-address)) ((2 string-address)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1004
mem: ((3 integer)) => 0
run: match-at/find-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/find-substring/main 0: 1038 => ((default-space space-address))
run: match-at/find-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1004 0)
run: match-at/find-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1040 <= 1000
run: match-at/find-substring/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1004 0)
run: match-at/find-substring/main 2: 1004 => ((2 string-address))
mem: ((2 string-address)): 1041 <= 1004
run: match-at/find-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 1004 0)
run: match-at/find-substring/main 3: 0 => ((3 integer))
mem: ((3 integer)): 1042 <= 0
run: match-at/find-substring/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1004 integer) (raw)) => 2
run: match-at/find-substring/main 4: 2 => ((4 integer))
mem: ((4 integer)): 1043 <= 2
run: match-at/find-substring/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 3
run: match-at/find-substring/main 5: 3 => ((5 integer))
mem: ((5 integer)): 1044 <= 3
run: match-at/find-substring/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 3
mem: ((4 integer)) => 2
run: match-at/find-substring/main 6: 1 => ((5 integer))
mem: ((5 integer)): 1044 <= 1
run: match-at/find-substring/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 0
mem: ((5 integer)) => 1
run: match-at/find-substring/main 7: t => ((6 boolean))
mem: ((6 boolean)): 1045 <= t
run: match-at/find-substring/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: match-at/find-substring/main 10: (((7 integer)) <- ((copy)) ((0 literal)))
run: match-at/find-substring/main 10: 0 => ((7 integer))
mem: ((7 integer)): 1046 <= 0
run: match-at/find-substring/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 2
run: match-at/find-substring/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1047 <= nil
run: match-at/find-substring/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 3
mem: ((1001 byte) (raw)) => a
run: match-at/find-substring/main 13: #\a => ((9 character))
mem: ((9 character)): 1048 <= #\a
run: match-at/find-substring/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1004 string) (raw))
mem: ((1004 integer) (raw)) => 2
mem: ((1005 byte) (raw)) => b
run: match-at/find-substring/main 14: #\b => ((10 character))
mem: ((10 character)): 1049 <= #\b
run: match-at/find-substring/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => a
mem: ((10 character)) => b
run: match-at/find-substring/main 15: nil => ((11 boolean))
mem: ((11 boolean)): 1050 <= nil
run: match-at/find-substring/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => nil
run: match-at/find-substring/main 17: (((reply)) ((nil literal)))
run: find-substring/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1015 <= nil
run: find-substring/main 9: (((jump-if)) ((7 boolean)) ((3 offset)))
mem: ((7 boolean)) => nil
run: find-substring/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 0
run: find-substring/main 10: 1 => ((3 integer))
mem: ((3 integer)): 1011 <= 1
run: find-substring/main 11: (((3 integer)) <- ((find-next)) ((1 string-address)) ((4 character)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((4 character)) => b
mem: ((3 integer)) => 1
run: find-next/find-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/find-substring/main 0: 1069 => ((default-space space-address))
run: find-next/find-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\b 1)
run: find-next/find-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1071 <= 1000
run: find-next/find-substring/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\b 1)
run: find-next/find-substring/main 2: #\b => ((2 character))
mem: ((2 character)): 1072 <= #\b
run: find-next/find-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\b 1)
run: find-next/find-substring/main 3: 1 => ((3 integer))
mem: ((3 integer)): 1073 <= 1
run: find-next/find-substring/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 3
run: find-next/find-substring/main 4: 3 => ((4 integer))
mem: ((4 integer)): 1074 <= 3
run: find-next/find-substring/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 1
mem: ((4 integer)) => 3
run: find-next/find-substring/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1075 <= nil
run: find-next/find-substring/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/find-substring/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 3
mem: ((1002 byte) (raw)) => b
run: find-next/find-substring/main 7: #\b => ((6 byte))
mem: ((6 byte)): 1076 <= #\b
run: find-next/find-substring/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => b
mem: ((2 character)) => b
run: find-next/find-substring/main 8: t => ((7 boolean))
mem: ((7 boolean)): 1077 <= t
run: find-next/find-substring/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => t
run: find-next/find-substring/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 1
run: find-substring/main 11: 1 => ((3 integer))
mem: ((3 integer)): 1011 <= 1
run: find-substring/main 12: (((jump)) ((-7 offset)))
run: find-substring/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 1
mem: ((5 integer)) => 3
run: find-substring/main 6: nil => ((6 boolean))
mem: ((6 boolean)): 1014 <= nil
run: find-substring/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => nil
run: find-substring/main 8: (((7 boolean)) <- ((match-at)) ((1 string-address)) ((2 string-address)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1004
mem: ((3 integer)) => 1
run: match-at/find-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: match-at/find-substring/main 0: 1100 => ((default-space space-address))
run: match-at/find-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1004 1)
run: match-at/find-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1102 <= 1000
run: match-at/find-substring/main 2: (((2 string-address)) <- ((next-input)))
arg: nil 1 (1000 1004 1)
run: match-at/find-substring/main 2: 1004 => ((2 string-address))
mem: ((2 string-address)): 1103 <= 1004
run: match-at/find-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 1004 1)
run: match-at/find-substring/main 3: 1 => ((3 integer))
mem: ((3 integer)): 1104 <= 1
run: match-at/find-substring/main 4: (((4 integer)) <- ((length)) ((2 string-address) (deref)))
array-len: ((2 string-address) (deref))
mem: ((1004 integer) (raw)) => 2
run: match-at/find-substring/main 4: 2 => ((4 integer))
mem: ((4 integer)): 1105 <= 2
run: match-at/find-substring/main 5: (((5 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 3
run: match-at/find-substring/main 5: 3 => ((5 integer))
mem: ((5 integer)): 1106 <= 3
run: match-at/find-substring/main 6: (((5 integer)) <- ((subtract)) ((5 integer)) ((4 integer)))
mem: ((5 integer)) => 3
mem: ((4 integer)) => 2
run: match-at/find-substring/main 6: 1 => ((5 integer))
mem: ((5 integer)): 1106 <= 1
run: match-at/find-substring/main 7: (((6 boolean)) <- ((lesser-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 1
mem: ((5 integer)) => 1
run: match-at/find-substring/main 7: t => ((6 boolean))
mem: ((6 boolean)): 1107 <= t
run: match-at/find-substring/main 8: (((jump-if)) ((6 boolean)) ((1 offset)))
mem: ((6 boolean)) => t
run: match-at/find-substring/main 10: (((7 integer)) <- ((copy)) ((0 literal)))
run: match-at/find-substring/main 10: 0 => ((7 integer))
mem: ((7 integer)): 1108 <= 0
run: match-at/find-substring/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 0
mem: ((4 integer)) => 2
run: match-at/find-substring/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1109 <= nil
run: match-at/find-substring/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 1
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 3
mem: ((1002 byte) (raw)) => b
run: match-at/find-substring/main 13: #\b => ((9 character))
mem: ((9 character)): 1110 <= #\b
run: match-at/find-substring/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1004 string) (raw))
mem: ((1004 integer) (raw)) => 2
mem: ((1005 byte) (raw)) => b
run: match-at/find-substring/main 14: #\b => ((10 character))
mem: ((10 character)): 1111 <= #\b
run: match-at/find-substring/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => b
mem: ((10 character)) => b
run: match-at/find-substring/main 15: t => ((11 boolean))
mem: ((11 boolean)): 1112 <= t
run: match-at/find-substring/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => t
run: match-at/find-substring/main 18: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 1
run: match-at/find-substring/main 18: 2 => ((3 integer))
mem: ((3 integer)): 1104 <= 2
run: match-at/find-substring/main 19: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: match-at/find-substring/main 19: 1 => ((7 integer))
mem: ((7 integer)): 1108 <= 1
run: match-at/find-substring/main 20: (((jump)) ((-10 offset)))
run: match-at/find-substring/main 11: (((8 boolean)) <- ((greater-or-equal)) ((7 integer)) ((4 integer)))
mem: ((7 integer)) => 1
mem: ((4 integer)) => 2
run: match-at/find-substring/main 11: nil => ((8 boolean))
mem: ((8 boolean)): 1109 <= nil
run: match-at/find-substring/main 12: (((jump-if)) ((8 boolean)) ((8 offset)))
mem: ((8 boolean)) => nil
run: match-at/find-substring/main 13: (((9 character)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 3
mem: ((1003 byte) (raw)) => c
run: match-at/find-substring/main 13: #\c => ((9 character))
mem: ((9 character)): 1110 <= #\c
run: match-at/find-substring/main 14: (((10 character)) <- ((index)) ((2 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((1004 string) (raw))
mem: ((1004 integer) (raw)) => 2
mem: ((1006 byte) (raw)) => d
run: match-at/find-substring/main 14: #\d => ((10 character))
mem: ((10 character)): 1111 <= #\d
run: match-at/find-substring/main 15: (((11 boolean)) <- ((equal)) ((9 character)) ((10 character)))
mem: ((9 character)) => c
mem: ((10 character)) => d
run: match-at/find-substring/main 15: nil => ((11 boolean))
mem: ((11 boolean)): 1112 <= nil
run: match-at/find-substring/main 16: (((jump-if)) ((11 boolean)) ((1 offset)))
mem: ((11 boolean)) => nil
run: match-at/find-substring/main 17: (((reply)) ((nil literal)))
run: find-substring/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1015 <= nil
run: find-substring/main 9: (((jump-if)) ((7 boolean)) ((3 offset)))
mem: ((7 boolean)) => nil
run: find-substring/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 1
run: find-substring/main 10: 2 => ((3 integer))
mem: ((3 integer)): 1011 <= 2
run: find-substring/main 11: (((3 integer)) <- ((find-next)) ((1 string-address)) ((4 character)) ((3 integer)))
mem: ((1 string-address)) => 1000
mem: ((4 character)) => b
mem: ((3 integer)) => 2
run: find-next/find-substring/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: find-next/find-substring/main 0: 1131 => ((default-space space-address))
run: find-next/find-substring/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 #\b 2)
run: find-next/find-substring/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1133 <= 1000
run: find-next/find-substring/main 2: (((2 character)) <- ((next-input)))
arg: nil 1 (1000 #\b 2)
run: find-next/find-substring/main 2: #\b => ((2 character))
mem: ((2 character)): 1134 <= #\b
run: find-next/find-substring/main 3: (((3 integer)) <- ((next-input)))
arg: nil 2 (1000 #\b 2)
run: find-next/find-substring/main 3: 2 => ((3 integer))
mem: ((3 integer)): 1135 <= 2
run: find-next/find-substring/main 4: (((4 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 3
run: find-next/find-substring/main 4: 3 => ((4 integer))
mem: ((4 integer)): 1136 <= 3
run: find-next/find-substring/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 2
mem: ((4 integer)) => 3
run: find-next/find-substring/main 5: nil => ((5 boolean))
mem: ((5 boolean)): 1137 <= nil
run: find-next/find-substring/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => nil
run: find-next/find-substring/main 7: (((6 byte)) <- ((index)) ((1 string-address) (deref)) ((3 integer)))
mem: ((3 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 3
mem: ((1003 byte) (raw)) => c
run: find-next/find-substring/main 7: #\c => ((6 byte))
mem: ((6 byte)): 1138 <= #\c
run: find-next/find-substring/main 8: (((7 boolean)) <- ((equal)) ((6 byte)) ((2 character)))
mem: ((6 byte)) => c
mem: ((2 character)) => b
run: find-next/find-substring/main 8: nil => ((7 boolean))
mem: ((7 boolean)): 1139 <= nil
run: find-next/find-substring/main 9: (((jump-if)) ((7 boolean)) ((2 offset)))
mem: ((7 boolean)) => nil
run: find-next/find-substring/main 10: (((3 integer)) <- ((add)) ((3 integer)) ((1 literal)))
mem: ((3 integer)) => 2
run: find-next/find-substring/main 10: 3 => ((3 integer))
mem: ((3 integer)): 1135 <= 3
run: find-next/find-substring/main 11: (((jump)) ((-7 offset)))
run: find-next/find-substring/main 5: (((5 boolean)) <- ((greater-or-equal)) ((3 integer)) ((4 integer)))
mem: ((3 integer)) => 3
mem: ((4 integer)) => 3
run: find-next/find-substring/main 5: t => ((5 boolean))
mem: ((5 boolean)): 1137 <= t
run: find-next/find-substring/main 6: (((jump-if)) ((5 boolean)) ((5 offset)))
mem: ((5 boolean)) => t
run: find-next/find-substring/main 12: (((reply)) ((3 integer)))
mem: ((3 integer)) => 3
run: find-substring/main 11: 3 => ((3 integer))
mem: ((3 integer)): 1011 <= 3
run: find-substring/main 12: (((jump)) ((-7 offset)))
run: find-substring/main 6: (((6 boolean)) <- ((greater-or-equal)) ((3 integer)) ((5 integer)))
mem: ((3 integer)) => 3
mem: ((5 integer)) => 3
run: find-substring/main 6: t => ((6 boolean))
mem: ((6 boolean)): 1014 <= t
run: find-substring/main 7: (((jump-if)) ((6 boolean)) ((5 offset)))
mem: ((6 boolean)) => t
run: find-substring/main 13: (((reply)) ((3 integer)))
mem: ((3 integer)) => 3
run: main 2: 3 => ((3 integer))
mem: ((3 integer)): 3 <= 3
schedule: done with routine nil
