c{0: 0 (((1 integer)) <- ((copy)) ((34 literal))) -- nil
c{0: 1 (((2 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((1 integer))) -- nil
c{0: 2 (((3 integer)) ((4 boolean)) <- ((maybe-coerce)) ((2 tagged-value-address) (deref)) ((integer literal))) -- nil
c{1: 0 ✓ (((1 integer)) <- ((copy)) ((34 literal)))
c{1: 1 ✓ (((2 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((1 integer)))
c{1: 2 ✓ (((3 integer)) ((4 boolean)) <- ((maybe-coerce)) ((2 tagged-value-address) (deref)) ((integer literal)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((copy)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((1 integer))) nil nil
cn0: checking arg ((integer literal))
cn0: checking arg ((1 integer))
maybe-add: ((1 integer))
cn0: checking oarg ((2 tagged-value-address))
maybe-add: ((2 tagged-value-address))
cn0: (((3 integer)) ((4 boolean)) <- ((maybe-coerce)) ((2 tagged-value-address) (deref)) ((integer literal))) nil nil
cn0: checking arg ((2 tagged-value-address) (deref))
maybe-add: ((2 tagged-value-address) (deref))
cn0: checking arg ((integer literal))
cn0: checking oarg ((3 integer))
maybe-add: ((3 integer))
cn0: checking oarg ((4 boolean))
maybe-add: ((4 boolean))
cn1: (((1 integer)) <- ((copy)) ((34 literal)))
cn1: (((2 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((1 integer)))
cn1: (((3 integer)) ((4 boolean)) <- ((maybe-coerce)) ((2 tagged-value-address) (deref)) ((integer literal)))
schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((34 literal)))
run: main 0: 34 => ((1 integer))
mem: ((1 integer)): 1 <= 34
run: main 1: (((2 tagged-value-address)) <- ((init-tagged-value)) ((integer literal)) ((1 integer)))
mem: ((1 integer)) => 34
run: init-tagged-value/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: init-tagged-value/main 0: 1000 => ((default-space space-address))
run: init-tagged-value/main 1: (((1 type)) <- ((next-input)))
arg: nil 0 (integer 34)
run: init-tagged-value/main 1: integer => ((1 type))
mem: ((1 type)): 1002 <= integer
run: init-tagged-value/main 2: (((2 integer)) <- ((sizeof)) ((1 type)))
mem: ((1 type)) => integer
run: init-tagged-value/main 2: 1 => ((2 integer))
mem: ((2 integer)): 1003 <= 1
run: init-tagged-value/main 3: (((3 boolean)) <- ((equal)) ((2 integer)) ((1 literal)))
mem: ((2 integer)) => 1
run: init-tagged-value/main 3: t => ((3 boolean))
mem: ((3 boolean)): 1004 <= t
run: init-tagged-value/main 4: (((assert)) ((3 boolean)))
mem: ((3 boolean)) => t
run: init-tagged-value/main 5: (((4 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: init-tagged-value/main 5: 1031 => ((4 tagged-value-address))
mem: ((4 tagged-value-address)): 1005 <= 1031
run: init-tagged-value/main 6: (((5 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((0 offset)))
run: init-tagged-value/main 6: 1031 => ((5 location))
mem: ((5 location)): 1006 <= 1031
run: init-tagged-value/main 7: (((5 location) (deref)) <- ((copy)) ((1 type)))
mem: ((1 type)) => integer
run: init-tagged-value/main 7: integer => ((5 location) (deref))
mem: ((5 location) (deref)): 1031 <= integer
run: init-tagged-value/main 8: (((6 location)) <- ((get-address)) ((4 tagged-value-address) (deref)) ((1 offset)))
run: init-tagged-value/main 8: 1032 => ((6 location))
mem: ((6 location)): 1007 <= 1032
run: init-tagged-value/main 9: (((6 location) (deref)) <- ((next-input)))
arg: nil 1 (integer 34)
run: init-tagged-value/main 9: 34 => ((6 location) (deref))
mem: ((6 location) (deref)): 1032 <= 34
run: init-tagged-value/main 10: (((reply)) ((4 tagged-value-address)))
mem: ((4 tagged-value-address)) => 1031
run: main 1: 1031 => ((2 tagged-value-address))
mem: ((2 tagged-value-address)): 2 <= 1031
run: main 2: (((3 integer)) ((4 boolean)) <- ((maybe-coerce)) ((2 tagged-value-address) (deref)) ((integer literal)))
mem: ((2 tagged-value-address) (deref)) => #(tagged record (integer 34 . nil))
run: maybe-coerce/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: maybe-coerce/main 0: 1033 => ((default-space space-address))
run: maybe-coerce/main 1: (((1 tagged-value-address)) <- ((new)) ((tagged-value literal)))
run: maybe-coerce/main 1: 1064 => ((1 tagged-value-address))
mem: ((1 tagged-value-address)): 1035 <= 1064
run: maybe-coerce/main 2: (((1 tagged-value-address) (deref)) <- ((next-input)))
arg: nil 0 (#(tagged record (integer 34 . nil)) integer)
run: maybe-coerce/main 2: #(tagged record (integer 34 . nil)) => ((1 tagged-value-address) (deref))
mem: ((1 tagged-value-address) (deref)): 1064 <= integer
mem: ((1 tagged-value-address) (deref)): 1065 <= 34
run: maybe-coerce/main 3: (((2 type)) <- ((next-input)))
arg: nil 1 (#(tagged record (integer 34 . nil)) integer)
run: maybe-coerce/main 3: integer => ((2 type))
mem: ((2 type)): 1036 <= integer
run: maybe-coerce/main 4: (((3 type)) <- ((get)) ((1 tagged-value-address) (deref)) ((0 offset)))
mem: ((1064 type) (raw)) => integer
run: maybe-coerce/main 4: integer => ((3 type))
mem: ((3 type)): 1037 <= integer
run: maybe-coerce/main 5: (((4 boolean)) <- ((equal)) ((3 type)) ((2 type)))
mem: ((3 type)) => integer
mem: ((2 type)) => integer
run: maybe-coerce/main 5: t => ((4 boolean))
mem: ((4 boolean)): 1038 <= t
run: maybe-coerce/main 6: (((jump-if)) ((4 boolean)) ((1 offset)))
mem: ((4 boolean)) => t
run: maybe-coerce/main 8: (((5 location)) <- ((get)) ((1 tagged-value-address) (deref)) ((1 offset)))
mem: ((1065 location) (raw)) => 34
run: maybe-coerce/main 8: 34 => ((5 location))
mem: ((5 location)): 1039 <= 34
run: maybe-coerce/main 9: (((reply)) ((5 location)) ((4 boolean)))
mem: ((5 location)) => 34
mem: ((4 boolean)) => t
run: main 2: 34 => ((3 integer))
mem: ((3 integer)): 3 <= 34
run: main 2: t => ((4 boolean))
mem: ((4 boolean)): 4 <= t
schedule: done with routine nil
