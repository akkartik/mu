c{0: 0 (((1 string-address)) <- ((new)) hello,) -- nil
c{0: 1 (((2 string-address)) <- ((new))  world!) -- nil
c{0: 2 (((3 string-address)) <- ((strcat)) ((1 string-address)) ((2 string-address))) -- nil
c{1: 0 ✓ (((1 string-address)) <- ((new)) hello,)
c{1: 1 ✓ (((2 string-address)) <- ((new))  world!)
c{1: 2 ✓ (((3 string-address)) <- ((strcat)) ((1 string-address)) ((2 string-address)))
cn0: convert-names in main
cn0: (((1 string-address)) <- ((new)) hello,) nil nil
cn0: checking arg hello,
cn0: checking oarg ((1 string-address))
maybe-add: ((1 string-address))
cn0: (((2 string-address)) <- ((new))  world!) nil nil
cn0: checking arg  world!
cn0: checking oarg ((2 string-address))
maybe-add: ((2 string-address))
cn0: (((3 string-address)) <- ((strcat)) ((1 string-address)) ((2 string-address))) nil nil
cn0: checking arg ((1 string-address))
maybe-add: ((1 string-address))
cn0: checking arg ((2 string-address))
maybe-add: ((2 string-address))
cn0: checking oarg ((3 string-address))
maybe-add: ((3 string-address))
cn1: (((1 string-address)) <- ((new)) hello,)
cn1: (((2 string-address)) <- ((new))  world!)
cn1: (((3 string-address)) <- ((strcat)) ((1 string-address)) ((2 string-address)))
schedule: main
run: main 0: (((1 string-address)) <- ((new)) hello,)
run: main 0: 1000 => ((1 string-address))
mem: ((1 string-address)): 1 <= 1000
run: main 1: (((2 string-address)) <- ((new))  world!)
run: main 1: 1007 => ((2 string-address))
mem: ((2 string-address)): 2 <= 1007
run: main 2: (((3 string-address)) <- ((strcat)) ((1 string-address)) ((2 string-address)))
mem: ((1 string-address)) => 1000
mem: ((2 string-address)) => 1007
run: strcat/main 0: (((default-space space-address)) <- ((new)) ((space literal)) ((30 literal)))
run: strcat/main 0: 1015 => ((default-space space-address))
run: strcat/main 1: (((1 string-address)) <- ((next-input)))
arg: nil 0 (1000 1007)
run: strcat/main 1: 1000 => ((1 string-address))
mem: ((1 string-address)): 1017 <= 1000
run: strcat/main 2: (((2 integer)) <- ((length)) ((1 string-address) (deref)))
array-len: ((1 string-address) (deref))
mem: ((1000 integer) (raw)) => 6
run: strcat/main 2: 6 => ((2 integer))
mem: ((2 integer)): 1018 <= 6
run: strcat/main 3: (((3 string-address)) <- ((next-input)))
arg: nil 1 (1000 1007)
run: strcat/main 3: 1007 => ((3 string-address))
mem: ((3 string-address)): 1019 <= 1007
run: strcat/main 4: (((4 integer)) <- ((length)) ((3 string-address) (deref)))
array-len: ((3 string-address) (deref))
mem: ((1007 integer) (raw)) => 7
run: strcat/main 4: 7 => ((4 integer))
mem: ((4 integer)): 1020 <= 7
run: strcat/main 5: (((5 integer)) <- ((add)) ((2 integer)) ((4 integer)))
mem: ((2 integer)) => 6
mem: ((4 integer)) => 7
run: strcat/main 5: 13 => ((5 integer))
mem: ((5 integer)): 1021 <= 13
run: strcat/main 6: (((6 string-address)) <- ((new)) ((string literal)) ((5 integer)))
mem: ((5 integer)) => 13
run: strcat/main 6: 1046 => ((6 string-address))
mem: ((6 string-address)): 1022 <= 1046
run: strcat/main 7: (((7 integer)) <- ((copy)) ((0 literal)))
run: strcat/main 7: 0 => ((7 integer))
mem: ((7 integer)): 1023 <= 0
run: strcat/main 8: (((8 integer)) <- ((copy)) ((0 literal)))
run: strcat/main 8: 0 => ((8 integer))
mem: ((8 integer)): 1024 <= 0
run: strcat/main 9: (((9 boolean)) <- ((greater-or-equal)) ((8 integer)) ((2 integer)))
mem: ((8 integer)) => 0
mem: ((2 integer)) => 6
run: strcat/main 9: nil => ((9 boolean))
mem: ((9 boolean)): 1025 <= nil
run: strcat/main 10: (((jump-if)) ((9 boolean)) ((6 offset)))
mem: ((9 boolean)) => nil
run: strcat/main 11: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 0
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 11: 1047 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1047
run: strcat/main 12: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 0
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1001 byte) (raw)) => h
run: strcat/main 12: #\h => ((11 byte))
mem: ((11 byte)): 1027 <= #\h
run: strcat/main 13: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => h
run: strcat/main 13: #\h => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1047 <= #\h
run: strcat/main 14: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 0
run: strcat/main 14: 1 => ((8 integer))
mem: ((8 integer)): 1024 <= 1
run: strcat/main 15: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 0
run: strcat/main 15: 1 => ((7 integer))
mem: ((7 integer)): 1023 <= 1
run: strcat/main 16: (((jump)) ((-8 offset)))
run: strcat/main 9: (((9 boolean)) <- ((greater-or-equal)) ((8 integer)) ((2 integer)))
mem: ((8 integer)) => 1
mem: ((2 integer)) => 6
run: strcat/main 9: nil => ((9 boolean))
mem: ((9 boolean)): 1025 <= nil
run: strcat/main 10: (((jump-if)) ((9 boolean)) ((6 offset)))
mem: ((9 boolean)) => nil
run: strcat/main 11: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 1
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 11: 1048 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1048
run: strcat/main 12: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 1
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1002 byte) (raw)) => e
run: strcat/main 12: #\e => ((11 byte))
mem: ((11 byte)): 1027 <= #\e
run: strcat/main 13: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => e
run: strcat/main 13: #\e => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1048 <= #\e
run: strcat/main 14: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 1
run: strcat/main 14: 2 => ((8 integer))
mem: ((8 integer)): 1024 <= 2
run: strcat/main 15: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 1
run: strcat/main 15: 2 => ((7 integer))
mem: ((7 integer)): 1023 <= 2
run: strcat/main 16: (((jump)) ((-8 offset)))
run: strcat/main 9: (((9 boolean)) <- ((greater-or-equal)) ((8 integer)) ((2 integer)))
mem: ((8 integer)) => 2
mem: ((2 integer)) => 6
run: strcat/main 9: nil => ((9 boolean))
mem: ((9 boolean)): 1025 <= nil
run: strcat/main 10: (((jump-if)) ((9 boolean)) ((6 offset)))
mem: ((9 boolean)) => nil
run: strcat/main 11: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 2
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 11: 1049 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1049
run: strcat/main 12: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 2
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1003 byte) (raw)) => l
run: strcat/main 12: #\l => ((11 byte))
mem: ((11 byte)): 1027 <= #\l
run: strcat/main 13: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => l
run: strcat/main 13: #\l => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1049 <= #\l
run: strcat/main 14: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 2
run: strcat/main 14: 3 => ((8 integer))
mem: ((8 integer)): 1024 <= 3
run: strcat/main 15: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 2
run: strcat/main 15: 3 => ((7 integer))
mem: ((7 integer)): 1023 <= 3
run: strcat/main 16: (((jump)) ((-8 offset)))
run: strcat/main 9: (((9 boolean)) <- ((greater-or-equal)) ((8 integer)) ((2 integer)))
mem: ((8 integer)) => 3
mem: ((2 integer)) => 6
run: strcat/main 9: nil => ((9 boolean))
mem: ((9 boolean)): 1025 <= nil
run: strcat/main 10: (((jump-if)) ((9 boolean)) ((6 offset)))
mem: ((9 boolean)) => nil
run: strcat/main 11: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 3
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 11: 1050 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1050
run: strcat/main 12: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 3
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1004 byte) (raw)) => l
run: strcat/main 12: #\l => ((11 byte))
mem: ((11 byte)): 1027 <= #\l
run: strcat/main 13: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => l
run: strcat/main 13: #\l => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1050 <= #\l
run: strcat/main 14: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 3
run: strcat/main 14: 4 => ((8 integer))
mem: ((8 integer)): 1024 <= 4
run: strcat/main 15: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 3
run: strcat/main 15: 4 => ((7 integer))
mem: ((7 integer)): 1023 <= 4
run: strcat/main 16: (((jump)) ((-8 offset)))
run: strcat/main 9: (((9 boolean)) <- ((greater-or-equal)) ((8 integer)) ((2 integer)))
mem: ((8 integer)) => 4
mem: ((2 integer)) => 6
run: strcat/main 9: nil => ((9 boolean))
mem: ((9 boolean)): 1025 <= nil
run: strcat/main 10: (((jump-if)) ((9 boolean)) ((6 offset)))
mem: ((9 boolean)) => nil
run: strcat/main 11: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 4
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 11: 1051 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1051
run: strcat/main 12: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 4
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1005 byte) (raw)) => o
run: strcat/main 12: #\o => ((11 byte))
mem: ((11 byte)): 1027 <= #\o
run: strcat/main 13: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => o
run: strcat/main 13: #\o => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1051 <= #\o
run: strcat/main 14: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 4
run: strcat/main 14: 5 => ((8 integer))
mem: ((8 integer)): 1024 <= 5
run: strcat/main 15: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 4
run: strcat/main 15: 5 => ((7 integer))
mem: ((7 integer)): 1023 <= 5
run: strcat/main 16: (((jump)) ((-8 offset)))
run: strcat/main 9: (((9 boolean)) <- ((greater-or-equal)) ((8 integer)) ((2 integer)))
mem: ((8 integer)) => 5
mem: ((2 integer)) => 6
run: strcat/main 9: nil => ((9 boolean))
mem: ((9 boolean)): 1025 <= nil
run: strcat/main 10: (((jump-if)) ((9 boolean)) ((6 offset)))
mem: ((9 boolean)) => nil
run: strcat/main 11: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 5
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 11: 1052 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1052
run: strcat/main 12: (((11 byte)) <- ((index)) ((1 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 5
array-len: ((1000 string) (raw))
mem: ((1000 integer) (raw)) => 6
mem: ((1006 byte) (raw)) => ,
run: strcat/main 12: #\, => ((11 byte))
mem: ((11 byte)): 1027 <= #\,
run: strcat/main 13: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => ,
run: strcat/main 13: #\, => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1052 <= #\,
run: strcat/main 14: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 5
run: strcat/main 14: 6 => ((8 integer))
mem: ((8 integer)): 1024 <= 6
run: strcat/main 15: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 5
run: strcat/main 15: 6 => ((7 integer))
mem: ((7 integer)): 1023 <= 6
run: strcat/main 16: (((jump)) ((-8 offset)))
run: strcat/main 9: (((9 boolean)) <- ((greater-or-equal)) ((8 integer)) ((2 integer)))
mem: ((8 integer)) => 6
mem: ((2 integer)) => 6
run: strcat/main 9: t => ((9 boolean))
mem: ((9 boolean)): 1025 <= t
run: strcat/main 10: (((jump-if)) ((9 boolean)) ((6 offset)))
mem: ((9 boolean)) => t
run: strcat/main 17: (((8 integer)) <- ((copy)) ((0 literal)))
run: strcat/main 17: 0 => ((8 integer))
mem: ((8 integer)): 1024 <= 0
run: strcat/main 18: (((12 boolean)) <- ((greater-or-equal)) ((8 integer)) ((4 integer)))
mem: ((8 integer)) => 0
mem: ((4 integer)) => 7
run: strcat/main 18: nil => ((12 boolean))
mem: ((12 boolean)): 1028 <= nil
run: strcat/main 19: (((jump-if)) ((12 boolean)) ((6 offset)))
mem: ((12 boolean)) => nil
run: strcat/main 20: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 6
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 20: 1053 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1053
run: strcat/main 21: (((11 byte)) <- ((index)) ((3 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 0
array-len: ((1007 string) (raw))
mem: ((1007 integer) (raw)) => 7
mem: ((1008 byte) (raw)) =>  
run: strcat/main 21: #\space => ((11 byte))
mem: ((11 byte)): 1027 <= #\space
run: strcat/main 22: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) =>  
run: strcat/main 22: #\space => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1053 <= #\space
run: strcat/main 23: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 0
run: strcat/main 23: 1 => ((8 integer))
mem: ((8 integer)): 1024 <= 1
run: strcat/main 24: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 6
run: strcat/main 24: 7 => ((7 integer))
mem: ((7 integer)): 1023 <= 7
run: strcat/main 25: (((jump)) ((-8 offset)))
run: strcat/main 18: (((12 boolean)) <- ((greater-or-equal)) ((8 integer)) ((4 integer)))
mem: ((8 integer)) => 1
mem: ((4 integer)) => 7
run: strcat/main 18: nil => ((12 boolean))
mem: ((12 boolean)): 1028 <= nil
run: strcat/main 19: (((jump-if)) ((12 boolean)) ((6 offset)))
mem: ((12 boolean)) => nil
run: strcat/main 20: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 7
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 20: 1054 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1054
run: strcat/main 21: (((11 byte)) <- ((index)) ((3 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 1
array-len: ((1007 string) (raw))
mem: ((1007 integer) (raw)) => 7
mem: ((1009 byte) (raw)) => w
run: strcat/main 21: #\w => ((11 byte))
mem: ((11 byte)): 1027 <= #\w
run: strcat/main 22: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => w
run: strcat/main 22: #\w => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1054 <= #\w
run: strcat/main 23: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 1
run: strcat/main 23: 2 => ((8 integer))
mem: ((8 integer)): 1024 <= 2
run: strcat/main 24: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 7
run: strcat/main 24: 8 => ((7 integer))
mem: ((7 integer)): 1023 <= 8
run: strcat/main 25: (((jump)) ((-8 offset)))
run: strcat/main 18: (((12 boolean)) <- ((greater-or-equal)) ((8 integer)) ((4 integer)))
mem: ((8 integer)) => 2
mem: ((4 integer)) => 7
run: strcat/main 18: nil => ((12 boolean))
mem: ((12 boolean)): 1028 <= nil
run: strcat/main 19: (((jump-if)) ((12 boolean)) ((6 offset)))
mem: ((12 boolean)) => nil
run: strcat/main 20: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 8
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 20: 1055 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1055
run: strcat/main 21: (((11 byte)) <- ((index)) ((3 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 2
array-len: ((1007 string) (raw))
mem: ((1007 integer) (raw)) => 7
mem: ((1010 byte) (raw)) => o
run: strcat/main 21: #\o => ((11 byte))
mem: ((11 byte)): 1027 <= #\o
run: strcat/main 22: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => o
run: strcat/main 22: #\o => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1055 <= #\o
run: strcat/main 23: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 2
run: strcat/main 23: 3 => ((8 integer))
mem: ((8 integer)): 1024 <= 3
run: strcat/main 24: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 8
run: strcat/main 24: 9 => ((7 integer))
mem: ((7 integer)): 1023 <= 9
run: strcat/main 25: (((jump)) ((-8 offset)))
run: strcat/main 18: (((12 boolean)) <- ((greater-or-equal)) ((8 integer)) ((4 integer)))
mem: ((8 integer)) => 3
mem: ((4 integer)) => 7
run: strcat/main 18: nil => ((12 boolean))
mem: ((12 boolean)): 1028 <= nil
run: strcat/main 19: (((jump-if)) ((12 boolean)) ((6 offset)))
mem: ((12 boolean)) => nil
run: strcat/main 20: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 9
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 20: 1056 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1056
run: strcat/main 21: (((11 byte)) <- ((index)) ((3 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 3
array-len: ((1007 string) (raw))
mem: ((1007 integer) (raw)) => 7
mem: ((1011 byte) (raw)) => r
run: strcat/main 21: #\r => ((11 byte))
mem: ((11 byte)): 1027 <= #\r
run: strcat/main 22: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => r
run: strcat/main 22: #\r => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1056 <= #\r
run: strcat/main 23: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 3
run: strcat/main 23: 4 => ((8 integer))
mem: ((8 integer)): 1024 <= 4
run: strcat/main 24: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 9
run: strcat/main 24: 10 => ((7 integer))
mem: ((7 integer)): 1023 <= 10
run: strcat/main 25: (((jump)) ((-8 offset)))
run: strcat/main 18: (((12 boolean)) <- ((greater-or-equal)) ((8 integer)) ((4 integer)))
mem: ((8 integer)) => 4
mem: ((4 integer)) => 7
run: strcat/main 18: nil => ((12 boolean))
mem: ((12 boolean)): 1028 <= nil
run: strcat/main 19: (((jump-if)) ((12 boolean)) ((6 offset)))
mem: ((12 boolean)) => nil
run: strcat/main 20: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 10
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 20: 1057 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1057
run: strcat/main 21: (((11 byte)) <- ((index)) ((3 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 4
array-len: ((1007 string) (raw))
mem: ((1007 integer) (raw)) => 7
mem: ((1012 byte) (raw)) => l
run: strcat/main 21: #\l => ((11 byte))
mem: ((11 byte)): 1027 <= #\l
run: strcat/main 22: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => l
run: strcat/main 22: #\l => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1057 <= #\l
run: strcat/main 23: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 4
run: strcat/main 23: 5 => ((8 integer))
mem: ((8 integer)): 1024 <= 5
run: strcat/main 24: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 10
run: strcat/main 24: 11 => ((7 integer))
mem: ((7 integer)): 1023 <= 11
run: strcat/main 25: (((jump)) ((-8 offset)))
run: strcat/main 18: (((12 boolean)) <- ((greater-or-equal)) ((8 integer)) ((4 integer)))
mem: ((8 integer)) => 5
mem: ((4 integer)) => 7
run: strcat/main 18: nil => ((12 boolean))
mem: ((12 boolean)): 1028 <= nil
run: strcat/main 19: (((jump-if)) ((12 boolean)) ((6 offset)))
mem: ((12 boolean)) => nil
run: strcat/main 20: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 11
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 20: 1058 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1058
run: strcat/main 21: (((11 byte)) <- ((index)) ((3 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 5
array-len: ((1007 string) (raw))
mem: ((1007 integer) (raw)) => 7
mem: ((1013 byte) (raw)) => d
run: strcat/main 21: #\d => ((11 byte))
mem: ((11 byte)): 1027 <= #\d
run: strcat/main 22: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => d
run: strcat/main 22: #\d => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1058 <= #\d
run: strcat/main 23: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 5
run: strcat/main 23: 6 => ((8 integer))
mem: ((8 integer)): 1024 <= 6
run: strcat/main 24: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 11
run: strcat/main 24: 12 => ((7 integer))
mem: ((7 integer)): 1023 <= 12
run: strcat/main 25: (((jump)) ((-8 offset)))
run: strcat/main 18: (((12 boolean)) <- ((greater-or-equal)) ((8 integer)) ((4 integer)))
mem: ((8 integer)) => 6
mem: ((4 integer)) => 7
run: strcat/main 18: nil => ((12 boolean))
mem: ((12 boolean)): 1028 <= nil
run: strcat/main 19: (((jump-if)) ((12 boolean)) ((6 offset)))
mem: ((12 boolean)) => nil
run: strcat/main 20: (((10 byte-address)) <- ((index-address)) ((6 string-address) (deref)) ((7 integer)))
mem: ((7 integer)) => 12
array-len: ((1046 string) (raw))
mem: ((1046 integer) (raw)) => 13
run: strcat/main 20: 1059 => ((10 byte-address))
mem: ((10 byte-address)): 1026 <= 1059
run: strcat/main 21: (((11 byte)) <- ((index)) ((3 string-address) (deref)) ((8 integer)))
mem: ((8 integer)) => 6
array-len: ((1007 string) (raw))
mem: ((1007 integer) (raw)) => 7
mem: ((1014 byte) (raw)) => !
run: strcat/main 21: #\! => ((11 byte))
mem: ((11 byte)): 1027 <= #\!
run: strcat/main 22: (((10 byte-address) (deref)) <- ((copy)) ((11 byte)))
mem: ((11 byte)) => !
run: strcat/main 22: #\! => ((10 byte-address) (deref))
mem: ((10 byte-address) (deref)): 1059 <= #\!
run: strcat/main 23: (((8 integer)) <- ((add)) ((8 integer)) ((1 literal)))
mem: ((8 integer)) => 6
run: strcat/main 23: 7 => ((8 integer))
mem: ((8 integer)): 1024 <= 7
run: strcat/main 24: (((7 integer)) <- ((add)) ((7 integer)) ((1 literal)))
mem: ((7 integer)) => 12
run: strcat/main 24: 13 => ((7 integer))
mem: ((7 integer)): 1023 <= 13
run: strcat/main 25: (((jump)) ((-8 offset)))
run: strcat/main 18: (((12 boolean)) <- ((greater-or-equal)) ((8 integer)) ((4 integer)))
mem: ((8 integer)) => 7
mem: ((4 integer)) => 7
run: strcat/main 18: t => ((12 boolean))
mem: ((12 boolean)): 1028 <= t
run: strcat/main 19: (((jump-if)) ((12 boolean)) ((6 offset)))
mem: ((12 boolean)) => t
run: strcat/main 26: (((reply)) ((6 string-address)))
mem: ((6 string-address)) => 1046
run: main 2: 1046 => ((3 string-address))
mem: ((3 string-address)): 3 <= 1046
schedule: done with routine nil
