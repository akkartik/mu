c{0: 0 (((1 integer)) <- ((copy)) ((34 literal))) -- nil
c{0: 1 (((2 boolean)) <- ((copy)) ((t literal))) -- nil
c{0: 2 (((3 boolean-address)) <- ((get-address)) ((1 integer-boolean-pair)) ((1 offset))) -- nil
c{1: 0 ✓ (((1 integer)) <- ((copy)) ((34 literal)))
c{1: 1 ✓ (((2 boolean)) <- ((copy)) ((t literal)))
c{1: 2 ✓ (((3 boolean-address)) <- ((get-address)) ((1 integer-boolean-pair)) ((1 offset)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((copy)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 boolean)) <- ((copy)) ((t literal))) nil nil
cn0: checking arg ((t literal))
cn0: checking oarg ((2 boolean))
maybe-add: ((2 boolean))
cn0: (((3 boolean-address)) <- ((get-address)) ((1 integer-boolean-pair)) ((1 offset))) nil nil
cn0: field-access 1 in 1integer-boolean-pair of type integer-boolean-pair
cn0: checking arg ((1 integer-boolean-pair))
maybe-add: ((1 integer-boolean-pair))
cn0: checking arg ((1 offset))
cn0: checking oarg ((3 boolean-address))
maybe-add: ((3 boolean-address))
cn1: (((1 integer)) <- ((copy)) ((34 literal)))
cn1: (((2 boolean)) <- ((copy)) ((t literal)))
cn1: (((3 boolean-address)) <- ((get-address)) ((1 integer-boolean-pair)) ((1 offset)))
schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((34 literal)))
run: main 0: 34 => ((1 integer))
mem: ((1 integer)): 1 <= 34
run: main 1: (((2 boolean)) <- ((copy)) ((t literal)))
run: main 1: t => ((2 boolean))
mem: ((2 boolean)): 2 <= t
run: main 2: (((3 boolean-address)) <- ((get-address)) ((1 integer-boolean-pair)) ((1 offset)))
run: main 2: 2 => ((3 boolean-address))
mem: ((3 boolean-address)): 3 <= 2
schedule: done with routine nil
