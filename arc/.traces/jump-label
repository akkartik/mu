c{0: 0 (((1 integer)) <- ((copy)) ((2 literal))) -- nil
c{0: 1 (((2 integer)) <- ((copy)) ((1 literal))) -- nil
c{0: 2 loop -- nil
c{0: 3 (((2 integer)) <- ((add)) ((2 integer)) ((2 integer))) -- nil
c{0: 4 (((3 boolean)) <- ((equal)) ((1 integer)) ((2 integer))) -- nil
c{0: 5 (((jump-if)) ((3 boolean)) ((loop offset))) -- nil
c{0: 6 (((4 integer)) <- ((copy)) ((3 literal))) -- nil
c{0: 7 (((reply))) -- nil
c{0: 8 (((3 integer)) <- ((copy)) ((34 literal))) -- nil
c{1: 0 ✓ (((1 integer)) <- ((copy)) ((2 literal)))
c{1: 1 ✓ (((2 integer)) <- ((copy)) ((1 literal)))
c{1: 3 ✓ (((2 integer)) <- ((add)) ((2 integer)) ((2 integer)))
c{1: 4 ✓ (((3 boolean)) <- ((equal)) ((1 integer)) ((2 integer)))
c{1: 5 ✓ (((jump-if)) ((3 boolean)) ((loop offset)))
c{1: 6 ✓ (((4 integer)) <- ((copy)) ((3 literal)))
c{1: 7 ✓ (((reply)))
c{1: 8 ✓ (((3 integer)) <- ((copy)) ((34 literal)))
cn0: convert-names in main
cn0: (((1 integer)) <- ((copy)) ((2 literal))) nil nil
cn0: checking arg ((2 literal))
cn0: checking oarg ((1 integer))
maybe-add: ((1 integer))
cn0: (((2 integer)) <- ((copy)) ((1 literal))) nil nil
cn0: checking arg ((1 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((2 integer)) <- ((add)) ((2 integer)) ((2 integer))) nil nil
cn0: checking arg ((2 integer))
maybe-add: ((2 integer))
cn0: checking arg ((2 integer))
maybe-add: ((2 integer))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: (((3 boolean)) <- ((equal)) ((1 integer)) ((2 integer))) nil nil
cn0: checking arg ((1 integer))
maybe-add: ((1 integer))
cn0: checking arg ((2 integer))
maybe-add: ((2 integer))
cn0: checking oarg ((3 boolean))
maybe-add: ((3 boolean))
cn0: (((jump-if)) ((3 boolean)) ((-4 offset))) nil nil
cn0: checking arg ((3 boolean))
maybe-add: ((3 boolean))
cn0: checking arg ((-4 offset))
cn0: (((4 integer)) <- ((copy)) ((3 literal))) nil nil
cn0: checking arg ((3 literal))
cn0: checking oarg ((4 integer))
maybe-add: ((4 integer))
cn0: (((reply))) nil nil
cn0: (((3 integer)) <- ((copy)) ((34 literal))) nil nil
cn0: checking arg ((34 literal))
cn0: checking oarg ((3 integer))
maybe-add: ((3 integer))
cn1: (((1 integer)) <- ((copy)) ((2 literal)))
cn1: (((2 integer)) <- ((copy)) ((1 literal)))
cn1: loop
cn1: (((2 integer)) <- ((add)) ((2 integer)) ((2 integer)))
cn1: (((3 boolean)) <- ((equal)) ((1 integer)) ((2 integer)))
cn1: (((jump-if)) ((3 boolean)) ((-4 offset)))
cn1: (((4 integer)) <- ((copy)) ((3 literal)))
cn1: (((reply)))
cn1: (((3 integer)) <- ((copy)) ((34 literal)))
schedule: main
run: main 0: (((1 integer)) <- ((copy)) ((2 literal)))
run: main 0: 2 => ((1 integer))
mem: ((1 integer)): 1 <= 2
run: main 1: (((2 integer)) <- ((copy)) ((1 literal)))
run: main 1: 1 => ((2 integer))
mem: ((2 integer)): 2 <= 1
run: main 2: loop
run: main 3: (((2 integer)) <- ((add)) ((2 integer)) ((2 integer)))
mem: ((2 integer)) => 1
mem: ((2 integer)) => 1
run: main 3: 2 => ((2 integer))
mem: ((2 integer)): 2 <= 2
run: main 4: (((3 boolean)) <- ((equal)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 2
mem: ((2 integer)) => 2
run: main 4: t => ((3 boolean))
mem: ((3 boolean)): 3 <= t
run: main 5: (((jump-if)) ((3 boolean)) ((-4 offset)))
mem: ((3 boolean)) => t
run: main 2: loop
run: main 3: (((2 integer)) <- ((add)) ((2 integer)) ((2 integer)))
mem: ((2 integer)) => 2
mem: ((2 integer)) => 2
run: main 3: 4 => ((2 integer))
mem: ((2 integer)): 2 <= 4
run: main 4: (((3 boolean)) <- ((equal)) ((1 integer)) ((2 integer)))
mem: ((1 integer)) => 2
mem: ((2 integer)) => 4
run: main 4: nil => ((3 boolean))
mem: ((3 boolean)): 3 <= nil
run: main 5: (((jump-if)) ((3 boolean)) ((-4 offset)))
mem: ((3 boolean)) => nil
run: main 6: (((4 integer)) <- ((copy)) ((3 literal)))
run: main 6: 3 => ((4 integer))
mem: ((4 integer)): 4 <= 3
run: main 7: (((reply)))
schedule: done with routine nil
