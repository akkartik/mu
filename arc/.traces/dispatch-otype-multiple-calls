c{0: 0 (((1 boolean)) <- ((test1)) ((t literal)) ((t literal))) -- nil
c{0: 1 (((2 integer)) <- ((test1)) ((3 literal)) ((4 literal))) -- nil
c{1: 0 ✓ (((1 boolean)) <- ((test1)) ((t literal)) ((t literal)))
c{1: 1 ✓ (((2 integer)) <- ((test1)) ((3 literal)) ((4 literal)))
c{0: 0 (((4 type)) <- ((otype)) ((0 offset))) -- nil
c{0: 1 (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal))) -- ((open 1))
c{0: 2 (((break-unless)) ((5 boolean))) -- ((open 1))
c{0: 3 (((6 integer)) <- ((next-input))) -- ((open 1))
c{0: 4 (((7 integer)) <- ((next-input))) -- ((open 1))
c{0: 5 (((8 integer)) <- ((add)) ((6 integer)) ((7 integer))) -- ((open 1))
c{0: 6 (((reply)) ((8 integer))) -- ((open 1))
c{0: 7 (((5 boolean)) <- ((equal)) ((4 type)) ((boolean literal))) -- ((open 7) (close 7) (open 1))
c{0: 8 (((break-unless)) ((5 boolean))) -- ((open 7) (close 7) (open 1))
c{0: 9 (((6 boolean)) <- ((next-input))) -- ((open 7) (close 7) (open 1))
c{0: 10 (((7 boolean)) <- ((next-input))) -- ((open 7) (close 7) (open 1))
c{0: 11 (((8 boolean)) <- ((or)) ((6 boolean)) ((7 boolean))) -- ((open 7) (close 7) (open 1))
c{0: 12 (((reply)) ((8 boolean))) -- ((open 7) (close 7) (open 1))
c{1: 0 ✓ (((4 type)) <- ((otype)) ((0 offset)))
c{1: 1 ✓ (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal)))
c{1: 2 X (((break-unless)) ((5 boolean))) => (((jump-unless)) ((5 boolean)) ((4 offset)))
c{1: 3 ✓ (((6 integer)) <- ((next-input)))
c{1: 4 ✓ (((7 integer)) <- ((next-input)))
c{1: 5 ✓ (((8 integer)) <- ((add)) ((6 integer)) ((7 integer)))
c{1: 6 ✓ (((reply)) ((8 integer)))
c{1: 7 ✓ (((5 boolean)) <- ((equal)) ((4 type)) ((boolean literal)))
c{1: 8 X (((break-unless)) ((5 boolean))) => (((jump-unless)) ((5 boolean)) ((4 offset)))
c{1: 9 ✓ (((6 boolean)) <- ((next-input)))
c{1: 10 ✓ (((7 boolean)) <- ((next-input)))
c{1: 11 ✓ (((8 boolean)) <- ((or)) ((6 boolean)) ((7 boolean)))
c{1: 12 ✓ (((reply)) ((8 boolean)))
cn0: convert-names in main
cn0: (((1 boolean)) <- ((test1)) ((t literal)) ((t literal))) nil nil
cn0: checking arg ((t literal))
cn0: checking arg ((t literal))
cn0: checking oarg ((1 boolean))
maybe-add: ((1 boolean))
cn0: (((2 integer)) <- ((test1)) ((3 literal)) ((4 literal))) nil nil
cn0: checking arg ((3 literal))
cn0: checking arg ((4 literal))
cn0: checking oarg ((2 integer))
maybe-add: ((2 integer))
cn0: convert-names in test1
cn0: (((4 type)) <- ((otype)) ((0 offset))) nil nil
cn0: checking arg ((0 offset))
cn0: checking oarg ((4 type))
maybe-add: ((4 type))
cn0: (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal))) nil nil
cn0: checking arg ((4 type))
maybe-add: ((4 type))
cn0: checking arg ((integer literal))
cn0: checking oarg ((5 boolean))
maybe-add: ((5 boolean))
cn0: (((jump-unless)) ((5 boolean)) ((4 offset))) nil nil
cn0: checking arg ((5 boolean))
maybe-add: ((5 boolean))
cn0: checking arg ((4 offset))
cn0: (((6 integer)) <- ((next-input))) nil nil
cn0: checking oarg ((6 integer))
maybe-add: ((6 integer))
cn0: (((7 integer)) <- ((next-input))) nil nil
cn0: checking oarg ((7 integer))
maybe-add: ((7 integer))
cn0: (((8 integer)) <- ((add)) ((6 integer)) ((7 integer))) nil nil
cn0: checking arg ((6 integer))
maybe-add: ((6 integer))
cn0: checking arg ((7 integer))
maybe-add: ((7 integer))
cn0: checking oarg ((8 integer))
maybe-add: ((8 integer))
cn0: (((reply)) ((8 integer))) nil nil
cn0: checking arg ((8 integer))
maybe-add: ((8 integer))
cn0: (((5 boolean)) <- ((equal)) ((4 type)) ((boolean literal))) nil nil
cn0: checking arg ((4 type))
maybe-add: ((4 type))
cn0: checking arg ((boolean literal))
cn0: checking oarg ((5 boolean))
maybe-add: ((5 boolean))
cn0: (((jump-unless)) ((5 boolean)) ((4 offset))) nil nil
cn0: checking arg ((5 boolean))
maybe-add: ((5 boolean))
cn0: checking arg ((4 offset))
cn0: (((6 boolean)) <- ((next-input))) nil nil
cn0: checking oarg ((6 boolean))
maybe-add: ((6 boolean))
cn0: (((7 boolean)) <- ((next-input))) nil nil
cn0: checking oarg ((7 boolean))
maybe-add: ((7 boolean))
cn0: (((8 boolean)) <- ((or)) ((6 boolean)) ((7 boolean))) nil nil
cn0: checking arg ((6 boolean))
maybe-add: ((6 boolean))
cn0: checking arg ((7 boolean))
maybe-add: ((7 boolean))
cn0: checking oarg ((8 boolean))
maybe-add: ((8 boolean))
cn0: (((reply)) ((8 boolean))) nil nil
cn0: checking arg ((8 boolean))
maybe-add: ((8 boolean))
cn1: (((1 boolean)) <- ((test1)) ((t literal)) ((t literal)))
cn1: (((2 integer)) <- ((test1)) ((3 literal)) ((4 literal)))
cn1: (((4 type)) <- ((otype)) ((0 offset)))
cn1: (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal)))
cn1: (((jump-unless)) ((5 boolean)) ((4 offset)))
cn1: (((6 integer)) <- ((next-input)))
cn1: (((7 integer)) <- ((next-input)))
cn1: (((8 integer)) <- ((add)) ((6 integer)) ((7 integer)))
cn1: (((reply)) ((8 integer)))
cn1: (((5 boolean)) <- ((equal)) ((4 type)) ((boolean literal)))
cn1: (((jump-unless)) ((5 boolean)) ((4 offset)))
cn1: (((6 boolean)) <- ((next-input)))
cn1: (((7 boolean)) <- ((next-input)))
cn1: (((8 boolean)) <- ((or)) ((6 boolean)) ((7 boolean)))
cn1: (((reply)) ((8 boolean)))
schedule: main
run: main 0: (((1 boolean)) <- ((test1)) ((t literal)) ((t literal)))
run: test1/main 0: (((4 type)) <- ((otype)) ((0 offset)))
run: test1/main 0: boolean => ((4 type))
mem: ((4 type)): 4 <= boolean
run: test1/main 1: (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal)))
mem: ((4 type)) => boolean
run: test1/main 1: nil => ((5 boolean))
mem: ((5 boolean)): 5 <= nil
run: test1/main 2: (((jump-unless)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => nil
run: test1/main 7: (((5 boolean)) <- ((equal)) ((4 type)) ((boolean literal)))
mem: ((4 type)) => boolean
run: test1/main 7: t => ((5 boolean))
mem: ((5 boolean)): 5 <= t
run: test1/main 8: (((jump-unless)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => t
run: test1/main 9: (((6 boolean)) <- ((next-input)))
arg: nil 0 (t t)
run: test1/main 9: t => ((6 boolean))
mem: ((6 boolean)): 6 <= t
run: test1/main 10: (((7 boolean)) <- ((next-input)))
arg: nil 1 (t t)
run: test1/main 10: t => ((7 boolean))
mem: ((7 boolean)): 7 <= t
run: test1/main 11: (((8 boolean)) <- ((or)) ((6 boolean)) ((7 boolean)))
mem: ((6 boolean)) => t
run: test1/main 11: t => ((8 boolean))
mem: ((8 boolean)): 8 <= t
run: test1/main 12: (((reply)) ((8 boolean)))
mem: ((8 boolean)) => t
run: main 0: t => ((1 boolean))
mem: ((1 boolean)): 1 <= t
run: main 1: (((2 integer)) <- ((test1)) ((3 literal)) ((4 literal)))
run: test1/main 0: (((4 type)) <- ((otype)) ((0 offset)))
run: test1/main 0: integer => ((4 type))
mem: ((4 type)): 4 <= integer
run: test1/main 1: (((5 boolean)) <- ((equal)) ((4 type)) ((integer literal)))
mem: ((4 type)) => integer
run: test1/main 1: t => ((5 boolean))
mem: ((5 boolean)): 5 <= t
run: test1/main 2: (((jump-unless)) ((5 boolean)) ((4 offset)))
mem: ((5 boolean)) => t
run: test1/main 3: (((6 integer)) <- ((next-input)))
arg: nil 0 (3 4)
run: test1/main 3: 3 => ((6 integer))
mem: ((6 integer)): 6 <= 3
run: test1/main 4: (((7 integer)) <- ((next-input)))
arg: nil 1 (3 4)
run: test1/main 4: 4 => ((7 integer))
mem: ((7 integer)): 7 <= 4
run: test1/main 5: (((8 integer)) <- ((add)) ((6 integer)) ((7 integer)))
mem: ((6 integer)) => 3
mem: ((7 integer)) => 4
run: test1/main 5: 7 => ((8 integer))
mem: ((8 integer)): 8 <= 7
run: test1/main 6: (((reply)) ((8 integer)))
mem: ((8 integer)) => 7
run: main 1: 7 => ((2 integer))
mem: ((2 integer)): 2 <= 7
schedule: done with routine nil
