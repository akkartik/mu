// A simple test harness. To create new tests define functions starting with
// 'test_'. To run all tests so defined, run:
//   $ wart test
//
// So far it seems tasteful for layers to never ever reach back to modify
// previously-defined tests. Every test is a contract once written, and should
// pass as-is if it is included, regardless of how much later layers change
// the program. Avoid writing 'temporary' tests that only work with some
// subsets of the program.

:(before "End Types")
typedef void (*test_fn)(void);

:(before "End Globals")
const test_fn Tests[] = {
  #include "test_list"  // auto-generated; see makefile
};

bool Passed = true;

long Num_failures = 0;

#define TEST(name) void test_##name() { Trace_file = #name;

#define CHECK(X) \
  if (!(X)) { \
    ++Num_failures; \
    cerr << "\nF " << __FUNCTION__ << "(" << __FILE__ << ":" << __LINE__ << "): " << #X << '\n'; \
    Passed = false; \
    return; \
  }

#define CHECK_EQ(X, Y) \
  if ((X) != (Y)) { \
    ++Num_failures; \
    cerr << "\nF " << __FUNCTION__ << "(" << __FILE__ << ":" << __LINE__ << "): " << #X << " == " << #Y << '\n'; \
    cerr << "  got " << (X) << '\n';  /* BEWARE: multiple eval */ \
    Passed = false; \
    return; \
  }

:(before "End Main")
if (argc == 2 && is_equal(argv[1], "test")) {
  run_tests();
  cerr << '\n';
  if (Num_failures > 0)
    cerr << Num_failures << " failure"
         << (Num_failures > 1 ? "s" : "")
         << '\n';
  return 0;
}
// pass in a set of line numbers in test_file to run just those tests
if (argc > 2 && is_equal(argv[1], "test")) {
  for (int i = 2; i < argc; ++i) {
    run_test(to_int(argv[i])-1);
  }
  cerr << '\n';
  if (Num_failures > 0)
    cerr << Num_failures << " failure"
         << (Num_failures > 1 ? "s" : "")
         << '\n';
  return 0;
}

:(code)
void run_tests() {
  time_t t; time(&t);
  cerr << "C tests: " << ctime(&t);
  for (unsigned long i=0; i < sizeof(Tests)/sizeof(Tests[0]); ++i) {
    run_test(i);
  }
  // End Tests
}

void run_test(int i) {
  setup();
  // End Test Setup
  (*Tests[i])();
  if (Passed) cerr << ".";
  // Test Teardown
  // End Test Teardown
}

bool is_equal(char* s, const char* lit) {
  return strncmp(s, lit, strlen(lit)) == 0;
}

int to_int(string n) {
  char* end = NULL;
  int result = strtol(n.c_str(), &end, /*any base*/0);
  assert(*end == '\0');
  return result;
}

:(before "End Includes")
#include<iostream>
using std::istream;
using std::ostream;
using std::iostream;
using std::cin;
using std::cout;
using std::cerr;

#include<cstring>
